{
  "openapi": "3.0.0",
  "info": {
    "title": "Mainio Platform API",
    "description": "\n# Introduction\nWelcome to the Mainio API documentation. This API follows REST principles and provides endpoints for managing tenants, agents, data sources, and more.\n\n## Authentication\nAll API endpoints require authentication. For user authentication, users must be authenticated via session.\n\n## Authorization\nThe API implements role-based access control.\n\n## Common Patterns\n\n### Resource Inclusion\nMany endpoints support including related resources via the `include` query parameter:\n```\nGET /api/tenants/123?include=users,agents,datasources\n```\n\n### Response Format\nAll responses follow a consistent format:\n```json\n{\n  \"data\": {}, // Response data\n  \"error\": \"Error message if any\"\n}\n```\n",
    "version": "0.1.0"
  },
  "paths": {
    "/auth/change-password": {
      "post": {
        "summary": "Change user password",
        "operationId": "changePassword",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "sessionAuth": []
          },
          {
            "internalApiAuth": []
          }
        ],
        "description": "Updates a user's password after authentication.\nUsers can only change their own password.\n\n## Authentication\nThis endpoint requires authentication via:\n- **Session-based auth**: Browser session cookie\n- **Token-based auth**: `x-mainio-internal-token` header (origin validation enforced)\n\n## Access Control\n- Users can only change their own password (userId must match authenticated user)\n- System role users cannot use this endpoint for other users\n\n## Password Requirements\n- Minimum length: 8 characters (enforced by schema)\n- Passwords are salted and hashed using secure methods\n- Salt is stored separately from the hash\n\n## Security Notes\n- Previous password is not required (relies on authentication)\n- Password history is not tracked\n- No password complexity requirements beyond length\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordSchema"
              },
              "examples": {
                "basic": {
                  "summary": "Basic password change",
                  "value": {
                    "userId": "clh1234567890abcdef",
                    "newPassword": "MyNewSecurePassword123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePasswordResponse"
                },
                "example": {
                  "success": true
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                },
                "example": {
                  "error": {
                    "code": "VALIDATION_ERROR",
                    "message": "Invalid input",
                    "details": {
                      "newPassword": [
                        "Password must be at least 8 characters"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                },
                "example": {
                  "error": {
                    "code": "NOT_FOUND",
                    "message": "User not found"
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": []
      }
    },
    "/api/auth/login": {
      "post": {
        "summary": "Authenticate user with credentials",
        "operationId": "authenticateUser",
        "tags": [
          "Authentication"
        ],
        "description": "Authenticates a user with email and password credentials.\nReturns a JWT token for API access.\n\n## Authentication\nThis is a public endpoint - no authentication required.\n\n## Access Control\n- Public endpoint accessible to anyone\n- Rate limiting applied to prevent brute force attacks\n\n## User Types\n1. **Mindhive Internal Users** (@mindhive.fi email)\n   - Can authenticate from any tenant domain\n   - Typically have system or admin roles\n\n2. **Tenant Users** (regular email)\n   - Must authenticate from their tenant's domain\n   - Or provide explicit tenantId in request\n\n## Tenant Resolution\nFor non-Mindhive users, tenant is determined by:\n1. Explicit `tenantId` in request body\n2. Hostname of the request (e.g., tenant1.mainio.app)\n\n## Token Details\n- Algorithm: HS256\n- Expiration: 30 days\n- Contains: user ID, email, name, role, tenant info\n",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostApiAuthLoginRequestBody"
              },
              "examples": {
                "tenantUser": {
                  "summary": "Tenant user login",
                  "value": {
                    "email": "john.doe@company.com",
                    "password": "MySecurePassword123"
                  }
                },
                "mindhiveUser": {
                  "summary": "Mindhive internal user login",
                  "value": {
                    "email": "admin@mindhive.fi",
                    "password": "AdminPassword123"
                  }
                },
                "withTenantId": {
                  "summary": "Login with explicit tenant ID",
                  "value": {
                    "email": "user@example.com",
                    "password": "UserPassword123",
                    "tenantId": "clh1234567890abcdef"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authentication successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostApiAuthLoginResponse200"
                },
                "example": {
                  "success": true,
                  "data": {
                    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbGgxMjM0NTY3ODkwYWJjZGVmIiwiZW1haWwiOiJ1c2VyQGV4YW1wbGUuY29tIiwibmFtZSI6IkpvaG4gRG9lIiwicm9sZSI6InVzZXIiLCJ0ZW5hbnRJZCI6ImNsaDA5ODc2NTQzMjFmZWRjYmEiLCJ0ZW5hbnQiOnsiaWQiOiJjbGgwOTg3NjU0MzIxZmVkY2JhIiwibmFtZSI6IkFjbWUgQ29ycG9yYXRpb24iLCJkb21haW4iOiJhY21lLm1haW5pby5hcHAifSwiaWF0IjoxNzA1MzI1MDAwLCJleHAiOjE3MDc5MTcwMDB9.abc123...",
                    "user": {
                      "id": "clh1234567890abcdef",
                      "email": "user@example.com",
                      "name": "John Doe",
                      "role": "user",
                      "tenantId": "clh0987654321fedcba",
                      "tenant": {
                        "id": "clh0987654321fedcba",
                        "name": "Acme Corporation",
                        "domain": "acme.mainio.app"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                },
                "examples": {
                  "missingFields": {
                    "summary": "Missing required fields",
                    "value": {
                      "error": {
                        "code": "VALIDATION_ERROR",
                        "message": "Email and password are required",
                        "details": {
                          "email": [
                            "Email is required"
                          ],
                          "password": [
                            "Password is required"
                          ]
                        }
                      }
                    }
                  },
                  "invalidTypes": {
                    "summary": "Invalid data types",
                    "value": {
                      "error": {
                        "code": "VALIDATION_ERROR",
                        "message": "Invalid data types",
                        "details": {
                          "email": [
                            "Email must be a string"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                },
                "example": {
                  "error": {
                    "code": "UNAUTHORIZED",
                    "message": "Invalid credentials"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                },
                "example": {
                  "error": {
                    "code": "NOT_FOUND",
                    "message": "Tenant not found"
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "summary": "Logout user session",
        "operationId": "logoutUser",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "sessionAuth": []
          },
          {
            "internalApiAuth": []
          },
          {}
        ],
        "description": "Logs out the current user session.\n\n**Authentication:** Optional\n**Authorization:** Public endpoint\n\n## Access Control\n- **Public endpoint** - No authentication required\n- **Idempotent operation** - Safe to call multiple times\n\n## Authentication Behavior\nThis endpoint accepts but doesn't require authentication:\n- **Session-based auth**: Will clear the session if present\n- **Token-based auth**: Client should discard the token\n- **No auth**: Returns success (idempotent operation)\n- **No rate limiting** applied\n\n## Logout Behavior\n\n### For Session-based Auth (NextAuth)\n- The actual session clearing is handled by NextAuth\n- Client should call `/api/auth/signout` for proper session cleanup\n- This endpoint exists for API consistency\n\n### For JWT Token Auth\n- Server doesn't maintain token state (stateless)\n- Client is responsible for discarding the token\n- No server-side invalidation occurs\n\n## Security Notes\n- No token blacklisting implemented\n- Tokens remain valid until expiration\n- For immediate revocation needs, implement token blacklisting\n",
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostApiAuthLogoutRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostApiAuthLogoutResponse200"
                },
                "example": {
                  "success": true,
                  "data": {
                    "message": "Logged out successfully"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/validate-session": {
      "get": {
        "summary": "Validate user session and get current user",
        "operationId": "validateSession",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "sessionAuth": []
          }
        ],
        "description": "Validates the user session and returns current user information.\n\n## Authentication\nThis endpoint supports two authentication methods:\n- **JWT Bearer Token**: For mobile/API clients - `Authorization: Bearer <token>`\n- **Session Cookie**: For web clients - Automatic via NextAuth\n\n## Access Control\n- Any authenticated user can access their own session information\n- No role restrictions\n\n## Authentication Flow\n1. First checks for JWT Bearer token (mobile clients)\n2. If no valid JWT, falls back to NextAuth session (web clients)\n3. Always fetches fresh user data from database\n4. Returns full user and tenant information\n\n## Use Cases\n- **Mobile Apps**: Validate JWT token on app launch\n- **Web Apps**: Check session validity after page refresh\n- **API Clients**: Verify token before making other requests\n\n## Token Validation\n- JWT tokens are verified using HMAC-SHA256\n- Expired tokens return 401 Unauthorized\n- Invalid signatures return 401 Unauthorized\n- User must still exist in database\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Session validation successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetApiAuthValidateSessionResponse200"
                },
                "example": {
                  "success": true,
                  "data": {
                    "user": {
                      "id": "clh1234567890abcdef",
                      "email": "john.doe@acme.com",
                      "name": "John Doe",
                      "role": "user",
                      "tenantId": "clh0987654321fedcba",
                      "tenant": {
                        "id": "clh0987654321fedcba",
                        "name": "Acme Corporation",
                        "domain": "acme.mainio.app"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                },
                "examples": {
                  "noAuth": {
                    "summary": "No authentication provided",
                    "value": {
                      "error": {
                        "code": "UNAUTHORIZED",
                        "message": "Authentication required"
                      }
                    }
                  },
                  "invalidToken": {
                    "summary": "Invalid JWT token",
                    "value": {
                      "error": {
                        "code": "UNAUTHORIZED",
                        "message": "Invalid credentials"
                      }
                    }
                  },
                  "expiredToken": {
                    "summary": "Expired JWT token",
                    "value": {
                      "error": {
                        "code": "UNAUTHORIZED",
                        "message": "Token has expired"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found (deleted after token creation)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                },
                "example": {
                  "error": {
                    "code": "NOT_FOUND",
                    "message": "User not found"
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/embeddings/{embedModelId}": {
      "get": {
        "summary": "Get a specific embedding",
        "operationId": "getEmbedding",
        "tags": [
          "Embeddings"
        ],
        "description": "Returns a specific embedding. Only system users can access this endpoint.\n",
        "parameters": [
          {
            "in": "path",
            "name": "embedModelId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the embedding"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/EmbeddingResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "summary": "Update an embedding",
        "tags": [
          "Embeddings"
        ],
        "description": "Updates a specific embedding. Only system users can access this endpoint.\n",
        "operationId": "updateEmbedding",
        "parameters": [
          {
            "in": "path",
            "name": "embedModelId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the embedding"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutEmbeddingsEmbedModelIdRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/EmbeddingResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "summary": "Delete an embedding",
        "tags": [
          "Embeddings"
        ],
        "description": "Deletes a specific embedding. Only system users can access this endpoint.\n",
        "operationId": "deleteEmbedding",
        "parameters": [
          {
            "in": "path",
            "name": "embedModelId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the embedding"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/embeddings": {
      "get": {
        "summary": "Get all embeddings",
        "operationId": "listEmbeddings",
        "tags": [
          "Embeddings"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Returns all embeddings.\n\n**Authentication:** Required\n**Authorization:** System role only\n\n## Access Control\n- **Required Role:** `system`\n- **Allowed Roles:** None (system only)\n\nThis endpoint is restricted to system administrators for managing\nembedding configurations across all tenants.\n",
        "responses": {
          "200": {
            "description": "List of embeddings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEmbeddingsResponse200"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": []
      },
      "post": {
        "summary": "Create a new embedding",
        "tags": [
          "Embeddings"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Creates a new embedding configuration.\n\n**Authentication:** Required\n**Authorization:** System role only\n\n## Access Control\n- **Required Role:** `system`\n- **Allowed Roles:** None (system only)\n\nThis endpoint is restricted to system administrators for creating\nnew embedding configurations that can be used across all tenants.\n",
        "operationId": "createEmbedding",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutEmbeddingsEmbedModelIdRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/schemas/EmbeddingResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": []
      }
    },
    "/foundation-models/{modelId}": {
      "get": {
        "summary": "Get a specific foundation model",
        "operationId": "getFoundationModel",
        "tags": [
          "Foundation Models"
        ],
        "description": "Returns a specific foundation model. Only system users can access this endpoint.\n",
        "parameters": [
          {
            "in": "path",
            "name": "modelId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the foundation model"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/FoundationModelResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "summary": "Update a foundation model",
        "tags": [
          "Foundation Models"
        ],
        "description": "Updates a specific foundation model. Only system users can access this endpoint.\n",
        "operationId": "updateFoundationModel",
        "parameters": [
          {
            "in": "path",
            "name": "modelId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the foundation model"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutFoundationModelsModelIdRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/FoundationModelResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "summary": "Delete a foundation model",
        "operationId": "deleteFoundationModel",
        "tags": [
          "Foundation Models"
        ],
        "description": "Deletes a specific foundation model. Only system users can access this endpoint.\n",
        "parameters": [
          {
            "in": "path",
            "name": "modelId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the foundation model"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/foundation-models": {
      "get": {
        "summary": "Get all foundation models",
        "operationId": "listFoundationModels",
        "tags": [
          "Foundation Models"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Returns all foundation models.\n\n**Authentication:** Required\n**Authorization:** System role only\n\n## Access Control\n- **Required Role:** `system`\n- **Allowed Roles:** None (system only)\n\nThis endpoint is restricted to system administrators for managing\nAI model configurations across all tenants.\n",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/FoundationModelListResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": []
      },
      "post": {
        "summary": "Create a new foundation model",
        "tags": [
          "Foundation Models"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Creates a new foundation model configuration.\n\n**Authentication:** Required\n**Authorization:** System role only\n\n## Access Control\n- **Required Role:** `system`\n- **Allowed Roles:** None (system only)\n\nThis endpoint is restricted to system administrators for creating\nnew AI model configurations that can be used across all tenants.\n",
        "operationId": "createFoundationModel",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutFoundationModelsModelIdRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/schemas/FoundationModelResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": []
      }
    },
    "/health": {
      "get": {
        "summary": "Get system health status",
        "operationId": "getSystemHealth",
        "tags": [
          "System"
        ],
        "description": "Returns the health status of the system and its dependent services.\nThis endpoint forwards the request to the backend health check and\nwraps the response in the standard API format.\n",
        "responses": {
          "200": {
            "description": "System health status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetHealthResponse200"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          },
          "503": {
            "description": "One or more services are unhealthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetHealthResponse503"
                }
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/jobs/{jobId}/executions": {
      "get": {
        "summary": "Get job execution history",
        "tags": [
          "Jobs"
        ],
        "description": "Returns the execution history of a specific job. System users can access any job's history, while other users can only access history of jobs from their tenant.",
        "operationId": "listJobExecutionsByJobId",
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the job"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of executions to return"
          },
          {
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/JobStatus"
            },
            "description": "Filter by execution status"
          }
        ],
        "responses": {
          "200": {
            "description": "List of job executions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobExecutionListResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/{jobId}": {
      "get": {
        "summary": "Get a specific job",
        "tags": [
          "Jobs"
        ],
        "description": "Returns a specific job. System users can access any job, while other users can only access jobs from their tenant.",
        "operationId": "getJob",
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the job"
          }
        ],
        "responses": {
          "200": {
            "description": "Job details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "summary": "Update a job",
        "tags": [
          "Jobs"
        ],
        "description": "Updates a job. System users can update any job, while other users can only update jobs from their tenant.",
        "operationId": "updateJob",
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the job"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Job updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "summary": "Delete a job",
        "tags": [
          "Jobs"
        ],
        "description": "Deletes a job. System users can delete any job, while other users can only delete jobs from their tenant.",
        "operationId": "deleteJob",
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the job"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/platform-detector/detect": {
      "post": {
        "summary": "Detect platform of a website",
        "tags": [
          "Jobs"
        ],
        "description": "Detects the platform/CMS used by a website with streaming progress updates. Returns a server-sent events stream with detection progress and results.\n",
        "operationId": "detectPlatformJob",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostJobsPlatformDetectorDetectRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Platform detection stream",
            "content": {
              "text/event-stream": {
                "schema": {
                  "$ref": "#/components/schemas/PostJobsPlatformDetectorDetectResponse200"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": []
      }
    },
    "/jobs": {
      "get": {
        "summary": "List system-level jobs",
        "tags": [
          "Jobs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Returns a paginated list of system-level jobs.\n\n**Authentication:** Required\n**Authorization:** System role only\n\n## Access Control\n- **Required Role:** `system`\n- **Allowed Roles:** None (system only)\n\nThis endpoint is restricted to system administrators for monitoring\nand managing background jobs across all tenants.\n",
        "operationId": "listSystemJobs",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Pagination cursor"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of items to return per page"
          },
          {
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/JobStatus"
            },
            "description": "Filter by job status"
          },
          {
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/JobType"
            },
            "description": "Filter by job type"
          },
          {
            "in": "query",
            "name": "fromDate",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter jobs after this date (ISO format)"
          },
          {
            "in": "query",
            "name": "toDate",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter jobs before this date (ISO format)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of system jobs with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobListResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "summary": "Create a new system-level job",
        "tags": [
          "Jobs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Creates a new system-level job in the system. Only accessible to system users or internal services.",
        "operationId": "createSystemJob",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Job created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": []
      }
    },
    "/listen": {
      "get": {
        "summary": "Establish a Server-Sent Events connection",
        "tags": [
          "Listen"
        ],
        "description": "Establishes a Server-Sent Events connection with optional filters. Requires authentication and system user role.\nThe server sends events as lines prefixed with `data: ` followed by a JSON object and a blank line, per SSE spec.\n",
        "operationId": "listenEvents",
        "parameters": [
          {
            "name": "filters",
            "in": "query",
            "required": true,
            "description": "JSON-encoded filter object specifying which events to receive. Pass as a single query string value.\nExample: `{\"message.created\":[{\"tenantId\":\"t1\",\"agentId\":\"a1\",\"chatId\":\"c1\"}]}`\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SSE"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/monitoring/alerts": {
      "get": {
        "summary": "Get system alerts",
        "operationId": "getAlerts",
        "tags": [
          "Monitoring"
        ],
        "description": "Returns system alerts and alert statistics\n",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/GetMonitoringAlertsParam0Enum"
            },
            "description": "Filter alerts by status"
          },
          {
            "name": "severity",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PostMonitoringAlertsRequestBodySeverityEnum"
            },
            "description": "Filter alerts by severity"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            },
            "description": "Maximum number of alerts to return"
          }
        ],
        "responses": {
          "200": {
            "description": "Alerts retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMonitoringAlertsResponse200"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create custom alert rule",
        "operationId": "createAlertRule",
        "tags": [
          "Monitoring"
        ],
        "description": "Creates a new alert rule for monitoring\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostMonitoringAlertsRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Alert rule created successfully"
          },
          "400": {
            "description": "Invalid request body"
          }
        },
        "parameters": []
      }
    },
    "/monitoring/alerts/{alertId}": {
      "patch": {
        "summary": "Resolve an alert",
        "operationId": "resolveAlert",
        "tags": [
          "Monitoring"
        ],
        "parameters": [
          {
            "name": "alertId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchMonitoringAlertsAlertIdRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Alert updated successfully"
          },
          "404": {
            "description": "Alert not found"
          }
        }
      }
    },
    "/monitoring/dashboard": {
      "get": {
        "summary": "Get monitoring dashboard data",
        "operationId": "getMonitoringDashboard",
        "tags": [
          "Monitoring"
        ],
        "description": "Returns comprehensive monitoring data including metrics, alerts, and health status\nfor the system dashboard.\n",
        "parameters": [
          {
            "name": "timeRange",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/GetMonitoringDashboardParam0Enum"
            },
            "description": "Time range for metrics"
          },
          {
            "name": "includeMetrics",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "description": "Include detailed metrics data"
          },
          {
            "name": "includeAlerts",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "description": "Include alerts data"
          },
          {
            "name": "includeHealth",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "description": "Include health check data"
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboard data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMonitoringDashboardResponse200"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/monitoring/metrics": {
      "get": {
        "summary": "Get system metrics",
        "operationId": "getMetrics",
        "tags": [
          "Monitoring"
        ],
        "description": "Returns system metrics in Prometheus-compatible format or JSON\n",
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/GetMonitoringMetricsParam0Enum"
            },
            "description": "Output format"
          },
          {
            "name": "metrics",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of metric names to include"
          }
        ],
        "responses": {
          "200": {
            "description": "Metrics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostApiAuthLogoutRequestBody"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Record custom metric",
        "operationId": "recordMetric",
        "tags": [
          "Monitoring"
        ],
        "description": "Records a custom metric value\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostMonitoringMetricsRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Metric recorded successfully"
          },
          "400": {
            "description": "Invalid request body"
          }
        },
        "parameters": []
      }
    },
    "/monitoring/validation-cache": {
      "get": {
        "summary": "Get validation cache statistics",
        "operationId": "getValidationCacheStats",
        "tags": [
          "Monitoring"
        ],
        "description": "Returns comprehensive validation cache statistics and performance metrics\n",
        "parameters": [
          {
            "name": "cache",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PostMonitoringValidationCacheRequestBodyCacheEnum"
            },
            "description": "Which cache to get stats for"
          },
          {
            "name": "includeDetails",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Include detailed cache information"
          }
        ],
        "responses": {
          "200": {
            "description": "Cache statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMonitoringValidationCacheResponse200"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Perform cache operations",
        "operationId": "performCacheOperation",
        "tags": [
          "Monitoring"
        ],
        "description": "Performs cache operations like clearing, invalidation, etc.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostMonitoringValidationCacheRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Operation completed successfully"
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "parameters": []
      }
    },
    "/session/stats": {
      "get": {
        "summary": "Get session statistics",
        "operationId": "getSessionStats",
        "tags": [
          "Session"
        ],
        "description": "Returns comprehensive session statistics for monitoring\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter stats by tenant ID"
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter stats by user ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Session statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSessionStatsResponse200"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/tenants/{tenantId}/agents/{agentId}/chat-link": {
      "get": {
        "summary": "Get the chat link for an agent",
        "operationId": "getChatLink",
        "tags": [
          "Chats"
        ],
        "description": "Returns the public chat URL for the specified agent. System users can access any tenant's agent links, while other users can only access their own tenant's agent links.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          }
        ],
        "responses": {
          "200": {
            "description": "Chat link URL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatLinkResponse200"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/agents/{agentId}/chats/{chatId}/messages/{messageId}/debug": {
      "post": {
        "summary": "Add debug messages to a message",
        "operationId": "addDebugMessage",
        "tags": [
          "Messages"
        ],
        "description": "Adds debug messages to a specific message. Can only be accessed by internal system calls.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "in": "path",
            "name": "chatId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the chat"
          },
          {
            "in": "path",
            "name": "messageId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the message"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostTenantsTenantIdAgentsAgentIdChatsChatIdMessagesMessageIdDebugRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Debug messages added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostTenantsTenantIdAgentsAgentIdChatsChatIdMessagesMessageIdDebugResponse200"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "summary": "Get debug messages for a message",
        "operationId": "getDebugMessages",
        "tags": [
          "Messages"
        ],
        "description": "Retrieves all debug messages for a specific message. Can only be accessed by internal system calls.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "in": "path",
            "name": "chatId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the chat"
          },
          {
            "in": "path",
            "name": "messageId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the message"
          }
        ],
        "responses": {
          "200": {
            "description": "Debug messages retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsChatIdMessagesMessageIdDebugResponse200"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/agents/{agentId}/chats/{chatId}/messages/{messageId}/feedback": {
      "post": {
        "summary": "Add feedback to a message",
        "operationId": "addFeedback",
        "tags": [
          "Feedback"
        ],
        "description": "Adds feedback to a specific message. Can be accessed without authentication.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "in": "path",
            "name": "chatId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the chat"
          },
          {
            "in": "path",
            "name": "messageId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the message"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostTenantsTenantIdAgentsAgentIdChatsChatIdMessagesMessageIdFeedbackRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/schemas/FeedbackResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "summary": "Get feedback for a message",
        "operationId": "getFeedback",
        "tags": [
          "Feedback"
        ],
        "description": "Retrieves all feedback for a specific message. Can be accessed by users with tenant access.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "in": "path",
            "name": "chatId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the chat"
          },
          {
            "in": "path",
            "name": "messageId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the message"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/FeedbackResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/agents/{agentId}/chats/{chatId}/messages/{messageId}": {
      "get": {
        "summary": "Get a specific message",
        "operationId": "getMessage",
        "tags": [
          "Messages"
        ],
        "description": "Returns a specific message by ID. System users can access any tenant's message,\nwhile other users can only access their own tenant's messages. Supports including\nrelated data through the include query parameter.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "in": "path",
            "name": "chatId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the chat"
          },
          {
            "in": "path",
            "name": "messageId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the message"
          },
          {
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of relations to include (chat,agent,feedback)"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/MessageResponseItem"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/agents/{agentId}/chats/{chatId}/messages/batch": {
      "post": {
        "summary": "Add multiple messages to a chat in a single transaction",
        "operationId": "addMessages",
        "tags": [
          "Messages"
        ],
        "description": "Adds multiple new messages to an existing chat in a single transaction. Can be accessed only via internal API token.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "in": "path",
            "name": "chatId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the chat"
          },
          {
            "in": "header",
            "name": "x-mainio-internal-token",
            "schema": {
              "type": "string"
            },
            "description": "Internal API token for backend-to-backend communication"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostTenantsTenantIdAgentsAgentIdChatsChatIdMessagesBatchRequestBodyItem"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessageBatchResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/agents/{agentId}/chats/{chatId}/messages": {
      "post": {
        "summary": "Add a message to a chat",
        "operationId": "addMessage",
        "tags": [
          "Messages"
        ],
        "description": "Adds a new message to an existing chat. Can be accessed either by users with tenant access or via internal API token.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "in": "path",
            "name": "chatId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the chat"
          },
          {
            "in": "header",
            "name": "x-mainio-internal-token",
            "schema": {
              "type": "string"
            },
            "description": "Internal API token for backend-to-backend communication"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostTenantsTenantIdAgentsAgentIdChatsChatIdMessagesRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/schemas/MessageResponseItem"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "summary": "Get messages from a chat",
        "operationId": "getMessages",
        "tags": [
          "Messages"
        ],
        "description": "Retrieves messages from an existing chat with pagination support. Can be accessed either by users with tenant access or via internal API token.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "in": "path",
            "name": "chatId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the chat"
          },
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Cursor for pagination (message ID)"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            },
            "description": "Number of messages to return"
          },
          {
            "in": "query",
            "name": "roles",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of roles to filter by (user,assistant,system,function,etc)"
          },
          {
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsChatIdMessagesParam6Enum"
            },
            "description": "Field to sort by (must be indexed)"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsChatIdMessagesParam7Enum"
            },
            "description": "Sort order"
          },
          {
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of relations to include (chat,agent,feedback)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of messages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageResponseItem"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/agents/{agentId}/chats/{chatId}": {
      "get": {
        "summary": "Get a specific chat",
        "operationId": "getChat",
        "tags": [
          "Chats"
        ],
        "description": "Returns a specific chat by ID. System users can access any tenant's chat, while other users can only access their own tenant's chats. Supports including related data through the include query parameter.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "in": "path",
            "name": "chatId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the chat"
          },
          {
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of relations to include (messages,agent)"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ChatResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "summary": "Delete a chat",
        "operationId": "deleteChat",
        "tags": [
          "Chats"
        ],
        "description": "Deletes a chat and all its messages. System users can delete any tenant's chats, while other users can only delete their own tenant's chats.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "in": "path",
            "name": "chatId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the chat"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/agents/{agentId}/chats": {
      "get": {
        "summary": "Get chats for an agent",
        "operationId": "getChats",
        "tags": [
          "Chats"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of fields to return"
          },
          {
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of relations to include (messages, agent, messageCount, feedbackCount)"
          },
          {
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsParam4Enum"
            },
            "description": "Field to sort by"
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsChatIdMessagesParam7Enum"
            },
            "description": "Sort order (asc or desc)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of chats",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsResponse200"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "summary": "Create a new chat",
        "operationId": "createChat",
        "tags": [
          "Chats"
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatCreateOrUpdateSchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Chat created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chat"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/agents/{agentId}/chats/stream": {
      "get": {
        "summary": "Open a chat stream connection",
        "operationId": "getChatStream",
        "tags": [
          "Chats"
        ],
        "description": "Opens a Server-Sent Events (SSE) stream for real-time chat communication by proxying\nthe connection to the AI backend service. This endpoint acts as a pure bridge between\nthe client and AI backend, with no additional business logic.\n\n## Authentication\nRequires a valid session token passed as a query parameter. The token is validated\nby the AI backend service.\n\n## Rate Limiting\n- Limit: 10 requests per minute per IP/session\n- Window: 60 seconds\n- Headers: X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset\n\n## SSE Protocol (SSOT)\nThis endpoint proxies the AI backend SSE stream. Messages are emitted as:\n- `event: message` with JSON payload matching SSOT streaming contracts\n\nCore message types (discriminated by `type`):\n- `CONNECTION_READY` — `{ type, timestamp, messageId, correlationId?, data: { chatId } }`\n- `STREAM_DATA` — `{ type, timestamp, messageId, correlationId?, data: { content, role, isLast?, chatId, tokens? } }`\n- `MESSAGE_COMPLETED` — `{ type, timestamp, messageId, correlationId?, data: { tempId, finalId } }`\n- `ERROR` — `{ type, timestamp, messageId, correlationId?, data: { code, message, details? } }`\n\nThe stream ends with a `[DONE]` line after the final message.\n\n## Error Handling\nErrors are returned as SSE events with type 'ERROR' containing:\n- code: Error code (e.g., RATE_LIMIT, VALIDATION_ERROR, API_ERROR)\n- message: Human-readable error message\n- details: Additional error context\n- correlationId: Unique ID for tracking the request\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "name": "chatId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Existing chat ID to continue a conversation"
          },
          {
            "name": "sessionToken",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The session token for authentication"
          },
          {
            "name": "message",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "empty"
            },
            "description": "The user's message to send to the AI"
          },
          {
            "name": "current_url",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "The current page URL for context"
          },
          {
            "name": "customVariables",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "JSON-encoded custom variables for the AI context"
          }
        ],
        "responses": {
          "200": {
            "description": "Stream connection established",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "example": "event: message\ndata: {\"type\": \"CONNECTION_READY\", \"timestamp\": 1234567890, \"messageId\": \"conn_123\", \"data\": {\"chatId\": \"chat_123\"}}\n\nevent: message\ndata: {\"type\": \"STREAM_DATA\", \"timestamp\": 1234567891, \"messageId\": \"msg_123\", \"data\": {\"content\": \"Hello\", \"role\": \"assistant\", \"isLast\": false, \"chatId\": \"chat_123\"}}\n\nevent: message\ndata: {\"type\": \"MESSAGE_COMPLETED\", \"timestamp\": 1234567892, \"messageId\": \"final_123\", \"data\": {\"tempId\": \"temp_123\", \"finalId\": \"final_123\"}}\n"
                }
              }
            },
            "headers": {
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                },
                "description": "The rate limit maximum"
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                },
                "description": "Remaining requests in the current window"
              },
              "X-Correlation-ID": {
                "schema": {
                  "type": "string"
                },
                "description": "Unique correlation ID for request tracking"
              }
            }
          },
          "400": {
            "description": "Bad request - missing required parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsStreamResponse400"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsStreamResponse429"
                }
              }
            },
            "headers": {
              "Retry-After": {
                "schema": {
                  "type": "integer"
                },
                "description": "Seconds until rate limit resets"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsStreamResponse500"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/agents/{agentId}/datasources/{dataSourceId}": {
      "get": {
        "summary": "Get a specific agent data source",
        "operationId": "getAgentDataSource",
        "tags": [
          "Agent Datasources"
        ],
        "description": "Returns a specific data source associated with the agent. System users can access any\ntenant's agent data sources, while other users can only access their own tenant's agent\ndata sources.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent data source"
          },
          {
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of relations to include (dataSource,dataSource.vectorDatabase,dataSource.vectorIndex)"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AgentDatasourceResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "summary": "Update an agent data source",
        "operationId": "updateAgentDataSource",
        "tags": [
          "Agent Datasources"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent data source"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutTenantsTenantIdAgentsAgentIdDatasourcesDataSourceIdRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AgentDatasourceResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "summary": "Remove a data source from an agent",
        "operationId": "deleteAgentDataSource",
        "tags": [
          "Agent Datasources"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent data source"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/agents/{agentId}/datasources": {
      "get": {
        "summary": "Get all data sources for an agent",
        "operationId": "getAgentDataSources",
        "tags": [
          "Agent Datasources"
        ],
        "description": "Returns all data sources associated with the specified agent. System users can access any tenant's agent data sources, while other users can only access their own tenant's agent data sources.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "$ref": "#/components/parameters/dataSourceInclude"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/AgentDataSourceListResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "summary": "Add a data source to an agent",
        "operationId": "addAgentDataSource",
        "tags": [
          "Agent Datasources"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostTenantsTenantIdAgentsAgentIdDatasourcesRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/AgentDatasourceResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/agents/{agentId}/revisions/{revision}/restore": {
      "post": {
        "tags": [
          "Agents"
        ],
        "summary": "Restore agent to a specific revision",
        "operationId": "restoreAgentRevision",
        "description": "Restores an agent to a specific revision. System users can restore any tenant's agent, while other users can only restore their own tenant's agents. When restoring an agent: - The agent's state is reverted to the specified revision - The agent's revision number is set to the restored revision - Future revisions are preserved until changes are made - Making changes to a restored state creates a new branch Branching behavior: 1. When you restore to revision N 2. The agent is set to that state with revision = N 3. Future revisions (>N) remain in history 4. If you make changes after restoring: - A new revision N+1 is created - All revisions >N are deleted - A new branch of history starts from N+1\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "name": "revision",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "The revision number to restore to"
          }
        ],
        "responses": {
          "200": {
            "description": "Agent restored successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/AgentResponse"
                    },
                    {
                      "$ref": "#/components/schemas/PostTenantsTenantIdAgentsAgentIdRevisionsRevisionRestoreResponse200AllOf"
                    }
                  ],
                  "example": {
                    "id": "agent-123",
                    "name": "Customer Support Bot",
                    "description": "AI assistant for customer support",
                    "instructions": "Help customers with their inquiries",
                    "config": {
                      "theme": {
                        "primaryColor": "#123456"
                      },
                      "chatConfig": {
                        "welcomeMessage": "Hello! How can I help you today?"
                      }
                    },
                    "revision": 3,
                    "createdAt": "2024-02-20T12:00:00Z",
                    "updatedAt": "2024-02-20T14:30:00Z"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/agents/{agentId}/revisions": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "List agent revisions",
        "operationId": "listAgentRevisions",
        "description": "Returns a list of revisions for a specific agent. System users can access any tenant's agent revisions, while other users can only access their own tenant's agent revisions. Each revision represents a point in time when the agent was modified, including: - Full updates via PUT endpoint - Partial updates via PATCH endpoint - Restorations to previous versions The list is ordered by revision number in descending order (newest first).\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          }
        ],
        "responses": {
          "200": {
            "description": "List of agent revisions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentHistoryListResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/agents/{agentId}": {
      "get": {
        "tags": [
          "Agents"
        ],
        "operationId": "getAgent",
        "summary": "Get a specific agent",
        "security": [
          {
            "sessionAuth": []
          },
          {
            "internalApiAuth": []
          }
        ],
        "description": "Returns a specific agent by ID with role-based field filtering.\n\n## Authentication\nThis endpoint requires authentication via:\n- **Session-based auth**: Browser session cookie\n- **Token-based auth**: `x-mainio-internal-token` header (origin validation enforced)\n\n## Access Control\n- **System role**: Can access any tenant's agents with all fields\n- **Admin/User roles**: Can only access their own tenant's agents with restricted fields\n\n## Field Filtering by Role\n- **System users**: Full access including `instructions` and `config`\n- **Non-system users**: Limited to: `id`, `name`, `description`, `tenantId`, `createdAt`, `updatedAt`\n\n## Features\n- Field selection with role-based filtering\n- Include related data (tenant, functions, datasources, chats)\n- Sort related collections (e.g., chats by createdAt or title)\n- Relation counting with _count\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant",
            "example": "clh1234567890abcdef"
          },
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent",
            "example": "clh2345678901bcdefg"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of relations to include",
            "example": "tenant,functions,datasources"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of fields to return. Field access is filtered by user role.\n\nSystem users can access: `id`, `tenantId`, `name`, `description`, `instructions`, `config`, `createdAt`, `updatedAt`\n\nNon-system users limited to: `id`, `tenantId`, `name`, `description`, `createdAt`, `updatedAt`\n",
            "example": "id,name,description,instructions"
          },
          {
            "name": "chatsSortBy",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdParam4Enum"
            },
            "description": "Field to sort chats by (when chats are included)"
          },
          {
            "name": "chatsOrder",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsChatIdMessagesParam7Enum"
            },
            "description": "Sort order for chats"
          }
        ],
        "responses": {
          "200": {
            "description": "Agent retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponse"
                },
                "examples": {
                  "basic": {
                    "summary": "Basic agent data",
                    "value": {
                      "data": {
                        "id": "clh2345678901bcdefg",
                        "name": "Customer Support Agent",
                        "description": "Handles customer inquiries",
                        "tenantId": "clh1234567890abcdef",
                        "createdAt": "2024-01-15T10:30:00Z",
                        "updatedAt": "2024-01-15T10:30:00Z"
                      }
                    }
                  },
                  "withRelations": {
                    "summary": "Agent with relations",
                    "value": {
                      "data": {
                        "id": "clh2345678901bcdefg",
                        "name": "Customer Support Agent",
                        "description": "Handles customer inquiries",
                        "instructions": "You are a helpful assistant...",
                        "config": {
                          "theme": {
                            "primaryColor": "#0066CC"
                          }
                        },
                        "tenant": {
                          "id": "clh1234567890abcdef",
                          "name": "Acme Corp"
                        },
                        "_count": {
                          "functions": 3,
                          "datasources": 2,
                          "chats": 150
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                },
                "examples": {
                  "agentNotFound": {
                    "summary": "Agent not found",
                    "value": {
                      "error": {
                        "code": "NOT_FOUND",
                        "message": "Agent not found"
                      }
                    }
                  },
                  "tenantNotFound": {
                    "summary": "Tenant not found",
                    "value": {
                      "error": {
                        "code": "NOT_FOUND",
                        "message": "Tenant not found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "tags": [
          "Agents"
        ],
        "summary": "Update a specific agent and create a new revision",
        "operationId": "updateAgent",
        "security": [
          {
            "sessionAuth": []
          },
          {
            "internalApiAuth": []
          }
        ],
        "description": "Updates a specific agent by ID and creates a new revision.\n\n## Authentication\nThis endpoint requires authentication via:\n- **Session-based auth**: Browser session cookie\n- **Token-based auth**: `x-mainio-internal-token` header (origin validation enforced)\n\n## Access Control\n- **System role**: Can update agents in any tenant\n- **Admin role**: Can update agents in their own tenant\n- **User role**: Cannot update agents (403 Forbidden)\n\n## Revision System\nWhen updating an agent:\n- A new revision is automatically created\n- The revision number is incremented\n- The previous state is preserved in the revision history\n- If updating from a restored state, future revisions are cleaned up\n- Agent cache is flushed after update\n\n## Update Behavior\n- This is a full update (PUT) - all updateable fields should be provided\n- Fields not included will be set to their defaults\n- Use PATCH for partial updates\n- Some fields cannot be updated (id, tenantId, createdAt)\n",
        "x-permissions": [
          {
            "system": true
          },
          {
            "admin": false
          },
          {
            "user": false
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant",
            "example": "clh1234567890abcdef"
          },
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent",
            "example": "clh2345678901bcdefg"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentUpdateSchema"
              },
              "examples": {
                "fullUpdate": {
                  "summary": "Full agent update",
                  "value": {
                    "name": "Updated Support Agent",
                    "description": "Enhanced customer support assistant",
                    "instructions": "You are an expert support agent. Be helpful and professional.",
                    "config": {
                      "theme": {
                        "primaryColor": "#0066CC"
                      },
                      "features": {
                        "fileUpload": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Agent updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponse"
                },
                "example": {
                  "data": {
                    "id": "clh2345678901bcdefg",
                    "revision": 3,
                    "tenantId": "clh1234567890abcdef",
                    "name": "Updated Support Agent",
                    "description": "Enhanced customer support assistant",
                    "instructions": "You are an expert support agent. Be helpful and professional.",
                    "config": {
                      "theme": {
                        "primaryColor": "#0066CC"
                      }
                    },
                    "createdAt": "2024-01-15T10:30:00Z",
                    "updatedAt": "2024-01-16T14:45:00Z"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "tags": [
          "Agents"
        ],
        "summary": "Delete a specific agent",
        "operationId": "deleteAgent",
        "security": [
          {
            "sessionAuth": []
          },
          {
            "internalApiAuth": []
          }
        ],
        "description": "Permanently deletes a specific agent by ID.\n\n## Authentication\nThis endpoint requires authentication via:\n- **Session-based auth**: Browser session cookie\n- **Token-based auth**: `x-mainio-internal-token` header (origin validation enforced)\n\n## Access Control\n- **System role**: Can delete agents in any tenant\n- **Admin role**: Can delete agents in their own tenant\n- **User role**: Cannot delete agents (403 Forbidden)\n\n## Deletion Behavior\n- Deletion is permanent and cannot be undone\n- All associated data is cascade deleted:\n  - Agent revision history\n  - Agent-datasource mappings\n  - Agent-function mappings\n  - Chat history and messages\n- Agent cache is flushed after deletion\n\n## Important Notes\n- Consider backing up agent configuration before deletion\n- Active chat sessions will be terminated\n- Embedded chat widgets will stop functioning\n",
        "x-permissions": [
          {
            "system": true
          },
          {
            "admin": false
          },
          {
            "user": false
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant",
            "example": "clh1234567890abcdef"
          },
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent to delete",
            "example": "clh2345678901bcdefg"
          }
        ],
        "responses": {
          "204": {
            "description": "Agent deleted successfully"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                },
                "examples": {
                  "agentNotFound": {
                    "summary": "Agent not found",
                    "value": {
                      "error": {
                        "code": "NOT_FOUND",
                        "message": "Agent not found"
                      }
                    }
                  },
                  "tenantNotFound": {
                    "summary": "Tenant not found",
                    "value": {
                      "error": {
                        "code": "NOT_FOUND",
                        "message": "Tenant not found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "patch": {
        "tags": [
          "Agents"
        ],
        "summary": "Partially update a specific agent's JSON fields and create a new revision",
        "operationId": "patchAgentJson",
        "security": [
          {
            "sessionAuth": []
          },
          {
            "internalApiAuth": []
          }
        ],
        "description": "Performs targeted updates to JSON fields of an agent and creates a new revision.\n\n## Authentication\nThis endpoint requires authentication via:\n- **Session-based auth**: Browser session cookie\n- **Token-based auth**: `x-mainio-internal-token` header (origin validation enforced)\n\n## Access Control\n- **System role**: Can update agents in any tenant\n- **Admin role**: Can update agents in their own tenant\n- **User role**: Cannot update agents (403 Forbidden)\n\n## JSON Patch Operations\nSupports three operations on JSON fields:\n- **set**: Set a value at a specific path (creates path if needed)\n- **delete**: Remove a value at a specific path\n- **merge**: Merge an object into existing value at path\n\n## Supported Fields\n- **config**: Agent configuration (theme, features, behavior)\n- **instructions**: Can be updated as structured JSON\n\n## Revision System\n- Creates a new revision with each update\n- Preserves full history\n- Flushes agent cache after update\n\n## Path Syntax\nUse dot notation for nested paths:\n- `theme.primaryColor`\n- `features.chat.enabled`\n- `translations.en.welcomeMessage`\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant",
            "example": "clh1234567890abcdef"
          },
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent",
            "example": "clh2345678901bcdefg"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchTenantsTenantIdAgentsAgentIdRequestBody"
              },
              "examples": {
                "updateTheme": {
                  "summary": "Update theme colors",
                  "value": {
                    "field": "config",
                    "updates": [
                      {
                        "path": "theme.primaryColor",
                        "operation": {
                          "op": "set",
                          "value": "#0066CC"
                        }
                      },
                      {
                        "path": "theme.secondaryColor",
                        "operation": {
                          "op": "set",
                          "value": "#FF6B6B"
                        }
                      }
                    ]
                  }
                },
                "enableFeatures": {
                  "summary": "Enable multiple features",
                  "value": {
                    "field": "config",
                    "updates": [
                      {
                        "path": "features",
                        "operation": {
                          "op": "merge",
                          "value": {
                            "fileUpload": true,
                            "voiceInput": true,
                            "markdown": true
                          }
                        }
                      }
                    ]
                  }
                },
                "updateWelcomeMessage": {
                  "summary": "Update welcome message",
                  "value": {
                    "field": "config",
                    "updates": [
                      {
                        "path": "chatConfig.translations.en.welcomeMessage",
                        "operation": {
                          "op": "set",
                          "value": "Welcome! How can I help you today?"
                        }
                      }
                    ]
                  }
                },
                "removeTranslation": {
                  "summary": "Remove a translation",
                  "value": {
                    "field": "config",
                    "updates": [
                      {
                        "path": "chatConfig.translations.fi",
                        "operation": {
                          "op": "delete"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Agent updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponse"
                },
                "example": {
                  "data": {
                    "id": "clh2345678901bcdefg",
                    "revision": 4,
                    "tenantId": "clh1234567890abcdef",
                    "name": "Customer Support Agent",
                    "config": {
                      "theme": {
                        "primaryColor": "#0066CC",
                        "secondaryColor": "#FF6B6B"
                      },
                      "features": {
                        "fileUpload": true,
                        "voiceInput": true
                      }
                    },
                    "updatedAt": "2024-01-16T15:30:00Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                },
                "examples": {
                  "invalidOperation": {
                    "summary": "Invalid operation",
                    "value": {
                      "error": {
                        "code": "BAD_REQUEST",
                        "message": "Invalid operation: unknown"
                      }
                    }
                  },
                  "invalidPath": {
                    "summary": "Invalid path",
                    "value": {
                      "error": {
                        "code": "BAD_REQUEST",
                        "message": "Invalid path syntax"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/agents": {
      "get": {
        "summary": "Get all agents for a tenant",
        "tags": [
          "Agents"
        ],
        "security": [
          {
            "sessionAuth": []
          },
          {
            "internalApiAuth": []
          }
        ],
        "description": "Returns all agents for the specified tenant with role-based field filtering. ## Authentication This endpoint requires authentication via: - **Session-based auth**: Browser session cookie - **Token-based auth**: `x-mainio-internal-token` header with `x-mainio-origin` ## Access Control - **System role**: Can access any tenant's agents and see all fields - **Admin/User roles**: Can only access their own tenant's agents with restricted fields ## Field Filtering by Role - **System users**: Full access to all fields including `instructions` and `config` - **Non-system users**: Limited to: `id`, `name`, `description`, `tenantId`, `createdAt`, `updatedAt` ## Features - Field selection with role-based filtering - Relation includes (tenant, functions, dataSources, chats) - Sorting by name, createdAt, or updatedAt - Pagination with configurable page size (max 100) - Relation counting with _count parameter\n",
        "operationId": "listAgents",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant",
            "example": "clh1234567890abcdef"
          },
          {
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of relations to include",
            "example": "tenant,functions,dataSources"
          },
          {
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of fields to return. Field access is filtered by user role. System users can access: `id`, `tenantId`, `name`, `description`, `instructions`, `config`, `createdAt`, `updatedAt` Non-system users limited to: `id`, `tenantId`, `name`, `description`, `createdAt`, `updatedAt`\n",
            "example": "id,name,description"
          },
          {
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/GetTenantsTenantIdAgentsParam3Enum"
            },
            "description": "Field to sort by"
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsChatIdMessagesParam7Enum"
            },
            "description": "Sort order"
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Page number (0-based)",
            "example": 0
          },
          {
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "List of agents with role-based field filtering applied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentListResponse"
                },
                "examples": {
                  "paginated": {
                    "summary": "Paginated response",
                    "value": {
                      "data": [
                        {
                          "id": "clh1234567890abcdef",
                          "name": "Customer Support Agent",
                          "description": "AI assistant for customer inquiries",
                          "tenantId": "clh0987654321fedcba",
                          "createdAt": "2024-01-15T10:30:00Z",
                          "updatedAt": "2024-01-15T10:30:00Z"
                        }
                      ],
                      "meta": {
                        "total": 25,
                        "page": 0,
                        "pageSize": 20,
                        "totalPages": 2
                      }
                    }
                  },
                  "withRelations": {
                    "summary": "Response with included relations",
                    "value": {
                      "data": [
                        {
                          "id": "clh1234567890abcdef",
                          "name": "Customer Support Agent",
                          "description": "AI assistant for customer inquiries",
                          "tenant": {
                            "id": "clh0987654321fedcba",
                            "name": "Acme Corp"
                          },
                          "_count": {
                            "functions": 3,
                            "dataSources": 2,
                            "chats": 150
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "tags": [
          "Agents"
        ],
        "summary": "Create a new agent for a tenant",
        "security": [
          {
            "sessionAuth": []
          },
          {
            "internalApiAuth": []
          }
        ],
        "description": "Creates a new AI agent for the specified tenant. ## Authentication This endpoint requires authentication via: - **Session-based auth**: Browser session cookie - **Token-based auth**: `x-mainio-internal-token` header with `x-mainio-origin` ## Access Control - **System role**: Can create agents for any tenant - **Admin role**: Can create agents only in their own tenant - **User role**: Not authorized to create agents ## Agent Creation When creating an agent: - `name` is required and must be unique within the tenant - `description` is optional but recommended - `instructions` can be a string or structured object - `config` is optional and can contain UI/behavior settings - Initial revision is set to 0 ## Validation Input is validated using Zod schema with: - Name trimming and length validation (1-255 chars) - Instructions trimming and length validation (max 20000 chars) - Automatic tenant ID assignment\n",
        "operationId": "createAgent",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant",
            "example": "clh1234567890abcdef"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentCreateBodySchema"
              },
              "examples": {
                "basic": {
                  "summary": "Basic agent creation",
                  "value": {
                    "name": "Customer Support Agent",
                    "description": "AI assistant for handling customer inquiries",
                    "instructions": "You are a helpful customer support agent. Be polite and professional."
                  }
                },
                "advanced": {
                  "summary": "Agent with structured instructions",
                  "value": {
                    "name": "Sales Assistant",
                    "description": "AI assistant for sales team",
                    "instructions": {
                      "role": "Sales support specialist",
                      "guidelines": [
                        "Focus on understanding customer needs",
                        "Provide product recommendations"
                      ],
                      "tone": "Professional yet friendly"
                    },
                    "config": {
                      "theme": {
                        "primaryColor": "#0066CC"
                      },
                      "features": {
                        "fileUpload": true,
                        "voiceInput": false
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Agent created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponse"
                },
                "example": {
                  "data": {
                    "id": "clh2345678901bcdefg",
                    "revision": 0,
                    "tenantId": "clh1234567890abcdef",
                    "name": "Customer Support Agent",
                    "description": "AI assistant for handling customer inquiries",
                    "instructions": "You are a helpful customer support agent. Be polite and professional.",
                    "config": null,
                    "createdAt": "2024-01-15T10:30:00Z",
                    "updatedAt": "2024-01-15T10:30:00Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                },
                "example": {
                  "error": {
                    "code": "VALIDATION_ERROR",
                    "message": "Invalid agent data provided",
                    "details": {
                      "name": [
                        "Name is required"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Forbidden - insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                },
                "examples": {
                  "tenantAccess": {
                    "summary": "No access to tenant",
                    "value": {
                      "error": {
                        "code": "FORBIDDEN",
                        "message": "Access denied to this tenant"
                      }
                    }
                  },
                  "roleRestriction": {
                    "summary": "Insufficient role",
                    "value": {
                      "error": {
                        "code": "FORBIDDEN",
                        "message": "User role cannot create agents"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "409": {
            "description": "Conflict - agent name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                },
                "example": {
                  "error": {
                    "code": "CONFLICT",
                    "message": "An agent with this name already exists in the tenant"
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/analytics/chat-stats": {
      "get": {
        "summary": "Get chat statistics for a tenant",
        "operationId": "getTenantChatStats",
        "tags": [
          "Analytics"
        ],
        "description": "Retrieves chat statistics including total chats, messages per agent, and average messages per chat",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
              "example": "2024-01-01"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
              "example": "2024-12-31"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Chat statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTenantsTenantIdAnalyticsChatStatsResponse200"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/crawler/stream": {
      "get": {
        "summary": "Open a crawler events stream connection",
        "operationId": "getCrawlerStream",
        "tags": [
          "Crawler"
        ],
        "description": "Opens a Server-Sent Events (SSE) stream for real-time crawler status updates\nand progress monitoring. The stream provides live updates for web crawling jobs\nincluding page processing, content extraction, and error notifications.\n\n## Authentication\nRequires a valid session token passed as a query parameter.\n\n## Rate Limiting\n- Limit: 10 requests per minute per IP/session\n- Window: 60 seconds\n- Headers: X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset\n\n## SSE Protocol\nThe response is a Server-Sent Events stream with the following event types:\n- `CONNECTION_READY`: Stream connection established\n- `CRAWLER_EVENT`: Crawler status and progress updates\n- `ERROR`: Error events with structured error data\n\n## Event Types\nCrawler events include: crawler_started, crawler_stopped, page_completed,\ncontent_extracted, progress_update, crawler_failed, and more.\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "name": "jobId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Optional job ID to filter events for a specific crawl job"
          },
          {
            "name": "sessionToken",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The session token for authentication"
          }
        ],
        "responses": {
          "200": {
            "description": "Stream connection established",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "example": "event: CONNECTION_READY\ndata: {\"type\": \"CONNECTION_READY\", \"timestamp\": 1234567890}\n\nevent: CRAWLER_EVENT\ndata: {\"event_type\": \"page_completed\", \"url\": \"https://example.com\", \"crawl_data\": {...}}\n"
                }
              }
            },
            "headers": {
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                },
                "description": "The rate limit maximum"
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                },
                "description": "Remaining requests in the current window"
              },
              "X-Correlation-ID": {
                "schema": {
                  "type": "string"
                },
                "description": "Unique correlation ID for request tracking"
              }
            }
          },
          "400": {
            "description": "Bad request - missing required parameters"
          },
          "403": {
            "description": "Forbidden - access denied"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/tenants/{tenantId}/datasources/{dataSourceId}/documents/{documentId}/index": {
      "get": {
        "summary": "Index a document's content into the vector database.",
        "operationId": "indexDocument",
        "description": "Forwards the indexing request to the jobs service to index the combined document content and streams back Server-Sent Events (SSE) indicating the progress. Note: This endpoint is restricted to system-level access only.\n",
        "tags": [
          "Documents"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Tenant identifier."
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Data source identifier."
          },
          {
            "in": "path",
            "name": "documentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Document identifier."
          },
          {
            "in": "query",
            "name": "chunk_size",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Optional configuration for chunk size during indexing."
          },
          {
            "in": "query",
            "name": "chunk_overlap",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Optional configuration for chunk overlap during indexing."
          },
          {
            "in": "query",
            "name": "max_chunk_size",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Optional configuration for maximum chunk size during indexing."
          },
          {
            "in": "query",
            "name": "preserve_hierarchy",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "Optional configuration to preserve hierarchy during indexing."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully initiated indexing. The response is a stream of server-sent events (SSE) indicating the progress of the indexing job.",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "description": "A stream of Server-Sent Events. Each event's data structure is defined by the jobs service. Events may include progress updates, logs, or completion status.\n"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/datasources/{dataSourceId}/documents/{documentId}/reindex": {
      "post": {
        "summary": "Trigger re-indexing for a single document",
        "operationId": "reindexDocument",
        "tags": [
          "Documents"
        ],
        "description": "Triggers re-indexing for a specific document in the message queue.\nRequires system role permissions.\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataSourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostApiTenantsTenantIdDatasourcesDataSourceIdDocumentsDocumentIdReindexRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Re-indexing request queued successfully"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions (system role required)"
          },
          "404": {
            "description": "Document not found"
          }
        }
      }
    },
    "/tenants/{tenantId}/datasources/{dataSourceId}/documents/{documentId}": {
      "put": {
        "summary": "Update a document",
        "operationId": "updateDocument",
        "tags": [
          "Documents"
        ],
        "description": "Updates a document for the datasource. System users can update any tenant's documents, while other users can only update their own tenant's documents.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the datasource"
          },
          {
            "in": "path",
            "name": "documentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the document"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutTenantsTenantIdDatasourcesDataSourceIdDocumentsDocumentIdRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/DocumentResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "summary": "Delete a document",
        "operationId": "deleteDocument",
        "tags": [
          "Documents"
        ],
        "description": "Deletes an existing document. Only available to tenant admins and system users.",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the datasource"
          },
          {
            "in": "path",
            "name": "documentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the document"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "summary": "Get a specific document",
        "operationId": "getDocument",
        "tags": [
          "Documents"
        ],
        "description": "Returns a specific document by ID. System users can access any tenant's document, while other users can only access their own tenant's documents. Supports including related data through the \"include\" query parameter. If the \"download\" query parameter is provided, the response returns the document content as a downloadable file (using the document's \"html\" field if available, or falling back to \"markdown\") instead of the JSON object.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the data source"
          },
          {
            "in": "path",
            "name": "documentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the document"
          },
          {
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of relations to include (e.g., dataSource, tenant, chunks)"
          },
          {
            "in": "query",
            "name": "download",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "If true, returns the document content as a downloadable file (using the \"html\" or \"markdown\" field) instead of a JSON response."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/DocumentResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/datasources/{dataSourceId}/documents/{documentId}/split": {
      "post": {
        "summary": "Split a document's markdown content into chunks",
        "operationId": "splitDocument",
        "tags": [
          "Documents"
        ],
        "description": "Splits document markdown content into chunks using the jobs service.\nRequires system role permissions.\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Tenant identifier"
          },
          {
            "name": "dataSourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Data source identifier"
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Document identifier"
          }
        ],
        "requestBody": {
          "description": "Markdown content with optional splitting configuration",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostApiTenantsTenantIdDatasourcesDataSourceIdDocumentsDocumentIdSplitRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Document successfully split into chunks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostApiTenantsTenantIdDatasourcesDataSourceIdDocumentsDocumentIdSplitResponse200"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions (system role required)"
          },
          "404": {
            "description": "Document not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/tenants/{tenantId}/datasources/{dataSourceId}/documents/bulk-update-metadata": {
      "post": {
        "summary": "Bulk update document metadata using AI",
        "operationId": "bulkUpdateDocumentMetadata",
        "tags": [
          "Documents"
        ],
        "description": "Processes all documents in a data source and generates AI-powered\nnames and descriptions based on document content.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the data source"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostTenantsTenantIdDatasourcesDataSourceIdDocumentsBulkUpdateMetadataRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully processed documents",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostTenantsTenantIdDatasourcesDataSourceIdDocumentsBulkUpdateMetadataResponse200"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/datasources/{dataSourceId}/documents/count": {
      "get": {
        "summary": "Get document count",
        "operationId": "getDocumentCount",
        "tags": [
          "Documents"
        ],
        "description": "Returns the total count of documents in the datasource or with a specific status.",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataSourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The total count of documents in the datasource or with a specific status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTenantsTenantIdDatasourcesDataSourceIdDocumentsCountResponse200"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/datasources/{dataSourceId}/documents/index/batch": {
      "post": {
        "summary": "Enqueue batch document indexing",
        "operationId": "enqueueBatchIndexing",
        "tags": [
          "Documents"
        ],
        "security": [
          {
            "sessionAuth": []
          },
          {
            "internalApiAuth": []
          }
        ],
        "description": "Enqueues all documents from a data source for indexing via the indexer service.\nDocuments are processed asynchronously and their status can be tracked via:\n- The `/api/listen` endpoint with document event subscriptions\n- The `/documents/stats` endpoint for aggregate statistics\n\n## Authentication\nThis endpoint requires authentication via:\n- **Session-based auth**: Browser session cookie\n- **Token-based auth**: `x-mainio-internal-token` header with `x-mainio-origin`\n\n## Access Control\n- **System role only**: This is a system administration endpoint\n- Other roles will receive a 403 Forbidden response\n\n## Event-Driven Processing\nOnce documents are enqueued, the indexer service will:\n1. Process documents asynchronously from the queue\n2. Publish `document.updated` events as documents are indexed\n3. Update document status in the database (waiting → processing → indexed/error)\n\n## Tracking Progress\nTo monitor indexing progress, use one of these approaches:\n\n### Real-time Events (Recommended)\nSubscribe to document events via `/api/listen`:\n```typescript\nconst filters = {\n  'document.updated': [{\n    type: 'datasource',\n    tenantId: 'tenant_123',\n    dataSourceId: 'ds_456'\n  }]\n};\n```\n\n### Polling Statistics\nPoll `/documents/stats` endpoint for aggregate counts:\n- `indexed`: Successfully indexed documents\n- `processing`: Currently being indexed\n- `waiting`: Queued for indexing\n- `error`: Failed to index\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of the tenant",
            "example": "clh1234567890abcdef"
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of the data source",
            "example": "clh2345678901bcdefg"
          },
          {
            "in": "query",
            "name": "forceOverride",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Whether to force re-indexing of already indexed documents.\n- `false`: Skip documents that are already indexed\n- `true`: Re-index all documents regardless of current status\n",
            "example": false
          },
          {
            "in": "query",
            "name": "chunk_size",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 100,
              "maximum": 5000
            },
            "description": "Override chunk size for document processing"
          },
          {
            "in": "query",
            "name": "chunk_overlap",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 1000
            },
            "description": "Override chunk overlap for document processing"
          },
          {
            "in": "query",
            "name": "max_chunk_size",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 500,
              "maximum": 10000
            },
            "description": "Override maximum chunk size"
          },
          {
            "in": "query",
            "name": "preserve_hierarchy",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "Preserve document structure hierarchy"
          }
        ],
        "responses": {
          "200": {
            "description": "Documents successfully enqueued for indexing",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostTenantsTenantIdDatasourcesDataSourceIdDocumentsIndexBatchResponse200"
                },
                "example": {
                  "status": "queued",
                  "tenant_id": "clh1234567890abcdef",
                  "datasource_id": "clh2345678901bcdefg",
                  "queued_count": 50,
                  "total_documents": 50,
                  "message": "Enqueued 50 documents for indexing"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing required parameters or no documents found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                },
                "examples": {
                  "noDocuments": {
                    "summary": "No documents to index",
                    "value": {
                      "error": {
                        "code": "BAD_REQUEST",
                        "message": "No documents found for indexing"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Forbidden - system role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                },
                "example": {
                  "error": {
                    "code": "FORBIDDEN",
                    "message": "Access denied - system role required"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Data source not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                },
                "example": {
                  "error": {
                    "code": "NOT_FOUND",
                    "message": "Data source not found"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalError"
                },
                "examples": {
                  "indexerError": {
                    "summary": "Indexer service error",
                    "value": {
                      "error": {
                        "code": "INTERNAL_ERROR",
                        "message": "Failed to enqueue documents for indexing"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/datasources/{dataSourceId}/documents/log": {
      "post": {
        "summary": "Log an event for a data source",
        "operationId": "logDocumentEvent",
        "tags": [
          "Documents"
        ],
        "description": "Creates a new event log entry for the data source. System users can log events for any tenant's data source, while other users can only log events for their own tenant's data sources.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the data source"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostTenantsTenantIdDatasourcesDataSourceIdDocumentsLogRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Event logged successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostTenantsTenantIdDatasourcesDataSourceIdDocumentsLogResponse200"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/datasources/{dataSourceId}/documents": {
      "get": {
        "summary": "List documents for a datasource",
        "operationId": "listDocuments",
        "description": "Returns a paginated list of documents for the specified datasource",
        "tags": [
          "Documents"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/tenant_id"
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the datasource"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/DocumentStatusEnum"
            },
            "required": false,
            "description": "Filter documents by status"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "$ref": "#/components/schemas/GetTenantsTenantIdDatasourcesDataSourceIdDocumentsParam5Enum"
            },
            "description": "Field to sort by"
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsChatIdMessagesParam7Enum"
            },
            "description": "Sort order"
          },
          {
            "in": "query",
            "name": "startsWith",
            "schema": {
              "type": "string"
            },
            "description": "Filter documents where URL starts with this value"
          },
          {
            "in": "query",
            "name": "contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter documents where URL contains this value"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of fields to include in the response"
          },
          {
            "$ref": "#/components/parameters/dataSourceInclude"
          }
        ],
        "responses": {
          "200": {
            "description": "List of documents",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "summary": "Create a new document for a datasource",
        "tags": [
          "Documents"
        ],
        "description": "Creates a new document for the specified datasource. System users can create documents for any tenant.",
        "operationId": "createDocument",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenant_id"
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Data source identifier."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PostTenantsTenantIdDatasourcesDataSourceIdDocumentsRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Document created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/datasources/{dataSourceId}/documents/sync": {
      "post": {
        "summary": "Sync a document from scraper",
        "operationId": "syncDocument",
        "description": "Creates or updates a document based on URL matching. Detects significant content changes to avoid unnecessary re-indexing.",
        "tags": [
          "Documents"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/tenant_id"
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the datasource"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostTenantsTenantIdDatasourcesDataSourceIdDocumentsSyncRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Document synced successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostTenantsTenantIdDatasourcesDataSourceIdDocumentsSyncResponse200"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/datasources/{dataSourceId}/events": {
      "get": {
        "summary": "Get events for a data source",
        "operationId": "getDataSourceEvents",
        "tags": [
          "Datasources"
        ],
        "description": "Returns paginated events for the specified data source. System users can access any tenant's events, while other users can only access their own tenant's events. Supports pagination and sorting by creation date.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the data source"
          },
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Cursor for pagination (event ID)"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "number"
            },
            "description": "Number of events to return (default: 10, max: 50)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of events with pagination info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTenantsTenantIdDatasourcesDataSourceIdEventsResponse200"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/datasources/{dataSourceId}/flush": {
      "post": {
        "summary": "Flush local cached content for a datasource",
        "operationId": "flushDatasource",
        "tags": [
          "Datasources"
        ],
        "description": "Flushes all locally cached content for a datasource in the scraper service, forcing a full re-download on the next crawl.\nThis operation deletes all downloaded pages, document manifests, and cache metadata. System users can flush any\ntenant's datasources, while other users can only flush their own tenant's datasources.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the datasource"
          }
        ],
        "responses": {
          "200": {
            "description": "Datasource cache flushed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostTenantsTenantIdDatasourcesDataSourceIdFlushResponse200"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/datasources/{dataSourceId}": {
      "get": {
        "summary": "Get a datasource",
        "operationId": "getDatasource",
        "tags": [
          "Datasources"
        ],
        "description": "Retrieves a specific datasource for the tenant. System users can get any tenant's datasources, while other users can only get their own tenant's datasources. Supports including related data through the include query parameter.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the datasource"
          },
          {
            "$ref": "#/components/parameters/dataSourceInclude"
          }
        ],
        "responses": {
          "200": {
            "description": "Datasource retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "summary": "Update a datasource",
        "operationId": "updateDatasource",
        "tags": [
          "Datasources"
        ],
        "description": "Updates a datasource for the tenant. System users can update any tenant's datasources, while other users can only update their own tenant's datasources.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the datasource"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSourceUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Datasource updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/agents/{agentId}/datasources/{dataSourceId}/search": {
      "post": {
        "summary": "Search a datasource and return elaborated phrase and results",
        "operationId": "elaborateSearchPhrase",
        "description": "Forwards search queries from the client to the main AI backend service.",
        "tags": [
          "Search"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Tenant identifier."
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Agent identifier."
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Data source identifier."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostTenantsTenantIdAgentsAgentIdDatasourcesDataSourceIdSearchRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response containing search results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostTenantsTenantIdAgentsAgentIdDatasourcesDataSourceIdSearchResponse200"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/datasources/{dataSourceId}/test/clean-document": {
      "post": {
        "summary": "Clean and validate document content (Test Endpoint)",
        "operationId": "cleanDocument",
        "tags": [
          "Documents",
          "Testing"
        ],
        "description": "Test endpoint for document cleaning functionality.\nProxies cleaning request to jobs service for testing and debugging.\nAccessible by system role or tenant members.\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Tenant identifier"
          },
          {
            "name": "dataSourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Data source identifier"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostApiTenantsTenantIdDatasourcesDataSourceIdTestCleanDocumentRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cleaned document result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostApiTenantsTenantIdDatasourcesDataSourceIdTestCleanDocumentResponse200"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/tenants/{tenantId}/datasources": {
      "get": {
        "summary": "List all data sources for a tenant with filtering and relations",
        "operationId": "listDatasources",
        "tags": [
          "Datasources"
        ],
        "security": [
          {
            "sessionAuth": []
          },
          {
            "internalApiAuth": []
          }
        ],
        "description": "Returns all data sources for the specified tenant with optional related data.\n\n## Authentication\nThis endpoint requires authentication via:\n- **Session-based auth**: Browser session cookie\n- **Token-based auth**: `x-mainio-internal-token` header (origin validation enforced)\n\n## Access Control\n- **System role**: Can access data sources in any tenant\n- **Admin/User roles**: Can only access data sources in their own tenant\n\n## Data Source Types\n- **Website**: Web scraping data sources\n- **Document**: File upload data sources (PDF, DOCX, etc.)\n- **API**: External API integrations\n- **Database**: Database connections\n- **Custom**: Custom data source implementations\n\n## Relations Available\n- **vectorDatabase**: Vector database configuration\n- **vectorIndex**: Vector index for semantic search\n- **embedModel**: Embedding model configuration\n- **tenant**: Tenant information\n- **documents**: Associated documents\n- **agents**: Agents using this data source\n- **events**: Processing and indexing events\n\n## Field Filtering\nUse `fields` parameter to reduce response size:\n- Core fields: `id`, `tenantId`, `name`, `type`, `description`\n- Config fields: `config`, `createdAt`, `updatedAt`\n- Relation counts: `_count.documents`, `_count.agents`\n\n## Sorting Related Collections\n- Documents can be sorted by `createdAt` or `name`\n- Events can be sorted by `createdAt` or `type`\n- Default sort is `createdAt` descending\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant",
            "example": "clh1234567890abcdef"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of relations to include",
            "example": "vectorDatabase,documents,agents"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of fields to return",
            "example": "id,name,type,description,_count.documents"
          },
          {
            "name": "documentsSortBy",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/GetTenantsTenantIdDatasourcesParam3Enum"
            },
            "description": "Field to sort documents by (when documents are included)"
          },
          {
            "name": "documentsOrder",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsChatIdMessagesParam7Enum"
            },
            "description": "Sort order for documents"
          },
          {
            "name": "eventsSortBy",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/GetTenantsTenantIdDatasourcesParam5Enum"
            },
            "description": "Field to sort events by (when events are included)"
          },
          {
            "name": "eventsOrder",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsChatIdMessagesParam7Enum"
            },
            "description": "Sort order for events"
          }
        ],
        "responses": {
          "200": {
            "description": "Data sources retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceListResponse"
                },
                "examples": {
                  "basic": {
                    "summary": "Basic data source list",
                    "value": {
                      "success": true,
                      "data": [
                        {
                          "id": "clh3456789012cdefgh",
                          "tenantId": "clh1234567890abcdef",
                          "name": "Company Website",
                          "type": "website",
                          "description": "Main company website content",
                          "config": {
                            "url": "https://company.com",
                            "crawlDepth": 3
                          },
                          "createdAt": "2024-01-15T10:30:00Z",
                          "updatedAt": "2024-01-16T14:20:00Z"
                        }
                      ]
                    }
                  },
                  "withRelations": {
                    "summary": "Data sources with relations",
                    "value": {
                      "success": true,
                      "data": [
                        {
                          "id": "clh3456789012cdefgh",
                          "name": "Company Website",
                          "type": "website",
                          "vectorDatabase": {
                            "id": "clh4567890123defghi",
                            "name": "Main Vector DB",
                            "type": "qdrant"
                          },
                          "documents": [
                            {
                              "id": "clh5678901234efghij",
                              "name": "Homepage Content"
                            },
                            {
                              "id": "clh6789012345fghijk",
                              "name": "About Page"
                            }
                          ],
                          "_count": {
                            "documents": 25,
                            "agents": 3,
                            "events": 12
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Access denied to tenant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                },
                "example": {
                  "error": {
                    "code": "FORBIDDEN",
                    "message": "Access denied to this tenant"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                },
                "example": {
                  "error": {
                    "code": "NOT_FOUND",
                    "message": "Tenant not found"
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "summary": "Create a new data source for a tenant",
        "operationId": "createDatasource",
        "tags": [
          "Datasources"
        ],
        "security": [
          {
            "sessionAuth": []
          },
          {
            "internalApiAuth": []
          }
        ],
        "description": "Creates a new data source for the specified tenant with automatic event tracking.\n\n## Authentication\nThis endpoint requires authentication via:\n- **Session-based auth**: Browser session cookie\n- **Token-based auth**: `x-mainio-internal-token` header (origin validation enforced)\n\n## Access Control\n- **System role**: Can create data sources in any tenant\n- **Admin/User roles**: Can create data sources only in their own tenant\n\n## Data Source Types\n- **website**: Web scraping (requires URL and crawl config)\n- **document**: File uploads (requires file handling config)\n- **api**: External API integration (requires API config)\n- **database**: Database connection (requires connection config)\n- **custom**: Custom implementation (requires custom config)\n\n## Configuration Requirements\nEach data source type requires specific configuration:\n- **Website**: `url`, `crawlDepth`, `allowedDomains`, `excludePaths`\n- **Document**: `allowedTypes`, `maxFileSize`, `processingOptions`\n- **API**: `endpoint`, `authentication`, `refreshSchedule`\n- **Database**: `connectionString`, `tables`, `syncSchedule`\n\n## Automatic Features\n- Creates initial \"created\" event for tracking\n- Broadcasts event to connected clients\n- Validates configuration against type requirements\n- Sets up vector database integration if specified\n\n## Event System\nAfter creation, the data source will generate events for:\n- Processing status updates\n- Document indexing progress\n- Error notifications\n- Configuration changes\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant where data source will be created",
            "example": "clh1234567890abcdef"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSourceCreateBodySchema"
              },
              "examples": {
                "website": {
                  "summary": "Website data source",
                  "value": {
                    "name": "Company Website",
                    "type": "website",
                    "description": "Main company website content for customer support",
                    "config": {
                      "url": "https://company.com",
                      "crawlDepth": 3,
                      "allowedDomains": [
                        "company.com",
                        "support.company.com"
                      ],
                      "excludePaths": [
                        "/admin",
                        "/private"
                      ],
                      "respectRobotsTxt": true
                    },
                    "vectorDatabaseId": "clh4567890123defghi",
                    "embedModelId": "clh5678901234efghij"
                  }
                },
                "document": {
                  "summary": "Document upload data source",
                  "value": {
                    "name": "Product Documentation",
                    "type": "document",
                    "description": "PDF manuals and guides",
                    "config": {
                      "allowedTypes": [
                        "pdf",
                        "docx",
                        "txt"
                      ],
                      "maxFileSize": 10485760,
                      "extractImages": false,
                      "preserveFormatting": true
                    },
                    "vectorDatabaseId": "clh4567890123defghi"
                  }
                },
                "api": {
                  "summary": "API integration data source",
                  "value": {
                    "name": "Knowledge Base API",
                    "type": "api",
                    "description": "External knowledge base integration",
                    "config": {
                      "endpoint": "https://kb-api.example.com/v1/articles",
                      "method": "GET",
                      "headers": {
                        "Authorization": "Bearer ${API_TOKEN}"
                      },
                      "refreshSchedule": "0 2 * * *"
                    },
                    "vectorDatabaseId": "clh4567890123defghi"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Data source created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceResponse"
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "clh7890123456ghijkl",
                    "tenantId": "clh1234567890abcdef",
                    "name": "Company Website",
                    "type": "website",
                    "description": "Main company website content for customer support",
                    "config": {
                      "url": "https://company.com",
                      "crawlDepth": 3,
                      "allowedDomains": [
                        "company.com"
                      ]
                    },
                    "status": "pending",
                    "createdAt": "2024-01-17T11:30:00Z",
                    "updatedAt": "2024-01-17T11:30:00Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                },
                "examples": {
                  "missingFields": {
                    "summary": "Missing required fields",
                    "value": {
                      "error": {
                        "code": "VALIDATION_ERROR",
                        "message": "Invalid datasource data provided",
                        "details": {
                          "name": [
                            "Name is required"
                          ],
                          "type": [
                            "Type is required"
                          ]
                        }
                      }
                    }
                  },
                  "invalidConfig": {
                    "summary": "Invalid configuration for type",
                    "value": {
                      "error": {
                        "code": "VALIDATION_ERROR",
                        "message": "Invalid datasource data provided",
                        "details": {
                          "config": [
                            "URL is required for website type"
                          ]
                        }
                      }
                    }
                  },
                  "invalidType": {
                    "summary": "Invalid data source type",
                    "value": {
                      "error": {
                        "code": "VALIDATION_ERROR",
                        "message": "Invalid datasource data provided",
                        "details": {
                          "type": [
                            "Type must be one of: website, document, api, database, custom"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Access denied to tenant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                },
                "example": {
                  "error": {
                    "code": "FORBIDDEN",
                    "message": "Access denied to this tenant"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                },
                "example": {
                  "error": {
                    "code": "NOT_FOUND",
                    "message": "Tenant not found"
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/feedback": {
      "get": {
        "summary": "Get all feedback for a tenant",
        "operationId": "getTenantFeedback",
        "tags": [
          "Feedback"
        ],
        "description": "Retrieves paginated feedback data for a tenant with optional filtering",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Start date for filtering (YYYY-MM-DD)"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "End date for filtering (YYYY-MM-DD)"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of items per page"
          },
          {
            "name": "agentId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by agent ID"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FeedbackListResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/jobs/{jobId}/executions": {
      "get": {
        "summary": "Get job executions",
        "operationId": "listJobExecutions",
        "tags": [
          "Jobs"
        ],
        "description": "Returns all execution attempts for a specific job. System users can access any tenant's job executions, while other users can only access their own tenant's job executions.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the job"
          },
          {
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of fields to return. Available fields:\nid, jobId, attemptNumber, status, startedAt, completedAt, duration, error, logs, createdAt, updatedAt\n",
            "example": "id,attemptNumber,status,startedAt"
          },
          {
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Field to sort by (attemptNumber, status, startedAt, completedAt, createdAt)"
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsChatIdMessagesParam7Enum"
            },
            "description": "Sort order (asc or desc)"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/JobExecutionListResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "summary": "Record a job execution attempt",
        "operationId": "createJobExecution",
        "tags": [
          "Jobs"
        ],
        "description": "Records a new execution attempt for a job. Only accessible via internal API token.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the job"
          },
          {
            "in": "header",
            "name": "x-mainio-internal-token",
            "schema": {
              "type": "string"
            },
            "description": "Internal API token for backend-to-backend communication"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobExecutionCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/schemas/JobExecutionResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/jobs/{jobId}": {
      "get": {
        "summary": "Get a specific job",
        "operationId": "getTenantJob",
        "tags": [
          "Jobs"
        ],
        "description": "Returns a specific job for the tenant. System users can access any tenant's jobs, while other users can only access their own tenant's jobs. Supports including related data through the include query parameter. Supports selecting specific fields through the fields query parameter.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the job"
          },
          {
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of relations to include (executions,tenant)"
          },
          {
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of fields to return. Available fields:\nid, tenantId, name, type, description, queue, priority, config, scheduled, cronString, maxAttempts, timeout, createdAt, updatedAt\n",
            "example": "id,name,type,priority"
          },
          {
            "in": "query",
            "name": "executionsSortBy",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Field to sort executions by (createdAt, status)"
          },
          {
            "in": "query",
            "name": "executionsOrder",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsChatIdMessagesParam7Enum"
            },
            "description": "Sort order for executions (asc or desc)"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/Job"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "summary": "Update a job",
        "tags": [
          "Jobs"
        ],
        "description": "Updates a job for the tenant. System users can update any tenant's jobs, while other users can only update their own tenant's jobs. Internal requests are also allowed with proper authentication.\n",
        "operationId": "updateTenantJob",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the job"
          },
          {
            "in": "header",
            "name": "x-mainio-internal-token",
            "schema": {
              "type": "string"
            },
            "description": "Internal API token for backend-to-backend communication"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/JobResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "summary": "Delete a job",
        "tags": [
          "Jobs"
        ],
        "description": "Deletes a job for the tenant. System users can delete any tenant's jobs, while other users can only delete their own tenant's jobs.\n",
        "operationId": "deleteTenantJob",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the job"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/jobs": {
      "get": {
        "summary": "List all jobs for a tenant with filtering and execution history",
        "operationId": "listTenantJobs",
        "tags": [
          "Jobs"
        ],
        "security": [
          {
            "sessionAuth": []
          },
          {
            "internalApiAuth": []
          }
        ],
        "description": "Returns all jobs for the specified tenant with optional execution history and filtering.\n\n## Authentication\nThis endpoint requires authentication via:\n- **Session-based auth**: Browser session cookie\n- **Token-based auth**: `x-mainio-internal-token` header (origin validation enforced)\n\n## Access Control\n- **System role**: Can access jobs in any tenant\n- **Admin/User roles**: Can only access jobs in their own tenant\n\n## Job Types\n- **data_source_crawl**: Web crawling jobs\n- **document_processing**: Document indexing jobs\n- **vector_index_update**: Vector database updates\n- **data_sync**: External data synchronization\n- **cleanup**: Maintenance and cleanup tasks\n- **analytics**: Analytics processing\n- **custom**: Custom job implementations\n\n## Job States\n- **queued**: Waiting to be executed\n- **running**: Currently executing\n- **completed**: Successfully completed\n- **failed**: Failed with error\n- **cancelled**: Manually cancelled\n- **scheduled**: Scheduled for future execution\n\n## Relations Available\n- **executions**: Job execution history with status and timing\n- **tenant**: Tenant information\n\n## Field Selection\nUse `fields` parameter to reduce response size:\n- Core fields: `id`, `tenantId`, `name`, `type`, `status`, `priority`\n- Config fields: `description`, `config`, `queue`, `maxAttempts`, `timeout`\n- Scheduling fields: `scheduled`, `cronString`\n- Timestamps: `createdAt`, `updatedAt`\n\n## Sorting\n- Jobs can be sorted by `createdAt`, `name`, `type`, `priority`\n- Executions can be sorted by `createdAt`, `status`\n- Default sort is `createdAt` descending\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant",
            "example": "clh1234567890abcdef"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of relations to include",
            "example": "executions,tenant"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of fields to return",
            "example": "id,name,type,status,priority,_count.executions"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/GetTenantsTenantIdJobsParam3Enum"
            },
            "description": "Field to sort jobs by"
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsChatIdMessagesParam7Enum"
            },
            "description": "Sort order for jobs"
          },
          {
            "name": "executionsSortBy",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/GetTenantsTenantIdJobsParam5Enum"
            },
            "description": "Field to sort executions by (when executions are included)"
          },
          {
            "name": "executionsOrder",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsChatIdMessagesParam7Enum"
            },
            "description": "Sort order for executions"
          }
        ],
        "responses": {
          "200": {
            "description": "Jobs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobListResponse"
                },
                "examples": {
                  "basic": {
                    "summary": "Basic job list",
                    "value": {
                      "success": true,
                      "data": [
                        {
                          "id": "clh8901234567hijklm",
                          "tenantId": "clh1234567890abcdef",
                          "name": "Website Crawl",
                          "type": "data_source_crawl",
                          "status": "completed",
                          "priority": "medium",
                          "queue": "default",
                          "description": "Crawl company website for content",
                          "maxAttempts": 3,
                          "timeout": 300000,
                          "createdAt": "2024-01-17T10:00:00Z",
                          "updatedAt": "2024-01-17T10:15:00Z"
                        }
                      ]
                    }
                  },
                  "withExecutions": {
                    "summary": "Jobs with execution history",
                    "value": {
                      "success": true,
                      "data": [
                        {
                          "id": "clh8901234567hijklm",
                          "name": "Document Processing",
                          "type": "document_processing",
                          "status": "completed",
                          "executions": [
                            {
                              "id": "clh9012345678ijklmn",
                              "status": "completed",
                              "startedAt": "2024-01-17T10:00:00Z",
                              "completedAt": "2024-01-17T10:05:00Z"
                            },
                            {
                              "id": "clh0123456789jklmno",
                              "status": "failed",
                              "startedAt": "2024-01-17T09:30:00Z",
                              "completedAt": "2024-01-17T09:32:00Z"
                            }
                          ],
                          "_count": {
                            "executions": 2
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Access denied to tenant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                },
                "example": {
                  "error": {
                    "code": "FORBIDDEN",
                    "message": "Access denied to this tenant"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                },
                "example": {
                  "error": {
                    "code": "NOT_FOUND",
                    "message": "Tenant not found"
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "summary": "Create a new background job for a tenant",
        "operationId": "createTenantJob",
        "tags": [
          "Jobs"
        ],
        "security": [
          {
            "sessionAuth": []
          },
          {
            "internalApiAuth": []
          }
        ],
        "description": "Creates a new background job for the specified tenant with automatic queuing.\n\n## Authentication\nThis endpoint requires authentication via:\n- **Session-based auth**: Browser session cookie\n- **Token-based auth**: `x-mainio-internal-token` header (origin validation enforced)\n\n## Access Control\n- **System role**: Can create jobs in any tenant\n- **Admin/User roles**: Can create jobs only in their own tenant\n\n## Job Types and Configurations\n\n### data_source_crawl\nCrawls websites for content indexing:\n```json\n{\n  \"config\": {\n    \"dataSourceId\": \"clh1234...\",\n    \"maxPages\": 100,\n    \"respectRobotsTxt\": true\n  }\n}\n```\n\n### document_processing\nProcesses uploaded documents:\n```json\n{\n  \"config\": {\n    \"documentIds\": [\"clh1234...\", \"clh5678...\"],\n    \"extractImages\": false,\n    \"chunkSize\": 1000\n  }\n}\n```\n\n### vector_index_update\nUpdates vector database indexes:\n```json\n{\n  \"config\": {\n    \"vectorDatabaseId\": \"clh1234...\",\n    \"batchSize\": 100,\n    \"force\": false\n  }\n}\n```\n\n## Priority Levels\n- **high**: Critical jobs that should run immediately\n- **medium**: Standard priority (default)\n- **low**: Background tasks that can wait\n\n## Scheduling\n- **Immediate**: `scheduled: false` (default)\n- **Delayed**: `scheduled: true` with `scheduledAt`\n- **Recurring**: `scheduled: true` with `cronString`\n\n## Job Configuration\n- Each job type requires specific configuration\n- Configuration is validated against job type requirements\n- Invalid configurations return 400 Bad Request\n\n## Execution Limits\n- `maxAttempts`: Maximum retry attempts (default: 3)\n- `timeout`: Maximum execution time in milliseconds\n- Jobs exceeding limits are marked as failed\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant where job will be created",
            "example": "clh1234567890abcdef"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobCreateBodySchema"
              },
              "examples": {
                "websiteCrawl": {
                  "summary": "Website crawl job",
                  "value": {
                    "name": "Crawl Company Website",
                    "type": "data_source_crawl",
                    "description": "Crawl main website for content updates",
                    "priority": "medium",
                    "queue": "crawl",
                    "config": {
                      "dataSourceId": "clh3456789012cdefgh",
                      "maxPages": 50,
                      "respectRobotsTxt": true,
                      "crawlDepth": 3
                    },
                    "maxAttempts": 3,
                    "timeout": 600000
                  }
                },
                "documentProcessing": {
                  "summary": "Document processing job",
                  "value": {
                    "name": "Process Uploaded PDFs",
                    "type": "document_processing",
                    "description": "Index new PDF documents",
                    "priority": "high",
                    "queue": "processing",
                    "config": {
                      "documentIds": [
                        "clh5678901234efghij",
                        "clh6789012345fghijk"
                      ],
                      "extractImages": false,
                      "chunkSize": 1000,
                      "overlapSize": 100
                    },
                    "maxAttempts": 2,
                    "timeout": 300000
                  }
                },
                "scheduledJob": {
                  "summary": "Scheduled recurring job",
                  "value": {
                    "name": "Daily Data Sync",
                    "type": "data_sync",
                    "description": "Sync external data daily at 2 AM",
                    "priority": "low",
                    "queue": "sync",
                    "scheduled": true,
                    "cronString": "0 2 * * *",
                    "config": {
                      "apiEndpoint": "https://api.example.com/data",
                      "batchSize": 100
                    },
                    "maxAttempts": 5,
                    "timeout": 1800000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Job created successfully and queued for execution",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResponse"
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "clh9012345678ijklmn",
                    "tenantId": "clh1234567890abcdef",
                    "name": "Crawl Company Website",
                    "type": "data_source_crawl",
                    "description": "Crawl main website for content updates",
                    "status": "queued",
                    "priority": "medium",
                    "queue": "crawl",
                    "config": {
                      "dataSourceId": "clh3456789012cdefgh",
                      "maxPages": 50
                    },
                    "scheduled": false,
                    "maxAttempts": 3,
                    "timeout": 600000,
                    "createdAt": "2024-01-17T12:00:00Z",
                    "updatedAt": "2024-01-17T12:00:00Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                },
                "examples": {
                  "missingFields": {
                    "summary": "Missing required fields",
                    "value": {
                      "error": {
                        "code": "VALIDATION_ERROR",
                        "message": "Invalid job configuration provided",
                        "details": {
                          "name": [
                            "Name is required"
                          ],
                          "type": [
                            "Type is required"
                          ]
                        }
                      }
                    }
                  },
                  "invalidConfig": {
                    "summary": "Invalid configuration for job type",
                    "value": {
                      "error": {
                        "code": "VALIDATION_ERROR",
                        "message": "Invalid job configuration provided",
                        "details": {
                          "config": [
                            "dataSourceId is required for data_source_crawl jobs"
                          ]
                        }
                      }
                    }
                  },
                  "invalidCron": {
                    "summary": "Invalid cron expression",
                    "value": {
                      "error": {
                        "code": "VALIDATION_ERROR",
                        "message": "Invalid job configuration provided",
                        "details": {
                          "cronString": [
                            "Invalid cron expression"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Access denied to tenant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                },
                "example": {
                  "error": {
                    "code": "FORBIDDEN",
                    "message": "Access denied to this tenant"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                },
                "example": {
                  "error": {
                    "code": "NOT_FOUND",
                    "message": "Tenant not found"
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}": {
      "get": {
        "summary": "Get a specific tenant by ID",
        "operationId": "getTenant",
        "tags": [
          "Tenants"
        ],
        "description": "Returns a specific tenant. System users can access any tenant, while other users can only access their own tenant. Supports including related data through the include query parameter.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the tenant to fetch"
          },
          {
            "$ref": "#/components/parameters/tenantInclude"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/TenantResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "summary": "Update a specific tenant",
        "operationId": "updateTenant",
        "tags": [
          "Tenants"
        ],
        "description": "Updates a specific tenant. System users can update any tenant, while admin users can update only their own tenant with limitations, and regular users cannot update tenants.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the tenant to update"
          },
          {
            "in": "header",
            "name": "x-mainio-internal-token",
            "schema": {
              "type": "string"
            },
            "description": "Internal API token for backend-to-backend communication"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "internalApiToken": []
          }
        ],
        "x-permissions": {
          "roles": [
            {
              "role": "system",
              "tenantScope": "any",
              "access": "full",
              "fields": {
                "allow": [
                  "*"
                ]
              }
            },
            {
              "role": "admin",
              "tenantScope": "own",
              "access": "limited",
              "fields": {
                "allow": [
                  "name",
                  "description",
                  "theme"
                ],
                "deny": [
                  "*"
                ]
              }
            }
          ]
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TenantUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/TenantResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "summary": "Delete a tenant",
        "operationId": "deleteTenant",
        "tags": [
          "Tenants"
        ],
        "description": "Deletes a specific tenant by ID. Only users with system role can delete tenants.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the tenant to delete"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/scraper/crawl": {
      "post": {
        "summary": "Trigger a web scraping job",
        "tags": [
          "Scraper"
        ],
        "description": "Creates a new web scraping job for the specified URLs. The job will be processed asynchronously\nby the scraper service. Returns a job ID that can be used to track progress via SSE events.\n",
        "operationId": "triggerCrawl",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostScraperCrawlRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Crawl job created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostScraperCrawlResponse201"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/scraper/events": {
      "get": {
        "summary": "Stream scraper events via Server-Sent Events",
        "tags": [
          "Scraper"
        ],
        "description": "Establishes a Server-Sent Events (SSE) connection to stream real-time updates from\nscraper jobs. Filters events by job ID or tenant ID. Uses Redis pub/sub for event delivery.\n",
        "operationId": "streamScraperEvents",
        "parameters": [
          {
            "name": "jobId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter events for a specific job ID"
          },
          {
            "name": "tenantId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter events for a specific tenant (internal service calls only)"
          }
        ],
        "responses": {
          "200": {
            "description": "SSE stream established",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "description": "Server-Sent Events stream"
                },
                "examples": {
                  "connected": {
                    "value": "data: {\"type\":\"connected\",\"timestamp\":\"2024-01-01T12:00:00Z\"}\\n\\n"
                  },
                  "crawlerStarted": {
                    "value": "data: {\"type\":\"crawler_started\",\"jobId\":\"job-123\",\"url\":\"https://example.com\"}\\n\\n"
                  },
                  "crawlerProgress": {
                    "value": "data: {\"type\":\"crawler_progress\",\"jobId\":\"job-123\",\"progress\":50}\\n\\n"
                  },
                  "crawlerCompleted": {
                    "value": "data: {\"type\":\"crawler_completed\",\"jobId\":\"job-123\",\"documentCount\":10}\\n\\n"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/users/{id}": {
      "get": {
        "summary": "Get a specific user",
        "operationId": "getTenantUser",
        "tags": [
          "Users"
        ],
        "description": "Retrieves information for a specific user within a tenant. System users have full access, admin users can access only users in their tenant, and regular users can only access their own user record.\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "User information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "summary": "Update a specific user",
        "operationId": "updateTenantUser",
        "tags": [
          "Users"
        ],
        "description": "Updates information for a specific user within a tenant. System users can update any user, admin users can update users only in their tenant, and regular users can only update their own information.\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutTenantsTenantIdUsersIdRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "summary": "Delete a specific user",
        "operationId": "deleteTenantUser",
        "tags": [
          "Users"
        ],
        "description": "Deletes a specific user from a tenant. Only system and admin roles are permitted to delete users. Admin users can only delete users within their own tenant.\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/users/check-email": {
      "get": {
        "summary": "Check if an email is available (not in use) within a tenant",
        "operationId": "checkTenantUserEmail",
        "tags": [
          "Users"
        ],
        "description": "Checks if an email address is available for use within a specific tenant. Returns true if the email is available, false if it's already in use.\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "email"
            },
            "description": "The email address to check"
          }
        ],
        "responses": {
          "200": {
            "description": "Email availability check completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTenantsTenantIdUsersCheckEmailResponse200"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/users": {
      "get": {
        "summary": "List users in a tenant with pagination and filtering",
        "operationId": "listTenantUsers",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "sessionAuth": []
          },
          {
            "internalApiAuth": []
          }
        ],
        "description": "Retrieves a paginated list of users within a specific tenant.\n\n**Authentication:** Required\n**Authorization:** Admin or System role required\n\n## Access Control\n- **Required Roles:** `admin`, `system`\n- **Allowed Roles:** `admin` (own tenant only), `system` (any tenant)\n- **Forbidden Roles:** `user`\n\n### Permission Details\n- **System role**: Can list users in any tenant\n- **Admin role**: Can list users only in their own tenant\n- **User role**: Cannot list users (403 Forbidden)\n\n## Authentication Methods\nThis endpoint requires authentication via:\n- **Session-based auth**: Browser session cookie\n- **Token-based auth**: `x-mainio-internal-token` header (origin validation enforced)\n\n## Field Selection\n- Default fields: `id`, `name`, `email`, `role`, `tenantId`, `createdAt`, `updatedAt`\n- Sensitive fields excluded: `password`, `salt`, `emailVerified`\n- Custom field selection via `fields` parameter\n\n## Pagination Options\n- Standard pagination: Use `page` and `pageSize` parameters\n- Fetch all: Use `page=all` to get all users in a single response\n- Maximum page size: 100 users per page\n- Zero-based page numbering\n\n## Sorting\n- Sortable fields: `email`, `name`, `role`, `createdAt`, `updatedAt`\n- Default sort: `email` ascending\n- Use `sortBy` and `order` parameters to customize\n\n## Performance Notes\n- Results are optimized for admin dashboards\n- Large tenants should use pagination instead of `page=all`\n- Field selection reduces response size\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant",
            "example": "clh1234567890abcdef"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of fields to select",
            "example": "id,name,email,role"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/GetTenantsTenantIdUsersParam2Enum"
            },
            "description": "Field to sort by"
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsChatIdMessagesParam7Enum"
            },
            "description": "Sort order"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "0"
            },
            "description": "Page number (0-based) or 'all' to fetch all users",
            "example": "0"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of items per page",
            "example": 20
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserListResponse"
                },
                "examples": {
                  "standardPage": {
                    "summary": "Standard paginated response",
                    "value": {
                      "success": true,
                      "data": {
                        "items": [
                          {
                            "id": "clh1234567890abcdef",
                            "name": "John Doe",
                            "email": "john@acme.com",
                            "role": "admin",
                            "tenantId": "clh0987654321fedcba",
                            "createdAt": "2024-01-15T10:30:00Z",
                            "updatedAt": "2024-01-15T10:30:00Z"
                          },
                          {
                            "id": "clh2345678901bcdefg",
                            "name": "Jane Smith",
                            "email": "jane@acme.com",
                            "role": "user",
                            "tenantId": "clh0987654321fedcba",
                            "createdAt": "2024-01-16T14:20:00Z",
                            "updatedAt": "2024-01-16T14:20:00Z"
                          }
                        ],
                        "pagination": {
                          "page": 0,
                          "pageSize": 20,
                          "total": 45,
                          "pages": 3,
                          "hasNext": true,
                          "hasPrev": false
                        }
                      }
                    }
                  },
                  "allUsers": {
                    "summary": "All users response (page=all)",
                    "value": {
                      "success": true,
                      "data": {
                        "items": [
                          {
                            "id": "clh1234567890abcdef",
                            "name": "Admin User",
                            "email": "admin@company.com",
                            "role": "admin"
                          }
                        ],
                        "pagination": {
                          "page": 0,
                          "pageSize": 5,
                          "total": 5,
                          "pages": 1,
                          "hasNext": false,
                          "hasPrev": false
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Forbidden - Admin or System role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                },
                "examples": {
                  "userRole": {
                    "summary": "User role cannot list users (requires admin or system)",
                    "value": {
                      "error": {
                        "code": "INSUFFICIENT_ROLE",
                        "message": "Insufficient permissions for this operation",
                        "context": {
                          "requiredRoles": "admin, system",
                          "userRole": "user"
                        }
                      }
                    }
                  },
                  "wrongTenant": {
                    "summary": "Admin accessing different tenant",
                    "value": {
                      "error": {
                        "code": "FORBIDDEN",
                        "message": "Access denied to this tenant"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "summary": "Create a new user in a tenant",
        "operationId": "createTenantUser",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "sessionAuth": []
          },
          {
            "internalApiAuth": []
          }
        ],
        "description": "Creates a new user within a specific tenant with proper password hashing and validation.\n\n**Authentication:** Required\n**Authorization:** Admin or System role required\n\n## Access Control\n- **Required Roles:** `admin`, `system`\n- **Allowed Roles:** `admin` (own tenant only), `system` (any tenant)\n- **Forbidden Roles:** `user`\n\n### Permission Details\n- **System role**: Can create users in any tenant with any role (including system users)\n- **Admin role**: Can create users only in their own tenant (cannot create system users)\n- **User role**: Cannot create users (403 Forbidden)\n\n## Authentication Methods\nThis endpoint requires authentication via:\n- **Session-based auth**: Browser session cookie\n- **Token-based auth**: `x-mainio-internal-token` header (origin validation enforced)\n\n## User Creation Rules\n- Email must be unique across the system\n- Password is securely hashed with salt before storage\n- User is automatically assigned to the specified tenant\n- Default role is 'user' if not specified\n\n## Role Restrictions\n- Only system users can create other system users\n- Admin users cannot create system users\n- Admin users can create admin and user roles\n\n## Validation Rules\n- Name: 1-255 characters, required\n- Email: Valid email format, unique, required\n- Password: Minimum 6 characters, required\n- Role: Must be valid enum value (user, admin, system)\n- Image: Optional URL to profile picture\n\n## Security Features\n- Passwords are hashed using bcrypt with salt\n- Sensitive fields excluded from response\n- Email uniqueness enforced at database level\n- Role-based access control validated\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant where user will be created",
            "example": "clh1234567890abcdef"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateBodySchema"
              },
              "examples": {
                "basicUser": {
                  "summary": "Create basic user",
                  "value": {
                    "name": "John Doe",
                    "email": "john.doe@company.com",
                    "password": "securePassword123",
                    "role": "user"
                  }
                },
                "adminUser": {
                  "summary": "Create admin user",
                  "value": {
                    "name": "Jane Smith",
                    "email": "jane.smith@company.com",
                    "password": "adminPassword456",
                    "role": "admin",
                    "image": "https://example.com/profile.jpg"
                  }
                },
                "systemUser": {
                  "summary": "Create system user (system role only)",
                  "value": {
                    "name": "System Service",
                    "email": "system@company.com",
                    "password": "systemPassword789",
                    "role": "system"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "clh3456789012cdefgh",
                    "name": "John Doe",
                    "email": "john.doe@company.com",
                    "role": "user",
                    "tenantId": "clh1234567890abcdef",
                    "createdAt": "2024-01-17T09:15:00Z",
                    "updatedAt": "2024-01-17T09:15:00Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                },
                "examples": {
                  "missingFields": {
                    "summary": "Missing required fields",
                    "value": {
                      "error": {
                        "code": "VALIDATION_ERROR",
                        "message": "Invalid user data provided",
                        "details": {
                          "email": [
                            "Email is required"
                          ],
                          "password": [
                            "Password is required"
                          ]
                        }
                      }
                    }
                  },
                  "duplicateEmail": {
                    "summary": "Email already exists",
                    "value": {
                      "error": {
                        "code": "VALIDATION_ERROR",
                        "message": "Email already exists"
                      }
                    }
                  },
                  "weakPassword": {
                    "summary": "Password too weak",
                    "value": {
                      "error": {
                        "code": "VALIDATION_ERROR",
                        "message": "Invalid user data provided",
                        "details": {
                          "password": [
                            "Password must be at least 6 characters"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Forbidden - Admin or System role required, or role restrictions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                },
                "examples": {
                  "userRole": {
                    "summary": "User role cannot create users (requires admin or system)",
                    "value": {
                      "error": {
                        "code": "INSUFFICIENT_ROLE",
                        "message": "Insufficient permissions for this operation",
                        "context": {
                          "requiredRoles": "admin, system",
                          "userRole": "user"
                        }
                      }
                    }
                  },
                  "systemRole": {
                    "summary": "Admin cannot create system users",
                    "value": {
                      "error": {
                        "code": "FORBIDDEN",
                        "message": "You cannot create system users"
                      }
                    }
                  },
                  "wrongTenant": {
                    "summary": "Admin accessing different tenant",
                    "value": {
                      "error": {
                        "code": "FORBIDDEN",
                        "message": "Access denied: different tenant"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/validate-domain": {
      "get": {
        "summary": "Validate if a tenant exists",
        "operationId": "validateTenantById",
        "tags": [
          "Tenants"
        ],
        "description": "Validates if a tenant with the given ID exists in the system. This endpoint does not require authentication and can be used by clients to verify tenant existence before attempting login.\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the tenant to validate",
            "schema": {
              "type": "string",
              "example": "550e8400-e29b-41d4-a716-446655440000"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant validation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetApiTenantsTenantIdValidateDomainResponse200"
                }
              }
            }
          },
          "400": {
            "description": "Invalid tenant ID format"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/tenants": {
      "get": {
        "summary": "Get all tenants",
        "tags": [
          "Tenants"
        ],
        "description": "Returns all tenants for system users, or only the user's tenant for other roles. Supports including related data, field selection, and pagination.\n",
        "operationId": "listTenants",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of relations to include (users,agents,dataSources)"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of fields to select"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Page number (0-based)"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of items per page (max 100, default 20)"
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of tenants",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTenantsResponse200"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "summary": "Create a new tenant",
        "tags": [
          "Tenants"
        ],
        "description": "Creates a new tenant. Only available to users with system role.",
        "operationId": "createTenant",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TenantCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tenant created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": []
      }
    },
    "/api/tenants/validate": {
      "get": {
        "summary": "Validate if a domain exists",
        "operationId": "validateTenantDomain",
        "tags": [
          "Tenants"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "sessionAuth": []
          },
          {
            "internalApiAuth": []
          }
        ],
        "description": "Validates if a tenant with the given domain exists in the system. The domain comparison is case-insensitive.\n\n## Authentication\nThis endpoint requires authentication via:\n- **Session-based auth**: Browser session cookie\n- **Bearer token auth**: JWT token in Authorization header\n- **Token-based auth**: `x-mainio-internal-token` header (origin validation enforced)\n\n## Access Control\n- **System role**: Full access - can validate any domain\n- **Admin role**: No access\n- **User role**: No access\n\nThis endpoint is restricted to system role only for security purposes.\n",
        "parameters": [
          {
            "name": "domain",
            "in": "query",
            "required": true,
            "description": "The domain to validate (e.g., \"example.com\" or \"subdomain.example.com\")",
            "schema": {
              "type": "string",
              "example": "example.com"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Domain validation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetApiTenantsValidateResponse200"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "summary": "Get a specific user",
        "operationId": "getUser",
        "tags": [
          "Users"
        ],
        "description": "Returns a specific user. System users can access any user, while other users can only access users from their tenant.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "The user details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "summary": "Update a specific user",
        "tags": [
          "Users"
        ],
        "description": "Updates a user. System users can update any user, while other users can only update users from their tenant.\n",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "summary": "Delete a specific user",
        "tags": [
          "Users"
        ],
        "description": "Deletes a user. System users can delete any user, while admin users can only delete users from their tenant.\n",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Get all users",
        "tags": [
          "Users"
        ],
        "description": "Returns all users. System users can see all users, while other users can only see users from their tenant.\n",
        "operationId": "listUsers",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Page number (0-based)"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of items per page"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/GetUsersParam2Enum"
            },
            "description": "Field to sort by"
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsChatIdMessagesParam7Enum"
            },
            "description": "Sort order"
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserListResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "summary": "Create a new user",
        "tags": [
          "Users"
        ],
        "description": "Creates a new user. System users can create users for any tenant, while admin users can only create users for their own tenant.\n",
        "operationId": "createUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": []
      }
    },
    "/vector-databases/{vectorDatabaseId}/indices/{indexId}": {
      "get": {
        "summary": "Get a specific vector index",
        "operationId": "getVectorIndex",
        "tags": [
          "Indices"
        ],
        "description": "Returns a specific vector index. Only available to system users.",
        "parameters": [
          {
            "name": "vectorDatabaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the vector database"
          },
          {
            "name": "indexId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the vector index"
          }
        ],
        "responses": {
          "200": {
            "description": "Vector index details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VectorIndexResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "summary": "Update a vector index",
        "operationId": "updateVectorIndex",
        "tags": [
          "Indices"
        ],
        "description": "Updates a vector index. Only available to system users.",
        "parameters": [
          {
            "name": "vectorDatabaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the vector database"
          },
          {
            "name": "indexId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the vector index"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VectorIndexUpdateBodySchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vector index updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VectorIndexResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "summary": "Delete a vector index",
        "operationId": "deleteVectorIndex",
        "tags": [
          "Indices"
        ],
        "description": "Deletes a vector index. Only available to system users.",
        "parameters": [
          {
            "name": "vectorDatabaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the vector database"
          },
          {
            "name": "indexId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the vector index"
          }
        ],
        "responses": {
          "204": {
            "description": "Vector index deleted successfully"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/vector-databases/{vectorDatabaseId}/indices": {
      "get": {
        "summary": "List vector indices for a database",
        "tags": [
          "Indices"
        ],
        "description": "Returns a paginated list of vector indices for a database. Only available to system users.\n",
        "operationId": "listVectorIndices",
        "parameters": [
          {
            "name": "vectorDatabaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the vector database"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of fields to return"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/GetVectorDatabasesVectorDatabaseIdIndicesParam2Enum"
            },
            "description": "Field to sort by"
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsChatIdMessagesParam7Enum"
            },
            "description": "Sort order"
          },
          {
            "name": "startsWith",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter items by name prefix (matches items that start with the given value)"
          },
          {
            "name": "contains",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter items by name substring (matches if name contains the given value)"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "List of indices with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VectorIndexListResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "summary": "Create a new vector index",
        "tags": [
          "Indices"
        ],
        "description": "Creates a new vector index in the specified vector database. Only available to system users.\n",
        "operationId": "createVectorIndex",
        "parameters": [
          {
            "name": "vectorDatabaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the vector database"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VectorIndexCreateBodySchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vector index created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostVectorDatabasesVectorDatabaseIdIndicesResponse201"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/vector-databases": {
      "get": {
        "summary": "Get all vector databases",
        "tags": [
          "Vector Databases"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Returns all vector databases.\n\n**Authentication:** Required\n**Authorization:** System role only\n\n## Access Control\n- **Required Role:** `system`\n- **Allowed Roles:** None (system only)\n\nThis endpoint is restricted to system administrators for managing\nvector database configurations across all tenants.\n",
        "operationId": "listVectorDatabases",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of fields to return. Available fields:\nid, name, type, description, config, createdAt, updatedAt\n",
            "example": "id,name,type"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Field to sort by (createdAt, name, type)"
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsChatIdMessagesParam7Enum"
            },
            "description": "Sort order (asc or desc)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of vector databases",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VectorDatabaseListResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "summary": "Create a new vector database",
        "tags": [
          "Vector Databases"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Creates a new vector database configuration.\n\n**Authentication:** Required\n**Authorization:** System role only\n\n## Access Control\n- **Required Role:** `system`\n- **Allowed Roles:** None (system only)\n\nThis endpoint is restricted to system administrators for creating\nnew vector database configurations that can be used across all tenants.\n",
        "operationId": "createVectorDatabase",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VectorDatabaseCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vector database created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VectorDatabaseResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": []
      }
    }
  },
  "components": {
    "schemas": {
      "JobStatus": {
        "type": "string",
        "enum": [
          "queued",
          "running",
          "completed",
          "failed",
          "cancelled",
          "scheduled"
        ],
        "description": "Job status enumeration"
      },
      "JobType": {
        "type": "string",
        "enum": [
          "webScraper",
          "wordPressSite",
          "fileStorage",
          "agentReport"
        ],
        "description": "Job type enumeration"
      },
      "Job": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/JobType"
          },
          "status": {
            "$ref": "#/components/schemas/JobStatus"
          },
          "priority": {
            "$ref": "#/components/schemas/JobPriorityEnum"
          },
          "id": {
            "type": "string"
          },
          "tenantId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "queue": {
            "type": "string"
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "result": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "scheduled": {
            "type": "boolean"
          },
          "nextRun": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "lastRun": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "attempts": {
            "type": "integer"
          },
          "maxAttempts": {
            "type": "integer"
          },
          "timeout": {
            "type": "integer"
          },
          "dataSourceId": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "startedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "completedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          }
        },
        "required": [
          "type",
          "status",
          "priority",
          "id",
          "name",
          "queue",
          "result",
          "scheduled",
          "attempts",
          "maxAttempts",
          "timeout",
          "createdAt",
          "updatedAt"
        ],
        "description": "Background job"
      },
      "AgentHistory": {
        "type": "object",
        "properties": {
          "agentId": {
            "type": "string"
          },
          "revision": {
            "type": "number",
            "minimum": 0
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 2000
          },
          "instructions": {
            "type": "string",
            "maxLength": 200000
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "createdById": {
            "type": "string"
          }
        },
        "required": [
          "agentId",
          "revision",
          "name",
          "instructions",
          "createdAt",
          "createdById"
        ],
        "description": "Agent revision history"
      },
      "AgentHistoryListResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/AgentHistory"
        }
      },
      "JsonValue": {
        "type": "object",
        "additionalProperties": {
          "nullable": true
        },
        "description": "Generic JSON value object"
      },
      "Error400": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          }
        },
        "required": [
          "error"
        ],
        "description": "400 Bad Request error response"
      },
      "Error401": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          }
        },
        "required": [
          "error"
        ],
        "description": "401 Unauthorized error response"
      },
      "Error403": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          }
        },
        "required": [
          "error"
        ],
        "description": "403 Forbidden error response"
      },
      "Error404": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          }
        },
        "required": [
          "error"
        ],
        "description": "404 Not Found error response"
      },
      "Error409": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          }
        },
        "required": [
          "error"
        ],
        "description": "409 Conflict error response"
      },
      "Error422": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error422ValidationErrorsItem"
            }
          }
        },
        "required": [
          "error",
          "validationErrors"
        ],
        "description": "422 Validation error response"
      },
      "Error429": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          },
          "retryAfterSeconds": {
            "type": "number",
            "description": "Seconds to wait before retrying"
          }
        },
        "required": [
          "error",
          "retryAfterSeconds"
        ],
        "description": "429 Too Many Requests error response"
      },
      "Error500": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          }
        },
        "required": [
          "error"
        ],
        "description": "500 Internal Server Error response"
      },
      "Error503": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          }
        },
        "required": [
          "error"
        ],
        "description": "503 Service Unavailable error response"
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error422ValidationErrorsItem"
            }
          }
        },
        "required": [
          "error",
          "validationErrors"
        ],
        "description": "Validation error details (alias for Error422)"
      },
      "ForbiddenError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          }
        },
        "required": [
          "error"
        ],
        "description": "Forbidden error details (alias for Error403)"
      },
      "NotFoundError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          }
        },
        "required": [
          "error"
        ],
        "description": "Not found error details (alias for Error404)"
      },
      "UnauthorizedError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          }
        },
        "required": [
          "error"
        ],
        "description": "Unauthorized error details (alias for Error401)"
      },
      "ErrorMessage": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          }
        },
        "required": [
          "error"
        ],
        "description": "Generic error message"
      },
      "BadRequestError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          }
        },
        "required": [
          "error"
        ],
        "description": "Bad request error details (alias for Error400)"
      },
      "ConflictError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          }
        },
        "required": [
          "error"
        ],
        "description": "Conflict error details (alias for Error409)"
      },
      "InternalError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          }
        },
        "required": [
          "error"
        ],
        "description": "Internal server error details (alias for Error500)"
      },
      "PaginationMeta": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Current page number (0-based)"
          },
          "pageSize": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "Number of items per page"
          },
          "total": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of items available"
          },
          "totalPages": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of pages available"
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor for fetching the next page"
          },
          "prevCursor": {
            "type": "string",
            "description": "Cursor for fetching the previous page"
          },
          "hasNext": {
            "type": "boolean",
            "description": "Whether there is a next page"
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Whether there is a previous page"
          }
        },
        "description": "Pagination metadata"
      },
      "Agent": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AgentTypeEnum"
          },
          "id": {
            "type": "string"
          },
          "revision": {
            "type": "integer",
            "minimum": 0
          },
          "tenantId": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 2000
          },
          "instructions": {
            "type": "string",
            "nullable": true,
            "maxLength": 200000
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          }
        },
        "required": [
          "type",
          "id",
          "revision",
          "tenantId",
          "name",
          "createdAt",
          "updatedAt"
        ],
        "description": "AI agent configuration",
        "example": {
          "id": "123e4567-e89b-12d3-a456-426614174000",
          "revision": 1,
          "tenantId": "123e4567-e89b-12d3-a456-426614174000",
          "type": "CHAT",
          "name": "Customer Support Agent",
          "description": "Handles customer inquiries",
          "instructions": "Be helpful and friendly when answering customer questions",
          "config": {
            "chatConfig": {
              "theme": {
                "primaryColor": "#0066CC"
              }
            }
          },
          "createdAt": "2023-01-01T00:00:00Z",
          "updatedAt": "2023-01-01T00:00:00Z"
        }
      },
      "Tenant": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/TenantStatusEnum"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "domain": {
            "type": "string",
            "minLength": 3,
            "maxLength": 255
          },
          "settings": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "theme": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "active": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          }
        },
        "required": [
          "status",
          "id",
          "name",
          "domain",
          "theme",
          "active",
          "createdAt",
          "updatedAt"
        ],
        "description": "Tenant organization information",
        "example": {
          "id": "123e4567-e89b-12d3-a456-426614174000",
          "name": "Example Organization",
          "domain": "example.com",
          "description": "An example organization",
          "status": "ACTIVE",
          "active": true,
          "createdAt": "2023-01-01T00:00:00Z",
          "updatedAt": "2023-01-01T00:00:00Z"
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "role": {
            "$ref": "#/components/schemas/UserRole"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "nullable": true,
            "minLength": 8
          },
          "salt": {
            "type": "string",
            "nullable": true
          },
          "emailVerified": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "image": {
            "type": "string",
            "nullable": true,
            "format": "uri"
          },
          "lastLoginAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "tenantId": {
            "type": "string"
          },
          "userSettings": {
            "$ref": "#/components/schemas/UserUserSettings"
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          }
        },
        "required": [
          "role",
          "id",
          "name",
          "email",
          "tenantId",
          "createdAt",
          "updatedAt"
        ],
        "description": "User account information",
        "example": {
          "id": "123e4567-e89b-12d3-a456-426614174000",
          "email": "user@example.com",
          "name": "John Doe",
          "role": "USER",
          "tenantId": "123e4567-e89b-12d3-a456-426614174000",
          "createdAt": "2023-01-01T00:00:00Z",
          "updatedAt": "2023-01-01T00:00:00Z"
        }
      },
      "DataSource": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DataSourceTypeEnum"
          },
          "intervalType": {
            "$ref": "#/components/schemas/DataSourceIntervalTypeEnum"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "tenantId": {
            "type": "string",
            "nullable": true
          },
          "vectorDatabaseId": {
            "type": "string",
            "nullable": true
          },
          "vectorIndexId": {
            "type": "string",
            "nullable": true
          },
          "embedModelId": {
            "type": "string",
            "nullable": true
          },
          "intervalValue": {
            "type": "number",
            "minimum": 1,
            "maximum": 365
          },
          "targetUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "settings": {
            "$ref": "#/components/schemas/JsonValue"
          }
        },
        "required": [
          "type",
          "intervalType",
          "id",
          "name",
          "intervalValue",
          "targetUrls",
          "createdAt",
          "updatedAt"
        ],
        "description": "Data source for agent knowledge"
      },
      "Document": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/DocumentStatusEnum"
          },
          "type": {
            "$ref": "#/components/schemas/DocumentTypeEnum"
          },
          "id": {
            "type": "string"
          },
          "dataSourceId": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "mimeType": {
            "type": "string",
            "nullable": true
          },
          "size": {
            "type": "number",
            "nullable": true,
            "minimum": 0
          },
          "binary": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "markdown": {
            "type": "string",
            "nullable": true
          },
          "html": {
            "type": "string",
            "nullable": true
          },
          "hash": {
            "type": "string",
            "nullable": true
          },
          "lastModified": {
            "type": "string",
            "nullable": true
          },
          "etag": {
            "type": "string",
            "nullable": true
          },
          "tokens": {
            "type": "number",
            "nullable": true,
            "minimum": 0
          },
          "metadata": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          }
        },
        "required": [
          "status",
          "type",
          "id",
          "dataSourceId",
          "url",
          "createdAt",
          "updatedAt"
        ],
        "description": "Document in a data source"
      },
      "AgentDataSource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "agentId": {
            "type": "string"
          },
          "dataSourceId": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 1000
          },
          "instructions": {
            "type": "string",
            "nullable": true,
            "maxLength": 10000
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          }
        },
        "required": [
          "id",
          "agentId",
          "dataSourceId"
        ],
        "description": "Agent data source relationship"
      },
      "Chat": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          },
          "agentId": {
            "type": "string"
          },
          "info": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "tokens": {
            "$ref": "#/components/schemas/JsonValue"
          }
        },
        "required": [
          "id",
          "tenantId",
          "agentId",
          "info",
          "createdAt",
          "updatedAt",
          "tokens"
        ],
        "description": "Chat conversation"
      },
      "Message": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "chatId": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "userId": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "tokens": {
            "$ref": "#/components/schemas/JsonValue"
          }
        },
        "required": [
          "id",
          "chatId",
          "role",
          "message",
          "createdAt",
          "updatedAt",
          "tokens"
        ],
        "description": "Chat message"
      },
      "Tool": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "params": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "code": {
            "type": "string",
            "minLength": 1
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          }
        },
        "required": [
          "id",
          "name",
          "params",
          "code",
          "createdAt",
          "updatedAt"
        ],
        "description": "Agent tool/function"
      },
      "Embedding": {
        "type": "object",
        "properties": {
          "vendor": {
            "$ref": "#/components/schemas/EmbeddingVendorEnum"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "internalName": {
            "type": "string"
          },
          "dimension": {
            "type": "number",
            "minimum": 1
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          }
        },
        "required": [
          "vendor",
          "id",
          "name",
          "internalName",
          "dimension",
          "createdAt",
          "updatedAt"
        ],
        "description": "Vector embedding model"
      },
      "FoundationModel": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/FoundationModelTypeEnum"
          },
          "vendor": {
            "$ref": "#/components/schemas/EmbeddingVendorEnum"
          },
          "id": {
            "type": "string"
          },
          "alias": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 16
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "internalName": {
            "type": "string",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "contextWindow": {
            "type": "number",
            "minimum": 1
          },
          "maxOutput": {
            "type": "number",
            "nullable": true,
            "minimum": 1
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "knowledgeCutOff": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "type",
          "vendor",
          "id",
          "name",
          "internalName",
          "contextWindow",
          "createdAt",
          "updatedAt"
        ],
        "description": "Foundation AI model configuration"
      },
      "VectorDatabase": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/VectorDatabaseTypeEnum"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "tenantId": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          }
        },
        "required": [
          "type",
          "id",
          "name",
          "createdAt",
          "updatedAt"
        ],
        "description": "Vector database configuration"
      },
      "VectorIndex": {
        "type": "object",
        "properties": {
          "metric": {
            "$ref": "#/components/schemas/VectorIndexMetricEnum"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "dimension": {
            "type": "number",
            "minimum": 1
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "vectorDatabaseId": {
            "type": "string"
          },
          "embedModelId": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          }
        },
        "required": [
          "id",
          "name",
          "dimension",
          "vectorDatabaseId",
          "createdAt",
          "updatedAt"
        ],
        "description": "Vector index configuration"
      },
      "JobExecution": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/JobStatus"
          },
          "id": {
            "type": "string"
          },
          "jobId": {
            "type": "string"
          },
          "attemptNumber": {
            "type": "integer"
          },
          "startedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "completedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "duration": {
            "type": "integer",
            "nullable": true
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "logs": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          }
        },
        "required": [
          "status",
          "id",
          "jobId",
          "attemptNumber",
          "startedAt",
          "createdAt",
          "updatedAt"
        ],
        "description": "Job execution record"
      },
      "Feedback": {
        "type": "object",
        "properties": {
          "rating": {
            "$ref": "#/components/schemas/FeedbackRatingEnum"
          },
          "id": {
            "type": "string"
          },
          "messageId": {
            "type": "string"
          },
          "content": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 4000
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          }
        },
        "required": [
          "rating",
          "id",
          "messageId",
          "createdAt",
          "updatedAt"
        ],
        "description": "User feedback"
      },
      "AgentCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "tenantId": {
            "type": "string"
          },
          "instructions": {
            "type": "string",
            "nullable": true,
            "maxLength": 200000
          },
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 2000
          },
          "type": {
            "$ref": "#/components/schemas/AgentTypeEnum"
          }
        },
        "required": [
          "name",
          "tenantId"
        ],
        "description": "Schema for creating a new agent"
      },
      "AgentCreateSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "tenantId": {
            "type": "string"
          },
          "instructions": {
            "type": "string",
            "nullable": true,
            "maxLength": 200000
          },
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 2000
          },
          "type": {
            "$ref": "#/components/schemas/AgentTypeEnum"
          }
        },
        "required": [
          "name",
          "tenantId"
        ],
        "description": "Schema for creating a new agent (alias)"
      },
      "AgentCreateBodySchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "instructions": {
            "type": "string",
            "nullable": true,
            "maxLength": 200000
          },
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 2000
          },
          "type": {
            "$ref": "#/components/schemas/AgentTypeEnum"
          }
        },
        "required": [
          "name"
        ],
        "description": "Request body for creating an agent (tenantId in path)"
      },
      "AgentUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "instructions": {
            "type": "string",
            "nullable": true,
            "maxLength": 200000
          },
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 2000
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          }
        },
        "description": "Schema for updating an existing agent"
      },
      "AgentUpdateSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "instructions": {
            "type": "string",
            "nullable": true,
            "maxLength": 200000
          },
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 2000
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          }
        },
        "description": "Schema for updating an existing agent (alias)"
      },
      "AgentResponse": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AgentTypeEnum"
          },
          "id": {
            "type": "string"
          },
          "revision": {
            "type": "integer",
            "minimum": 0
          },
          "tenantId": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 2000
          },
          "instructions": {
            "type": "string",
            "nullable": true,
            "maxLength": 200000
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "_count": {
            "$ref": "#/components/schemas/AgentResponseCount"
          },
          "tenant": {
            "$ref": "#/components/schemas/AgentResponseTenant"
          },
          "functions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentResponseTenant"
            }
          },
          "datasources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentResponseDatasourcesItem"
            }
          },
          "chats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentResponseChatsItem"
            }
          }
        },
        "required": [
          "type",
          "id",
          "revision",
          "tenantId",
          "name",
          "createdAt",
          "updatedAt"
        ],
        "description": "Agent data with optional related information based on include query parameter"
      },
      "AgentListResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/AgentListResponseItem"
        },
        "description": "List of agents with pagination"
      },
      "AgentConfigResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AgentConfigResponseData"
          }
        },
        "required": [
          "data"
        ],
        "description": "Agent configuration response"
      },
      "AgentChatLinkResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AgentChatLinkResponseData"
          }
        },
        "required": [
          "data"
        ],
        "description": "Agent chat link response"
      },
      "TenantCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "domain": {
            "type": "string",
            "minLength": 3,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "status": {
            "$ref": "#/components/schemas/TenantStatusEnum"
          },
          "settings": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "theme": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "active": {
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "domain"
        ],
        "description": "Schema for creating a new tenant"
      },
      "TenantUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "domain": {
            "type": "string",
            "minLength": 3,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "status": {
            "$ref": "#/components/schemas/TenantStatusEnum"
          },
          "settings": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "theme": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "active": {
            "type": "boolean"
          }
        },
        "description": "Schema for updating an existing tenant"
      },
      "TenantResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TenantResponseData"
          }
        },
        "required": [
          "data"
        ],
        "description": "Tenant data"
      },
      "TenantListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TenantListResponseDataItem"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/TenantListResponseMeta"
          }
        },
        "required": [
          "data",
          "meta"
        ],
        "description": "List of tenants with pagination"
      },
      "UserCreate": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "maxLength": 40
          },
          "role": {
            "$ref": "#/components/schemas/UserRole"
          },
          "tenantId": {
            "type": "string"
          },
          "image": {
            "type": "string",
            "nullable": true,
            "format": "uri"
          }
        },
        "required": [
          "email",
          "name",
          "password",
          "role",
          "tenantId"
        ],
        "description": "Schema for creating a new user"
      },
      "UserCreateSchema": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "maxLength": 40
          },
          "role": {
            "$ref": "#/components/schemas/UserRole"
          },
          "tenantId": {
            "type": "string"
          },
          "image": {
            "type": "string",
            "nullable": true,
            "format": "uri"
          }
        },
        "required": [
          "email",
          "name",
          "password",
          "role",
          "tenantId"
        ],
        "description": "Schema for creating a new user (alias)"
      },
      "UserCreateBodySchema": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "maxLength": 40
          },
          "role": {
            "$ref": "#/components/schemas/UserRole"
          },
          "image": {
            "type": "string",
            "nullable": true,
            "format": "uri"
          }
        },
        "required": [
          "email",
          "name",
          "password",
          "role"
        ],
        "description": "Request body for creating a user"
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "role": {
            "$ref": "#/components/schemas/UserRole"
          },
          "image": {
            "type": "string",
            "nullable": true,
            "format": "uri"
          },
          "password": {
            "type": "string",
            "nullable": true,
            "minLength": 8
          }
        },
        "description": "Schema for updating an existing user"
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UserResponseData"
          }
        },
        "required": [
          "data"
        ],
        "description": "User data"
      },
      "UserListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserResponseData"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/TenantListResponseMeta"
          }
        },
        "required": [
          "data",
          "meta"
        ],
        "description": "List of users with pagination"
      },
      "DocumentCreate": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/DocumentTypeEnum"
          },
          "mimeType": {
            "type": "string",
            "nullable": true
          },
          "markdown": {
            "type": "string",
            "nullable": true
          },
          "html": {
            "type": "string",
            "nullable": true
          },
          "hash": {
            "type": "string",
            "nullable": true
          },
          "lastModified": {
            "type": "string",
            "nullable": true
          },
          "etag": {
            "type": "string",
            "nullable": true
          },
          "tokens": {
            "type": "number",
            "nullable": true,
            "minimum": 0
          },
          "status": {
            "$ref": "#/components/schemas/DocumentStatusEnum"
          },
          "size": {
            "type": "number",
            "nullable": true,
            "minimum": 0
          },
          "binary": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "metadata": {
            "$ref": "#/components/schemas/JsonValue"
          }
        },
        "required": [
          "url",
          "type"
        ],
        "description": "Schema for creating a new document (dataSourceId from path)"
      },
      "DocumentUpdate": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/DocumentTypeEnum"
          },
          "dataSourceId": {
            "type": "string"
          },
          "mimeType": {
            "type": "string",
            "nullable": true
          },
          "markdown": {
            "type": "string",
            "nullable": true
          },
          "html": {
            "type": "string",
            "nullable": true
          },
          "hash": {
            "type": "string",
            "nullable": true
          },
          "lastModified": {
            "type": "string",
            "nullable": true
          },
          "etag": {
            "type": "string",
            "nullable": true
          },
          "tokens": {
            "type": "number",
            "nullable": true,
            "minimum": 0
          },
          "status": {
            "$ref": "#/components/schemas/DocumentStatusEnum"
          },
          "size": {
            "type": "number",
            "nullable": true,
            "minimum": 0
          },
          "binary": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "metadata": {
            "$ref": "#/components/schemas/JsonValue"
          }
        },
        "description": "Schema for updating a document"
      },
      "DocumentResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DocumentResponseData"
          }
        },
        "required": [
          "data"
        ],
        "description": "Single document response"
      },
      "DocumentListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentResponseData"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/TenantListResponseMeta"
          }
        },
        "required": [
          "data",
          "meta"
        ],
        "description": "List of documents with pagination"
      },
      "MessageResponseItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "chatId": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "userId": {
            "type": "string",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "tokens": {
            "$ref": "#/components/schemas/JsonValue"
          }
        },
        "required": [
          "id",
          "chatId",
          "role",
          "message",
          "createdAt"
        ],
        "description": "Single message response"
      },
      "MessageListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageListResponseDataItem"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/TenantListResponseMeta"
          }
        },
        "required": [
          "data",
          "meta"
        ],
        "description": "List of messages with pagination (cursor or page-based)"
      },
      "MessageBatchResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageListResponseDataItem"
            }
          }
        },
        "required": [
          "data"
        ],
        "description": "Batch of messages without pagination"
      },
      "ChatCreateOrUpdateSchema": {
        "type": "object",
        "nullable": true,
        "properties": {
          "info": {
            "$ref": "#/components/schemas/JsonValue"
          }
        },
        "description": "Schema for creating a new chat"
      },
      "ChatResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ChatResponseData"
          }
        },
        "required": [
          "data"
        ],
        "description": "Single chat response"
      },
      "ChatListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatResponseData"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/TenantListResponseMeta"
          }
        },
        "required": [
          "data",
          "meta"
        ],
        "description": "List of chats with pagination"
      },
      "JobCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/JobType"
          },
          "attempts": {
            "type": "integer"
          },
          "completedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "dataSourceId": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "lastRun": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "maxAttempts": {
            "type": "integer"
          },
          "nextRun": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "priority": {
            "$ref": "#/components/schemas/JobPriorityEnum"
          },
          "queue": {
            "type": "string"
          },
          "result": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "scheduled": {
            "type": "boolean"
          },
          "startedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "timeout": {
            "type": "integer"
          }
        },
        "required": [
          "name",
          "type"
        ],
        "description": "Schema for creating a new job (tenantId from path)"
      },
      "JobUpdate": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/JobStatus"
          },
          "result": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "nextRun": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "lastRun": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "attempts": {
            "type": "integer"
          },
          "startedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "completedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          }
        },
        "description": "Schema for updating a job"
      },
      "JobResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JobResponseData"
          }
        },
        "required": [
          "data"
        ],
        "description": "Single job response"
      },
      "JobListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobResponseData"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/TenantListResponseMeta"
          }
        },
        "required": [
          "data",
          "meta"
        ],
        "description": "List of jobs with pagination"
      },
      "FeedbackCreate": {
        "type": "object",
        "properties": {
          "rating": {
            "$ref": "#/components/schemas/FeedbackRatingEnum"
          },
          "content": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 4000
          }
        },
        "required": [
          "rating"
        ],
        "description": "Schema for creating feedback"
      },
      "FeedbackResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Feedback"
          }
        },
        "required": [
          "data"
        ],
        "description": "Single feedback response"
      },
      "FeedbackListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Feedback"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/TenantListResponseMeta"
          }
        },
        "required": [
          "data",
          "meta"
        ],
        "description": "List of feedback with pagination"
      },
      "DataSourceCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/DataSourceTypeEnum"
          },
          "intervalType": {
            "$ref": "#/components/schemas/DataSourceIntervalTypeEnum"
          },
          "intervalValue": {
            "type": "number",
            "minimum": 1,
            "maximum": 365
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "vectorDatabaseId": {
            "type": "string",
            "nullable": true
          },
          "vectorIndexId": {
            "type": "string",
            "nullable": true
          },
          "embedModelId": {
            "type": "string",
            "nullable": true
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "targetUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "type",
          "intervalType",
          "intervalValue"
        ],
        "description": "Schema for creating a new data source (tenantId from path)"
      },
      "DataSourceUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "type": {
            "$ref": "#/components/schemas/DataSourceTypeEnum"
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "vectorDatabaseId": {
            "type": "string",
            "nullable": true
          },
          "vectorIndexId": {
            "type": "string",
            "nullable": true
          },
          "embedModelId": {
            "type": "string",
            "nullable": true
          },
          "intervalType": {
            "$ref": "#/components/schemas/DataSourceIntervalTypeEnum"
          },
          "intervalValue": {
            "type": "number",
            "minimum": 1,
            "maximum": 365
          },
          "targetUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Schema for updating a data source"
      },
      "DataSourceEventCreate": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DataSourceEventCreateTypeEnum"
          },
          "message": {
            "type": "string",
            "minLength": 1,
            "maxLength": 1000
          },
          "metadata": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "documentId": {
            "type": "string",
            "nullable": true
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "type",
          "message"
        ],
        "description": "Schema for creating a data source event"
      },
      "DataSourceResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DataSourceResponseData"
          }
        },
        "required": [
          "data"
        ],
        "description": "Single data source response"
      },
      "DataSourceListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSourceListResponseDataItem"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/TenantListResponseMeta"
          }
        },
        "required": [
          "data",
          "meta"
        ],
        "description": "List of data sources with pagination"
      },
      "DataSourceEvent": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DataSourceEventCreateTypeEnum"
          },
          "id": {
            "type": "string"
          },
          "dataSourceId": {
            "type": "string"
          },
          "message": {
            "type": "string",
            "minLength": 1,
            "maxLength": 1000
          },
          "metadata": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "costs": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "documentId": {
            "type": "string",
            "nullable": true
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          }
        },
        "required": [
          "type",
          "id",
          "dataSourceId",
          "message",
          "costs",
          "createdAt",
          "updatedAt"
        ],
        "description": "Data source event"
      },
      "AgentDataSourceCreate": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 1000
          },
          "instructions": {
            "type": "string",
            "nullable": true,
            "maxLength": 10000
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "dataSourceId": {
            "type": "string"
          }
        },
        "required": [
          "dataSourceId"
        ],
        "description": "Schema for creating agent data source binding"
      },
      "AgentDataSourceUpdate": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 1000
          },
          "instructions": {
            "type": "string",
            "nullable": true,
            "maxLength": 10000
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          }
        },
        "description": "Schema for updating agent data source binding"
      },
      "AgentDataSourceResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AgentDataSourceResponseData"
          }
        },
        "required": [
          "data"
        ],
        "description": "Single agent data source response"
      },
      "AgentDataSourceListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentDataSourceResponseData"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/TenantListResponseMeta"
          }
        },
        "required": [
          "data",
          "meta"
        ],
        "description": "List of agent data sources with pagination"
      },
      "EmbeddingResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EmbeddingResponseData"
          }
        },
        "required": [
          "data"
        ],
        "description": "Single embedding response"
      },
      "EmbeddingListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmbeddingResponseData"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/TenantListResponseMeta"
          }
        },
        "required": [
          "data",
          "meta"
        ],
        "description": "List of embeddings with pagination"
      },
      "FoundationModelCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "internalName": {
            "type": "string",
            "minLength": 1
          },
          "type": {
            "$ref": "#/components/schemas/FoundationModelTypeEnum"
          },
          "vendor": {
            "$ref": "#/components/schemas/EmbeddingVendorEnum"
          },
          "contextWindow": {
            "type": "number",
            "minimum": 1
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "maxOutput": {
            "type": "number",
            "nullable": true
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          }
        },
        "required": [
          "name",
          "internalName",
          "type",
          "vendor",
          "contextWindow"
        ],
        "description": "Schema for creating a foundation model"
      },
      "FoundationModelUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "internalName": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/FoundationModelTypeEnum"
          },
          "vendor": {
            "$ref": "#/components/schemas/EmbeddingVendorEnum"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "contextWindow": {
            "type": "number"
          },
          "maxOutput": {
            "type": "number",
            "nullable": true
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          }
        },
        "description": "Schema for updating a foundation model"
      },
      "FoundationModelResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/FoundationModelResponseData"
          }
        },
        "required": [
          "data"
        ],
        "description": "Single foundation model response"
      },
      "FoundationModelListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FoundationModelResponseData"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/TenantListResponseMeta"
          }
        },
        "required": [
          "data",
          "meta"
        ],
        "description": "List of foundation models with pagination"
      },
      "VectorDatabaseCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/VectorDatabaseTypeEnum"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "tenantId": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "name",
          "type"
        ],
        "description": "Schema for creating a vector database"
      },
      "VectorDatabaseUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/VectorDatabaseTypeEnum"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "tenantId": {
            "type": "string",
            "nullable": true
          }
        },
        "description": "Schema for updating a vector database"
      },
      "VectorDatabaseResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/VectorDatabaseResponseData"
          }
        },
        "required": [
          "data"
        ],
        "description": "Single vector database response"
      },
      "VectorDatabaseListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VectorDatabaseResponseData"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/TenantListResponseMeta"
          }
        },
        "required": [
          "data",
          "meta"
        ],
        "description": "List of vector databases with pagination"
      },
      "VectorIndexCreateBodySchema": {
        "type": "object",
        "properties": {
          "dimension": {
            "type": "number",
            "minimum": 1
          },
          "metric": {
            "$ref": "#/components/schemas/VectorIndexMetricEnum"
          },
          "embedModelId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          }
        },
        "required": [
          "dimension"
        ],
        "description": "Schema for creating a vector index"
      },
      "VectorIndexUpdateBodySchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "embedModelId": {
            "type": "string",
            "nullable": true
          },
          "dimension": {
            "type": "number",
            "minimum": 1
          },
          "metric": {
            "$ref": "#/components/schemas/VectorIndexMetricEnum"
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          }
        },
        "description": "Schema for updating a vector index"
      },
      "VectorIndexResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/VectorIndexResponseData"
          }
        },
        "required": [
          "data"
        ],
        "description": "Single vector index response"
      },
      "VectorIndexListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VectorIndexResponseData"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/TenantListResponseMeta"
          }
        },
        "required": [
          "data",
          "meta"
        ],
        "description": "List of vector indices with pagination"
      },
      "ChangePasswordSchema": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "cuid"
          },
          "newPassword": {
            "type": "string",
            "minLength": 8,
            "maxLength": 40
          }
        },
        "required": [
          "userId",
          "newPassword"
        ],
        "description": "Schema for changing password"
      },
      "ChangePasswordResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ChangePasswordResponseData"
          }
        },
        "required": [
          "data"
        ],
        "description": "Password change response"
      },
      "JobExecutionCreate": {
        "type": "object",
        "properties": {
          "attemptNumber": {
            "type": "integer"
          },
          "status": {
            "$ref": "#/components/schemas/JobStatus"
          },
          "duration": {
            "type": "integer",
            "nullable": true
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "logs": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "attemptNumber",
          "status"
        ],
        "description": "Schema for creating a job execution"
      },
      "JobExecutionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JobExecution"
          }
        },
        "required": [
          "data"
        ],
        "description": "Single job execution response"
      },
      "JobExecutionListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobExecution"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/TenantListResponseMeta"
          }
        },
        "required": [
          "data",
          "meta"
        ],
        "description": "List of job executions with pagination"
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "$ref": "#/components/schemas/JsonValue"
          }
        },
        "required": [
          "error",
          "message"
        ],
        "description": "Standard error response"
      },
      "JsonResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "data"
        ],
        "description": "Generic JSON response"
      },
      "JobCreateBodySchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/JobType"
          },
          "attempts": {
            "type": "integer"
          },
          "completedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "dataSourceId": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "lastRun": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "maxAttempts": {
            "type": "integer"
          },
          "nextRun": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "priority": {
            "$ref": "#/components/schemas/JobPriorityEnum"
          },
          "queue": {
            "type": "string"
          },
          "result": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "scheduled": {
            "type": "boolean"
          },
          "startedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "timeout": {
            "type": "integer"
          }
        },
        "required": [
          "name",
          "type"
        ],
        "description": "Job creation request body"
      },
      "DataSourceCreateBodySchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/DataSourceTypeEnum"
          },
          "intervalType": {
            "$ref": "#/components/schemas/DataSourceIntervalTypeEnum"
          },
          "intervalValue": {
            "type": "number",
            "minimum": 1,
            "maximum": 365
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "vectorDatabaseId": {
            "type": "string",
            "nullable": true
          },
          "vectorIndexId": {
            "type": "string",
            "nullable": true
          },
          "embedModelId": {
            "type": "string",
            "nullable": true
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "targetUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "type",
          "intervalType",
          "intervalValue"
        ],
        "description": "Data source creation request body"
      },
      "CleanDocumentRequest": {
        "type": "object",
        "properties": {
          "documentId": {
            "type": "string"
          },
          "options": {
            "$ref": "#/components/schemas/JsonValue"
          }
        },
        "required": [
          "documentId"
        ],
        "description": "Clean document request"
      },
      "CleanDocumentResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "documentId": {
            "type": "string"
          },
          "cleanedText": {
            "type": "string"
          }
        },
        "required": [
          "success",
          "documentId"
        ],
        "description": "Clean document response"
      },
      "Error422ValidationErrorsItem": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "description": "Field name that failed validation"
          },
          "message": {
            "type": "string",
            "description": "Validation error message"
          },
          "code": {
            "type": "string",
            "description": "Validation error code"
          }
        },
        "required": [
          "field",
          "message",
          "code"
        ]
      },
      "UserUserSettings": {
        "type": "object",
        "nullable": true,
        "properties": {
          "socialAccounts": {
            "$ref": "#/components/schemas/UserUserSettingsSocialAccounts"
          }
        }
      },
      "AgentResponseCount": {
        "type": "object",
        "properties": {
          "functions": {
            "type": "number"
          },
          "datasources": {
            "type": "number"
          },
          "chats": {
            "type": "number"
          }
        }
      },
      "AgentResponseTenant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "AgentResponseDatasourcesItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 1000
          }
        },
        "required": [
          "id"
        ]
      },
      "AgentResponseChatsItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          }
        },
        "required": [
          "id",
          "createdAt"
        ]
      },
      "AgentListResponseItem": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AgentTypeEnum"
          },
          "id": {
            "type": "string"
          },
          "revision": {
            "type": "integer",
            "minimum": 0
          },
          "tenantId": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 2000
          },
          "instructions": {
            "type": "string",
            "nullable": true,
            "maxLength": 200000
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "_count": {
            "$ref": "#/components/schemas/AgentResponseCount"
          },
          "tenant": {
            "$ref": "#/components/schemas/AgentResponseTenant"
          },
          "functions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentResponseTenant"
            }
          },
          "datasources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentResponseDatasourcesItem"
            }
          },
          "chats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentResponseChatsItem"
            }
          }
        },
        "required": [
          "type",
          "id",
          "revision",
          "tenantId",
          "name",
          "createdAt",
          "updatedAt"
        ]
      },
      "AgentConfigResponseData": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          }
        }
      },
      "AgentChatLinkResponseData": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          }
        },
        "required": [
          "url"
        ]
      },
      "TenantResponseData": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/TenantStatusEnum"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "domain": {
            "type": "string",
            "minLength": 3,
            "maxLength": 255
          },
          "settings": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "theme": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "active": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          }
        },
        "required": [
          "status",
          "id",
          "name",
          "domain",
          "theme",
          "active",
          "createdAt",
          "updatedAt"
        ]
      },
      "TenantListResponseDataItem": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/TenantStatusEnum"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "domain": {
            "type": "string",
            "minLength": 3,
            "maxLength": 255
          },
          "settings": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "theme": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "active": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "_count": {
            "$ref": "#/components/schemas/TenantListResponseDataItemCount"
          }
        },
        "required": [
          "status",
          "id",
          "name",
          "domain",
          "theme",
          "active",
          "createdAt",
          "updatedAt",
          "_count"
        ]
      },
      "TenantListResponseMeta": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "minimum": 0
          },
          "pageSize": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "total": {
            "type": "integer",
            "minimum": 0
          },
          "totalPages": {
            "type": "integer",
            "minimum": 0
          },
          "nextCursor": {
            "type": "string"
          },
          "prevCursor": {
            "type": "string"
          },
          "hasNext": {
            "type": "boolean"
          },
          "hasPrevious": {
            "type": "boolean"
          }
        }
      },
      "UserResponseData": {
        "type": "object",
        "properties": {
          "role": {
            "$ref": "#/components/schemas/UserRole"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "nullable": true,
            "minLength": 8
          },
          "salt": {
            "type": "string",
            "nullable": true
          },
          "emailVerified": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "image": {
            "type": "string",
            "nullable": true,
            "format": "uri"
          },
          "lastLoginAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "tenantId": {
            "type": "string"
          },
          "userSettings": {
            "$ref": "#/components/schemas/UserUserSettings"
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          }
        },
        "required": [
          "role",
          "id",
          "name",
          "email",
          "tenantId",
          "createdAt",
          "updatedAt"
        ]
      },
      "DocumentResponseData": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/DocumentStatusEnum"
          },
          "type": {
            "$ref": "#/components/schemas/DocumentTypeEnum"
          },
          "id": {
            "type": "string"
          },
          "dataSourceId": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "mimeType": {
            "type": "string",
            "nullable": true
          },
          "size": {
            "type": "number",
            "nullable": true,
            "minimum": 0
          },
          "binary": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "markdown": {
            "type": "string",
            "nullable": true
          },
          "html": {
            "type": "string",
            "nullable": true
          },
          "hash": {
            "type": "string",
            "nullable": true
          },
          "lastModified": {
            "type": "string",
            "nullable": true
          },
          "etag": {
            "type": "string",
            "nullable": true
          },
          "tokens": {
            "type": "number",
            "nullable": true,
            "minimum": 0
          },
          "metadata": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          }
        },
        "required": [
          "status",
          "type",
          "id",
          "dataSourceId",
          "url",
          "createdAt",
          "updatedAt"
        ]
      },
      "MessageListResponseDataItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "chatId": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "userId": {
            "type": "string",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "tokens": {
            "$ref": "#/components/schemas/JsonValue"
          }
        },
        "required": [
          "id",
          "chatId",
          "role",
          "message",
          "createdAt"
        ]
      },
      "ChatResponseData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          },
          "agentId": {
            "type": "string"
          },
          "info": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "tokens": {
            "$ref": "#/components/schemas/JsonValue"
          }
        },
        "required": [
          "id",
          "tenantId",
          "agentId",
          "info",
          "createdAt",
          "updatedAt",
          "tokens"
        ]
      },
      "JobResponseData": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/JobType"
          },
          "status": {
            "$ref": "#/components/schemas/JobStatus"
          },
          "priority": {
            "$ref": "#/components/schemas/JobPriorityEnum"
          },
          "id": {
            "type": "string"
          },
          "tenantId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "queue": {
            "type": "string"
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "result": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "scheduled": {
            "type": "boolean"
          },
          "nextRun": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "lastRun": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "attempts": {
            "type": "integer"
          },
          "maxAttempts": {
            "type": "integer"
          },
          "timeout": {
            "type": "integer"
          },
          "dataSourceId": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "startedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "completedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          }
        },
        "required": [
          "type",
          "status",
          "priority",
          "id",
          "name",
          "queue",
          "result",
          "scheduled",
          "attempts",
          "maxAttempts",
          "timeout",
          "createdAt",
          "updatedAt"
        ]
      },
      "DataSourceResponseData": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DataSourceTypeEnum"
          },
          "intervalType": {
            "$ref": "#/components/schemas/DataSourceIntervalTypeEnum"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "tenantId": {
            "type": "string",
            "nullable": true
          },
          "vectorDatabaseId": {
            "type": "string",
            "nullable": true
          },
          "vectorIndexId": {
            "type": "string",
            "nullable": true
          },
          "embedModelId": {
            "type": "string",
            "nullable": true
          },
          "intervalValue": {
            "type": "number",
            "minimum": 1,
            "maximum": 365
          },
          "targetUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "settings": {
            "$ref": "#/components/schemas/JsonValue"
          }
        },
        "required": [
          "type",
          "intervalType",
          "id",
          "name",
          "intervalValue",
          "targetUrls",
          "createdAt",
          "updatedAt"
        ]
      },
      "DataSourceListResponseDataItem": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DataSourceTypeEnum"
          },
          "intervalType": {
            "$ref": "#/components/schemas/DataSourceIntervalTypeEnum"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "tenantId": {
            "type": "string",
            "nullable": true
          },
          "vectorDatabaseId": {
            "type": "string",
            "nullable": true
          },
          "vectorIndexId": {
            "type": "string",
            "nullable": true
          },
          "embedModelId": {
            "type": "string",
            "nullable": true
          },
          "intervalValue": {
            "type": "number",
            "minimum": 1,
            "maximum": 365
          },
          "targetUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "settings": {
            "$ref": "#/components/schemas/JsonValue"
          }
        }
      },
      "AgentDataSourceResponseData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "agentId": {
            "type": "string"
          },
          "dataSourceId": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 1000
          },
          "instructions": {
            "type": "string",
            "nullable": true,
            "maxLength": 10000
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          }
        },
        "required": [
          "id",
          "agentId",
          "dataSourceId"
        ]
      },
      "EmbeddingResponseData": {
        "type": "object",
        "properties": {
          "vendor": {
            "$ref": "#/components/schemas/EmbeddingVendorEnum"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "internalName": {
            "type": "string"
          },
          "dimension": {
            "type": "number",
            "minimum": 1
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          }
        },
        "required": [
          "vendor",
          "id",
          "name",
          "internalName",
          "dimension",
          "createdAt",
          "updatedAt"
        ]
      },
      "FoundationModelResponseData": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/FoundationModelTypeEnum"
          },
          "vendor": {
            "$ref": "#/components/schemas/EmbeddingVendorEnum"
          },
          "id": {
            "type": "string"
          },
          "alias": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 16
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "internalName": {
            "type": "string",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "contextWindow": {
            "type": "number",
            "minimum": 1
          },
          "maxOutput": {
            "type": "number",
            "nullable": true,
            "minimum": 1
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "knowledgeCutOff": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "type",
          "vendor",
          "id",
          "name",
          "internalName",
          "contextWindow",
          "createdAt",
          "updatedAt"
        ]
      },
      "VectorDatabaseResponseData": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/VectorDatabaseTypeEnum"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "tenantId": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          }
        },
        "required": [
          "type",
          "id",
          "name",
          "createdAt",
          "updatedAt"
        ]
      },
      "VectorIndexResponseData": {
        "type": "object",
        "properties": {
          "metric": {
            "$ref": "#/components/schemas/VectorIndexMetricEnum"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "dimension": {
            "type": "number",
            "minimum": 1
          },
          "config": {
            "$ref": "#/components/schemas/JsonValue"
          },
          "vectorDatabaseId": {
            "type": "string"
          },
          "embedModelId": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "format": "date"
          }
        },
        "required": [
          "id",
          "name",
          "dimension",
          "vectorDatabaseId",
          "createdAt",
          "updatedAt"
        ]
      },
      "ChangePasswordResponseData": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "PostApiAuthLoginRequestBody": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "minLength": 8,
            "example": "securePassword123"
          },
          "tenantId": {
            "type": "string",
            "description": "Optional tenant ID (can be derived from hostname)",
            "example": "clh1234567890abcdef"
          }
        }
      },
      "PostApiAuthLoginResponse200": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "$ref": "#/components/schemas/PostApiAuthLoginResponse200Data"
          }
        }
      },
      "PostApiAuthLogoutRequestBody": {
        "type": "object",
        "properties": {}
      },
      "PostApiAuthLogoutResponse200": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "$ref": "#/components/schemas/PostApiAuthLogoutResponse200Data"
          }
        }
      },
      "GetApiAuthValidateSessionResponse200": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "$ref": "#/components/schemas/GetApiAuthValidateSessionResponse200Data"
          }
        }
      },
      "PutEmbeddingsEmbedModelIdRequestBody": {
        "type": "object",
        "required": [
          "name",
          "internalName",
          "dimension"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name for the embedding"
          },
          "internalName": {
            "type": "string",
            "description": "Internal name for the embedding"
          },
          "description": {
            "type": "string",
            "description": "Description of the embedding"
          },
          "dimension": {
            "type": "integer",
            "description": "Dimension of the embedding vectors"
          },
          "config": {
            "$ref": "#/components/schemas/PostApiAuthLogoutRequestBody"
          }
        }
      },
      "GetEmbeddingsResponse200": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmbeddingResponse"
            }
          }
        }
      },
      "PutFoundationModelsModelIdRequestBody": {
        "type": "object",
        "required": [
          "name",
          "internalName",
          "type",
          "contextWindow"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name for the foundation model"
          },
          "internalName": {
            "type": "string",
            "description": "Internal name for the foundation model"
          },
          "type": {
            "$ref": "#/components/schemas/PutFoundationModelsModelIdRequestBodyTypeEnum"
          },
          "description": {
            "type": "string",
            "description": "Description of the foundation model"
          },
          "contextWindow": {
            "type": "integer",
            "description": "Context window size for the foundation model"
          },
          "maxOutput": {
            "type": "integer",
            "description": "Maximum output size for the foundation model"
          },
          "config": {
            "$ref": "#/components/schemas/PostApiAuthLogoutRequestBody"
          }
        }
      },
      "GetHealthResponse200": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/GetHealthResponse200StatusEnum"
          },
          "services": {
            "$ref": "#/components/schemas/GetHealthResponse200Services"
          },
          "timestamp": {
            "type": "integer"
          },
          "uptimes": {
            "$ref": "#/components/schemas/GetHealthResponse200Uptimes"
          }
        }
      },
      "GetHealthResponse503": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/GetHealthResponse503StatusEnum"
          },
          "services": {
            "$ref": "#/components/schemas/PostApiAuthLogoutRequestBody"
          },
          "timestamp": {
            "type": "integer"
          },
          "uptimes": {
            "$ref": "#/components/schemas/PostApiAuthLogoutRequestBody"
          }
        }
      },
      "PostJobsPlatformDetectorDetectRequestBody": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL of the website to detect platform for",
            "example": "https://wordpress.org"
          }
        }
      },
      "PostJobsPlatformDetectorDetectResponse200": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/PostJobsPlatformDetectorDetectResponse200StatusEnum"
          },
          "message": {
            "type": "string"
          },
          "result": {
            "$ref": "#/components/schemas/PostJobsPlatformDetectorDetectResponse200Result"
          }
        }
      },
      "GetMonitoringAlertsResponse200": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number"
          },
          "stats": {
            "$ref": "#/components/schemas/PostApiAuthLogoutRequestBody"
          },
          "alerts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetMonitoringAlertsResponse200AlertsItem"
            }
          }
        }
      },
      "PostMonitoringAlertsRequestBody": {
        "type": "object",
        "required": [
          "name",
          "metric",
          "condition",
          "severity"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Alert rule name"
          },
          "description": {
            "type": "string",
            "description": "Alert rule description"
          },
          "metric": {
            "type": "string",
            "description": "Metric name to monitor"
          },
          "condition": {
            "$ref": "#/components/schemas/PostApiAuthLogoutRequestBody"
          },
          "severity": {
            "$ref": "#/components/schemas/PostMonitoringAlertsRequestBodySeverityEnum"
          },
          "enabled": {
            "type": "boolean",
            "default": true
          }
        }
      },
      "PatchMonitoringAlertsAlertIdRequestBody": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/PatchMonitoringAlertsAlertIdRequestBodyActionEnum"
          },
          "comment": {
            "type": "string"
          }
        }
      },
      "GetMonitoringDashboardResponse200": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number",
            "description": "Response timestamp"
          },
          "timeRange": {
            "type": "string",
            "description": "Requested time range"
          },
          "system": {
            "$ref": "#/components/schemas/GetMonitoringDashboardResponse200System"
          },
          "metrics": {
            "$ref": "#/components/schemas/PostApiAuthLogoutRequestBody"
          },
          "alerts": {
            "$ref": "#/components/schemas/PostApiAuthLogoutRequestBody"
          },
          "health": {
            "$ref": "#/components/schemas/PostApiAuthLogoutRequestBody"
          }
        }
      },
      "PostMonitoringMetricsRequestBody": {
        "type": "object",
        "required": [
          "name",
          "value",
          "type"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Metric name"
          },
          "value": {
            "type": "number",
            "description": "Metric value"
          },
          "type": {
            "$ref": "#/components/schemas/PostMonitoringMetricsRequestBodyTypeEnum"
          },
          "labels": {
            "$ref": "#/components/schemas/PostApiAuthLogoutRequestBody"
          }
        }
      },
      "GetMonitoringValidationCacheResponse200": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number"
          },
          "caches": {
            "$ref": "#/components/schemas/PostApiAuthLogoutRequestBody"
          },
          "summary": {
            "$ref": "#/components/schemas/PostApiAuthLogoutRequestBody"
          }
        }
      },
      "PostMonitoringValidationCacheRequestBody": {
        "type": "object",
        "required": [
          "operation"
        ],
        "properties": {
          "operation": {
            "$ref": "#/components/schemas/PostMonitoringValidationCacheRequestBodyOperationEnum"
          },
          "cache": {
            "$ref": "#/components/schemas/PostMonitoringValidationCacheRequestBodyCacheEnum"
          },
          "pattern": {
            "type": "string",
            "description": "Pattern for invalidation (regex)"
          },
          "keys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Specific keys to invalidate"
          }
        }
      },
      "GetSessionStatsResponse200": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number"
          },
          "global": {
            "$ref": "#/components/schemas/GetSessionStatsResponse200Global"
          },
          "byTenant": {
            "$ref": "#/components/schemas/GetHealthResponse200Uptimes"
          },
          "tenant": {
            "$ref": "#/components/schemas/GetSessionStatsResponse200Tenant"
          },
          "user": {
            "$ref": "#/components/schemas/GetSessionStatsResponse200User"
          }
        }
      },
      "GetTenantsTenantIdAgentsAgentIdChatLinkResponse200": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatLinkResponse200Data"
          }
        }
      },
      "GetTenantsTenantIdAgentsAgentIdChatsChatIdMessagesMessageIdDebugResponse200": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsChatIdMessagesMessageIdDebugResponse200DataItem"
            }
          }
        }
      },
      "PostTenantsTenantIdAgentsAgentIdChatsChatIdMessagesMessageIdDebugRequestBody": {
        "type": "object",
        "required": [
          "messages"
        ],
        "properties": {
          "messages": {
            "type": "array",
            "description": "Array of debug messages",
            "items": {
              "$ref": "#/components/schemas/PostTenantsTenantIdAgentsAgentIdChatsChatIdMessagesMessageIdDebugRequestBodyMessagesItem"
            }
          }
        }
      },
      "PostTenantsTenantIdAgentsAgentIdChatsChatIdMessagesMessageIdDebugResponse200": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PostTenantsTenantIdAgentsAgentIdChatsChatIdMessagesMessageIdDebugResponse200Data"
          }
        }
      },
      "PostTenantsTenantIdAgentsAgentIdChatsChatIdMessagesMessageIdFeedbackRequestBody": {
        "type": "object",
        "required": [
          "rating"
        ],
        "properties": {
          "rating": {
            "$ref": "#/components/schemas/FeedbackRatingEnum"
          }
        }
      },
      "PostTenantsTenantIdAgentsAgentIdChatsChatIdMessagesBatchRequestBodyItem": {
        "type": "object",
        "required": [
          "message",
          "role"
        ],
        "properties": {
          "message": {
            "type": "string",
            "description": "The message content"
          },
          "role": {
            "$ref": "#/components/schemas/PostTenantsTenantIdAgentsAgentIdChatsChatIdMessagesBatchRequestBodyItemRoleEnum"
          },
          "tokens": {
            "$ref": "#/components/schemas/PostApiAuthLogoutRequestBody"
          }
        }
      },
      "PostTenantsTenantIdAgentsAgentIdChatsChatIdMessagesRequestBody": {
        "type": "object",
        "required": [
          "message",
          "role"
        ],
        "properties": {
          "message": {
            "type": "string",
            "description": "The message content"
          },
          "role": {
            "$ref": "#/components/schemas/PostTenantsTenantIdAgentsAgentIdChatsChatIdMessagesBatchRequestBodyItemRoleEnum"
          }
        }
      },
      "GetTenantsTenantIdAgentsAgentIdChatsResponse200": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsResponse200Data"
          }
        }
      },
      "GetTenantsTenantIdAgentsAgentIdChatsStreamResponse400": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsStreamResponse400TypeEnum"
          },
          "data": {
            "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsStreamResponse400Data"
          }
        }
      },
      "GetTenantsTenantIdAgentsAgentIdChatsStreamResponse429": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsStreamResponse400TypeEnum"
          },
          "data": {
            "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsStreamResponse429Data"
          }
        }
      },
      "GetTenantsTenantIdAgentsAgentIdChatsStreamResponse500": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsStreamResponse400TypeEnum"
          },
          "data": {
            "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsStreamResponse500Data"
          }
        }
      },
      "PutTenantsTenantIdAgentsAgentIdDatasourcesDataSourceIdRequestBody": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "instructions": {
            "type": "string"
          },
          "config": {
            "$ref": "#/components/schemas/PostApiAuthLogoutRequestBody"
          }
        }
      },
      "PostTenantsTenantIdAgentsAgentIdDatasourcesRequestBody": {
        "type": "object",
        "required": [
          "dataSourceId"
        ],
        "properties": {
          "dataSourceId": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "instructions": {
            "type": "string"
          },
          "config": {
            "$ref": "#/components/schemas/PostApiAuthLogoutRequestBody"
          }
        }
      },
      "PostTenantsTenantIdAgentsAgentIdRevisionsRevisionRestoreResponse200AllOf": {
        "type": "object",
        "properties": {
          "revision": {
            "type": "integer",
            "description": "The revision number the agent was restored to"
          }
        }
      },
      "PatchTenantsTenantIdAgentsAgentIdRequestBody": {
        "type": "object",
        "required": [
          "field",
          "updates"
        ],
        "properties": {
          "field": {
            "$ref": "#/components/schemas/PatchTenantsTenantIdAgentsAgentIdRequestBodyFieldEnum"
          },
          "updates": {
            "type": "array",
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/PatchTenantsTenantIdAgentsAgentIdRequestBodyUpdatesItem"
            }
          }
        }
      },
      "GetTenantsTenantIdAnalyticsChatStatsResponse200": {
        "type": "object",
        "properties": {
          "totalChats": {
            "type": "integer",
            "description": "Total number of chats",
            "example": 150
          },
          "totalMessages": {
            "type": "integer",
            "description": "Total number of messages across all chats",
            "example": 750
          },
          "averageMessagesPerChat": {
            "type": "number",
            "format": "float",
            "description": "Average number of messages per chat",
            "example": 5
          },
          "feedback": {
            "$ref": "#/components/schemas/GetTenantsTenantIdAnalyticsChatStatsResponse200Feedback"
          },
          "agentStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetTenantsTenantIdAnalyticsChatStatsResponse200AgentStatsItem"
            }
          }
        }
      },
      "PostApiTenantsTenantIdDatasourcesDataSourceIdDocumentsDocumentIdReindexRequestBody": {
        "type": "object",
        "properties": {
          "forceReindex": {
            "type": "boolean",
            "default": false
          },
          "indexingConfig": {
            "$ref": "#/components/schemas/PostApiTenantsTenantIdDatasourcesDataSourceIdDocumentsDocumentIdReindexRequestBodyIndexingConfig"
          }
        }
      },
      "PutTenantsTenantIdDatasourcesDataSourceIdDocumentsDocumentIdRequestBody": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "description": "The URL of the source document"
          },
          "type": {
            "$ref": "#/components/schemas/PutTenantsTenantIdDatasourcesDataSourceIdDocumentsDocumentIdRequestBodyTypeEnum"
          },
          "mimeType": {
            "type": "string",
            "description": "The MIME type of the document"
          },
          "markdown": {
            "type": "string",
            "description": "The markdown content of the document"
          },
          "html": {
            "type": "string",
            "description": "The HTML content of the document"
          },
          "lastModified": {
            "type": "string",
            "format": "date-time",
            "description": "The last modified information from the source"
          },
          "etag": {
            "type": "string",
            "description": "The etag information from the source"
          },
          "metadata": {
            "$ref": "#/components/schemas/PutTenantsTenantIdDatasourcesDataSourceIdDocumentsDocumentIdRequestBodyMetadata"
          }
        }
      },
      "PostApiTenantsTenantIdDatasourcesDataSourceIdDocumentsDocumentIdSplitRequestBody": {
        "type": "object",
        "required": [
          "content"
        ],
        "properties": {
          "content": {
            "type": "string",
            "description": "Markdown content to split"
          },
          "config": {
            "$ref": "#/components/schemas/PostApiTenantsTenantIdDatasourcesDataSourceIdDocumentsDocumentIdSplitRequestBodyConfig"
          }
        }
      },
      "PostApiTenantsTenantIdDatasourcesDataSourceIdDocumentsDocumentIdSplitResponse200": {
        "type": "object",
        "properties": {
          "chunks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostApiTenantsTenantIdDatasourcesDataSourceIdDocumentsDocumentIdSplitResponse200ChunksItem"
            }
          },
          "statistics": {
            "$ref": "#/components/schemas/PostApiTenantsTenantIdDatasourcesDataSourceIdDocumentsDocumentIdSplitResponse200Statistics"
          }
        }
      },
      "PostTenantsTenantIdDatasourcesDataSourceIdDocumentsBulkUpdateMetadataRequestBody": {
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "description": "Custom instructions for AI metadata generation"
          }
        }
      },
      "PostTenantsTenantIdDatasourcesDataSourceIdDocumentsBulkUpdateMetadataResponse200": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "processed": {
            "type": "number"
          },
          "updated": {
            "type": "number"
          },
          "failed": {
            "type": "number"
          }
        }
      },
      "GetTenantsTenantIdDatasourcesDataSourceIdDocumentsCountResponse200": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number"
          }
        }
      },
      "PostTenantsTenantIdDatasourcesDataSourceIdDocumentsIndexBatchResponse200": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/PostTenantsTenantIdDatasourcesDataSourceIdDocumentsIndexBatchResponse200StatusEnum"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant identifier"
          },
          "datasource_id": {
            "type": "string",
            "description": "Data source identifier"
          },
          "queued_count": {
            "type": "number",
            "description": "Number of documents enqueued for indexing"
          },
          "total_documents": {
            "type": "number",
            "description": "Total number of documents in the data source"
          },
          "message": {
            "type": "string",
            "description": "Human-readable status message"
          }
        }
      },
      "PostTenantsTenantIdDatasourcesDataSourceIdDocumentsLogRequestBody": {
        "type": "object",
        "required": [
          "type",
          "message"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DataSourceEventCreateTypeEnum"
          },
          "message": {
            "type": "string",
            "description": "Human-readable description of the event"
          },
          "metadata": {
            "$ref": "#/components/schemas/PostApiAuthLogoutRequestBody"
          },
          "documentId": {
            "type": "string",
            "description": "Optional reference to affected document"
          },
          "error": {
            "type": "string",
            "description": "Optional error message if type is 'error'"
          },
          "costs": {
            "$ref": "#/components/schemas/PostTenantsTenantIdDatasourcesDataSourceIdDocumentsLogRequestBodyCosts"
          }
        }
      },
      "PostTenantsTenantIdDatasourcesDataSourceIdDocumentsLogResponse200": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DataSourceEvent"
          }
        }
      },
      "PostTenantsTenantIdDatasourcesDataSourceIdDocumentsRequestBody": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary"
          },
          "data": {
            "type": "string",
            "description": "JSON string with additional metadata"
          }
        }
      },
      "PostTenantsTenantIdDatasourcesDataSourceIdDocumentsSyncRequestBody": {
        "type": "object",
        "required": [
          "type",
          "url"
        ],
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "description": "URL to match for create/update decision"
          },
          "type": {
            "$ref": "#/components/schemas/PutTenantsTenantIdDatasourcesDataSourceIdDocumentsDocumentIdRequestBodyTypeEnum"
          },
          "mimeType": {
            "type": "string"
          },
          "markdown": {
            "type": "string",
            "description": "Processed markdown content"
          },
          "html": {
            "type": "string",
            "description": "Original HTML content"
          },
          "lastModified": {
            "type": "string",
            "description": "Last modified timestamp from source"
          },
          "etag": {
            "type": "string",
            "description": "ETag from source for change detection"
          },
          "metadata": {
            "$ref": "#/components/schemas/PostApiAuthLogoutRequestBody"
          }
        }
      },
      "PostTenantsTenantIdDatasourcesDataSourceIdDocumentsSyncResponse200": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Document"
          },
          "syncResult": {
            "$ref": "#/components/schemas/PostTenantsTenantIdDatasourcesDataSourceIdDocumentsSyncResponse200SyncResult"
          }
        }
      },
      "GetTenantsTenantIdDatasourcesDataSourceIdEventsResponse200": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSourceEvent"
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor for the next page"
          },
          "hasMore": {
            "type": "boolean",
            "description": "Whether there are more events to fetch"
          }
        }
      },
      "PostTenantsTenantIdDatasourcesDataSourceIdFlushResponse200": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "datasourceId": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "filesDeleted": {
            "type": "number"
          },
          "foldersDeleted": {
            "type": "number"
          }
        }
      },
      "PostTenantsTenantIdAgentsAgentIdDatasourcesDataSourceIdSearchRequestBody": {
        "type": "object",
        "properties": {
          "searchPhrase": {
            "type": "string",
            "description": "The search phrase to be elaborated."
          },
          "instructions": {
            "type": "string",
            "description": "AI instructions for the search process."
          }
        },
        "required": [
          "searchPhrase",
          "instructions"
        ]
      },
      "PostTenantsTenantIdAgentsAgentIdDatasourcesDataSourceIdSearchResponse200": {
        "type": "object",
        "properties": {
          "embeddings": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Vector embedding arrays."
          },
          "elaboratedSearchPhrases": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The elaborated search phrases."
          },
          "searchResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostApiAuthLogoutRequestBody"
            },
            "description": "The search results from the agent datasource."
          }
        }
      },
      "PostApiTenantsTenantIdDatasourcesDataSourceIdTestCleanDocumentRequestBody": {
        "type": "object",
        "required": [
          "url"
        ],
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "description": "URL of the document to clean"
          },
          "datasource_id": {
            "type": "string",
            "description": "Data source ID (auto-populated from path)"
          },
          "config": {
            "$ref": "#/components/schemas/PostApiAuthLogoutRequestBody"
          },
          "original_html": {
            "type": "string",
            "description": "Original HTML content (for comparison)"
          }
        }
      },
      "PostApiTenantsTenantIdDatasourcesDataSourceIdTestCleanDocumentResponse200": {
        "type": "object",
        "properties": {
          "html": {
            "type": "string",
            "description": "Cleaned HTML content"
          },
          "markdown": {
            "type": "string",
            "description": "Markdown version of content"
          },
          "original_html": {
            "type": "string",
            "description": "Original HTML for comparison"
          },
          "metadata": {
            "$ref": "#/components/schemas/PostApiAuthLogoutRequestBody"
          }
        }
      },
      "PostScraperCrawlRequestBody": {
        "type": "object",
        "required": [
          "urls"
        ],
        "properties": {
          "urls": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "minItems": 1,
            "maxItems": 100,
            "description": "List of URLs to scrape"
          },
          "config": {
            "$ref": "#/components/schemas/PostScraperCrawlRequestBodyConfig"
          }
        }
      },
      "PostScraperCrawlResponse201": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/PostScraperCrawlResponse201Data"
          }
        }
      },
      "PutTenantsTenantIdUsersIdRequestBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's full name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "role": {
            "type": "string",
            "description": "User's role"
          },
          "image": {
            "type": "string",
            "description": "User's image"
          },
          "password": {
            "type": "string",
            "description": "User's password"
          }
        }
      },
      "GetTenantsTenantIdUsersCheckEmailResponse200": {
        "type": "object",
        "properties": {
          "available": {
            "type": "boolean",
            "description": "Whether the email is available (not in use)"
          }
        }
      },
      "GetApiTenantsTenantIdValidateDomainResponse200": {
        "type": "object",
        "properties": {
          "exists": {
            "type": "boolean",
            "description": "Whether the tenant exists",
            "example": true
          },
          "tenant": {
            "$ref": "#/components/schemas/GetApiTenantsTenantIdValidateDomainResponse200Tenant"
          }
        }
      },
      "GetTenantsResponse200": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetTenantsResponse200DataItem"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/GetTenantsResponse200Meta"
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "GetApiTenantsValidateResponse200": {
        "type": "object",
        "properties": {
          "exists": {
            "type": "boolean",
            "description": "Whether the domain exists",
            "example": true
          },
          "tenant": {
            "$ref": "#/components/schemas/GetApiTenantsValidateResponse200Tenant"
          }
        }
      },
      "PostVectorDatabasesVectorDatabaseIdIndicesResponse201": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/VectorIndex"
          }
        }
      },
      "UserUserSettingsSocialAccounts": {
        "type": "object",
        "properties": {
          "google": {
            "type": "string"
          },
          "slack": {
            "type": "string"
          },
          "clickUp": {
            "type": "string"
          }
        }
      },
      "TenantListResponseDataItemCount": {
        "type": "object",
        "properties": {
          "users": {
            "type": "number"
          },
          "agents": {
            "type": "number"
          },
          "dataSources": {
            "type": "number"
          }
        }
      },
      "PostApiAuthLoginResponse200Data": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT token for API authentication",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "user": {
            "$ref": "#/components/schemas/PostApiAuthLoginResponse200DataUser"
          }
        }
      },
      "PostApiAuthLogoutResponse200Data": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Logged out successfully"
          }
        }
      },
      "GetApiAuthValidateSessionResponse200Data": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/PostApiAuthLoginResponse200DataUser"
          }
        }
      },
      "GetHealthResponse200Services": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "enum": [
                "healthy",
                "unhealthy"
              ]
            },
            "message": {
              "type": "string",
              "nullable": true
            }
          }
        }
      },
      "GetHealthResponse200Uptimes": {
        "type": "object",
        "additionalProperties": {
          "type": "number"
        }
      },
      "PostJobsPlatformDetectorDetectResponse200Result": {
        "type": "object",
        "properties": {
          "platform": {
            "type": "string"
          },
          "confidence": {
            "type": "number"
          },
          "robotsExists": {
            "type": "boolean"
          },
          "sitemapExists": {
            "type": "boolean"
          }
        }
      },
      "GetMonitoringAlertsResponse200AlertsItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "timestamp": {
            "type": "number"
          },
          "resolved": {
            "type": "boolean"
          }
        }
      },
      "GetMonitoringDashboardResponse200System": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/GetMonitoringDashboardResponse200SystemStatusEnum"
          },
          "uptime": {
            "type": "number",
            "description": "System uptime in seconds"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "GetSessionStatsResponse200Global": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number"
          },
          "active": {
            "type": "number"
          },
          "expired": {
            "type": "number"
          },
          "avgRotations": {
            "type": "number"
          }
        }
      },
      "GetSessionStatsResponse200Tenant": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string"
          },
          "total": {
            "type": "number"
          },
          "active": {
            "type": "number"
          },
          "expired": {
            "type": "number"
          },
          "sessions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetSessionStatsResponse200TenantSessionsItem"
            }
          }
        }
      },
      "GetSessionStatsResponse200User": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "total": {
            "type": "number"
          },
          "active": {
            "type": "number"
          },
          "expired": {
            "type": "number"
          },
          "sessions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetSessionStatsResponse200UserSessionsItem"
            }
          }
        }
      },
      "GetTenantsTenantIdAgentsAgentIdChatLinkResponse200Data": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The public chat URL for the agent"
          }
        }
      },
      "GetTenantsTenantIdAgentsAgentIdChatsChatIdMessagesMessageIdDebugResponse200DataItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "messageId": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsChatIdMessagesMessageIdDebugResponse200DataItemTypeEnum"
          },
          "content": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "PostTenantsTenantIdAgentsAgentIdChatsChatIdMessagesMessageIdDebugRequestBodyMessagesItem": {
        "type": "object",
        "required": [
          "content",
          "type"
        ],
        "properties": {
          "content": {
            "type": "string",
            "description": "The debug message content"
          },
          "type": {
            "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsChatIdMessagesMessageIdDebugResponse200DataItemTypeEnum"
          }
        }
      },
      "PostTenantsTenantIdAgentsAgentIdChatsChatIdMessagesMessageIdDebugResponse200Data": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "description": "Number of debug messages created"
          }
        }
      },
      "GetTenantsTenantIdAgentsAgentIdChatsResponse200Data": {
        "type": "object",
        "properties": {
          "chats": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Chat"
                },
                {
                  "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsResponse200DataChatsItemAllOf"
                }
              ]
            }
          },
          "page": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          },
          "totalCount": {
            "type": "integer"
          },
          "totalPages": {
            "type": "integer"
          }
        }
      },
      "GetTenantsTenantIdAgentsAgentIdChatsStreamResponse400Data": {
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsStreamResponse400DataCodeEnum"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "GetTenantsTenantIdAgentsAgentIdChatsStreamResponse429Data": {
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsStreamResponse429DataCodeEnum"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "GetTenantsTenantIdAgentsAgentIdChatsStreamResponse500Data": {
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/GetTenantsTenantIdAgentsAgentIdChatsStreamResponse500DataCodeEnum"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "PatchTenantsTenantIdAgentsAgentIdRequestBodyUpdatesItem": {
        "type": "object",
        "required": [
          "path",
          "operation"
        ],
        "properties": {
          "path": {
            "type": "string",
            "description": "Dot-notation path to the value"
          },
          "operation": {
            "$ref": "#/components/schemas/PatchTenantsTenantIdAgentsAgentIdRequestBodyUpdatesItemOperation"
          }
        }
      },
      "GetTenantsTenantIdAnalyticsChatStatsResponse200Feedback": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total number of feedback entries",
            "example": 50
          },
          "positive": {
            "type": "integer",
            "description": "Number of positive feedback entries",
            "example": 40
          },
          "negative": {
            "type": "integer",
            "description": "Number of negative feedback entries",
            "example": 10
          },
          "ratio": {
            "type": "number",
            "format": "float",
            "description": "Ratio of positive feedback to total feedback",
            "example": 0.8
          }
        }
      },
      "GetTenantsTenantIdAnalyticsChatStatsResponse200AgentStatsItem": {
        "type": "object",
        "properties": {
          "agentId": {
            "type": "string",
            "description": "ID of the agent",
            "example": "agent_123"
          },
          "agentName": {
            "type": "string",
            "description": "Name of the agent",
            "example": "John Doe"
          },
          "totalChats": {
            "type": "integer",
            "description": "Total chats handled by this agent",
            "example": 30
          },
          "totalMessages": {
            "type": "integer",
            "description": "Total messages sent by this agent",
            "example": 150
          },
          "averageMessagesPerChat": {
            "type": "number",
            "format": "float",
            "description": "Average messages per chat for this agent",
            "example": 5
          },
          "positiveFeedback": {
            "type": "integer",
            "description": "Number of positive feedback entries for this agent",
            "example": 25
          },
          "negativeFeedback": {
            "type": "integer",
            "description": "Number of negative feedback entries for this agent",
            "example": 5
          },
          "feedbackRatio": {
            "type": "number",
            "format": "float",
            "description": "Ratio of positive feedback for this agent",
            "example": 0.83
          }
        }
      },
      "PostApiTenantsTenantIdDatasourcesDataSourceIdDocumentsDocumentIdReindexRequestBodyIndexingConfig": {
        "type": "object",
        "properties": {
          "chunk_size": {
            "type": "number",
            "minimum": 100,
            "maximum": 5000
          },
          "chunk_overlap": {
            "type": "number",
            "minimum": 0,
            "maximum": 1000
          },
          "max_chunk_size": {
            "type": "number",
            "minimum": 500,
            "maximum": 10000
          },
          "preserve_hierarchy": {
            "type": "boolean"
          }
        }
      },
      "PutTenantsTenantIdDatasourcesDataSourceIdDocumentsDocumentIdRequestBodyMetadata": {
        "type": "object",
        "description": "The metadata from the source",
        "properties": {
          "aiSummary": {
            "type": "string",
            "description": "AI-generated summary of the document"
          },
          "aiQuestions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "AI-generated questions from the document"
          },
          "aiTokensUsed": {
            "type": "number",
            "description": "Number of AI tokens used in processing"
          },
          "processingTime": {
            "type": "number",
            "description": "Time taken to process the document in seconds"
          }
        }
      },
      "PostApiTenantsTenantIdDatasourcesDataSourceIdDocumentsDocumentIdSplitRequestBodyConfig": {
        "type": "object",
        "properties": {
          "chunk_size": {
            "type": "number",
            "description": "Size of each chunk"
          },
          "chunk_overlap": {
            "type": "number",
            "description": "Overlap between chunks"
          }
        }
      },
      "PostApiTenantsTenantIdDatasourcesDataSourceIdDocumentsDocumentIdSplitResponse200ChunksItem": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "index": {
            "type": "number"
          },
          "tokens": {
            "type": "number"
          }
        }
      },
      "PostApiTenantsTenantIdDatasourcesDataSourceIdDocumentsDocumentIdSplitResponse200Statistics": {
        "type": "object",
        "properties": {
          "total_chunks": {
            "type": "number"
          },
          "avg_chunk_size": {
            "type": "number"
          },
          "total_tokens": {
            "type": "number"
          }
        }
      },
      "PostTenantsTenantIdDatasourcesDataSourceIdDocumentsLogRequestBodyCosts": {
        "type": "object",
        "description": "Cost tracking data",
        "properties": {
          "processingCost": {
            "type": "number"
          },
          "storageCost": {
            "type": "number"
          },
          "apiCost": {
            "type": "number"
          },
          "totalCost": {
            "type": "number"
          }
        }
      },
      "PostTenantsTenantIdDatasourcesDataSourceIdDocumentsSyncResponse200SyncResult": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/PostTenantsTenantIdDatasourcesDataSourceIdDocumentsSyncResponse200SyncResultActionEnum"
          },
          "documentId": {
            "type": "string"
          },
          "changes": {
            "$ref": "#/components/schemas/PostTenantsTenantIdDatasourcesDataSourceIdDocumentsSyncResponse200SyncResultChanges"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "PostScraperCrawlRequestBodyConfig": {
        "type": "object",
        "properties": {
          "cleaningFilters": {
            "$ref": "#/components/schemas/PostApiAuthLogoutRequestBody"
          }
        }
      },
      "PostScraperCrawlResponse201Data": {
        "type": "object",
        "properties": {
          "jobId": {
            "type": "string",
            "description": "Unique identifier for the crawl job"
          },
          "status": {
            "$ref": "#/components/schemas/PostScraperCrawlResponse201DataStatusEnum"
          },
          "progress": {
            "type": "number",
            "minimum": 0,
            "maximum": 100,
            "description": "Progress percentage"
          }
        }
      },
      "GetApiTenantsTenantIdValidateDomainResponse200Tenant": {
        "type": "object",
        "description": "Tenant information (only if exists is true)",
        "properties": {
          "id": {
            "type": "string",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "name": {
            "type": "string",
            "example": "Example Company"
          },
          "domain": {
            "type": "string",
            "example": "example.com"
          }
        }
      },
      "GetTenantsResponse200DataItem": {
        "type": "object",
        "required": [
          "id",
          "name",
          "domain"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetTenantsResponse200DataItemUsersItem"
            }
          },
          "agents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetTenantsResponse200DataItemAgentsItem"
            }
          },
          "dataSources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetTenantsResponse200DataItemAgentsItem"
            }
          },
          "_count": {
            "$ref": "#/components/schemas/GetTenantsResponse200DataItemCount"
          }
        }
      },
      "GetTenantsResponse200Meta": {
        "type": "object",
        "required": [
          "page",
          "pageSize",
          "total",
          "totalPages"
        ],
        "properties": {
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Current page number (0-based)"
          },
          "pageSize": {
            "type": "integer",
            "minimum": 1,
            "description": "Number of items per page"
          },
          "total": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of items available"
          },
          "totalPages": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of pages available"
          },
          "hasNext": {
            "type": "boolean",
            "description": "Whether there is a next page"
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Whether there is a previous page"
          }
        }
      },
      "GetApiTenantsValidateResponse200Tenant": {
        "type": "object",
        "description": "Tenant information (only if exists is true)",
        "properties": {
          "id": {
            "type": "string",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "name": {
            "type": "string",
            "example": "Example Company"
          },
          "domain": {
            "type": "string",
            "description": "Domain as stored in database",
            "example": "example.com"
          }
        }
      },
      "PostApiAuthLoginResponse200DataUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "clh1234567890abcdef"
          },
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "example": "John Doe"
          },
          "role": {
            "$ref": "#/components/schemas/UserRole"
          },
          "tenantId": {
            "type": "string",
            "example": "clh0987654321fedcba"
          },
          "tenant": {
            "$ref": "#/components/schemas/PostApiAuthLoginResponse200DataUserTenant"
          }
        }
      },
      "GetSessionStatsResponse200TenantSessionsItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "agentId": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "lastAccessedAt": {
            "type": "number"
          },
          "expiresAt": {
            "type": "number"
          },
          "rotationCount": {
            "type": "number"
          },
          "active": {
            "type": "boolean"
          }
        }
      },
      "GetSessionStatsResponse200UserSessionsItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          },
          "agentId": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "lastAccessedAt": {
            "type": "number"
          },
          "expiresAt": {
            "type": "number"
          },
          "rotationCount": {
            "type": "number"
          },
          "active": {
            "type": "boolean"
          }
        }
      },
      "GetTenantsTenantIdAgentsAgentIdChatsResponse200DataChatsItemAllOf": {
        "type": "object",
        "properties": {
          "messageCount": {
            "type": "integer",
            "description": "Number of messages in the chat (included when messageCount is in include parameter)"
          },
          "feedbackCount": {
            "type": "integer",
            "description": "Number of feedback messages in the chat (included when feedbackCount is in include parameter)"
          }
        }
      },
      "PatchTenantsTenantIdAgentsAgentIdRequestBodyUpdatesItemOperation": {
        "type": "object",
        "required": [
          "op"
        ],
        "properties": {
          "op": {
            "$ref": "#/components/schemas/PatchTenantsTenantIdAgentsAgentIdRequestBodyUpdatesItemOperationOpEnum"
          },
          "value": {
            "$ref": "#/components/schemas/PostApiAuthLogoutRequestBody"
          }
        }
      },
      "PostTenantsTenantIdDatasourcesDataSourceIdDocumentsSyncResponse200SyncResultChanges": {
        "type": "object",
        "properties": {
          "content": {
            "type": "boolean"
          },
          "metadata": {
            "type": "boolean"
          }
        }
      },
      "GetTenantsResponse200DataItemUsersItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "GetTenantsResponse200DataItemAgentsItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "GetTenantsResponse200DataItemCount": {
        "type": "object",
        "properties": {
          "users": {
            "type": "integer"
          },
          "agents": {
            "type": "integer"
          },
          "dataSources": {
            "type": "integer"
          }
        }
      },
      "PostApiAuthLoginResponse200DataUserTenant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "clh0987654321fedcba"
          },
          "name": {
            "type": "string",
            "example": "Acme Corporation"
          },
          "domain": {
            "type": "string",
            "example": "acme.mainio.app"
          }
        }
      },
      "UserRole": {
        "type": "string",
        "description": "User role enumeration",
        "enum": [
          "user",
          "admin",
          "system"
        ]
      },
      "TenantStatus": {
        "type": "string",
        "description": "Tenant status enumeration",
        "enum": [
          "active",
          "inactive",
          "pending"
        ]
      },
      "JsonObject": {
        "type": "object",
        "description": "Generic JSON object",
        "additionalProperties": true
      },
      "ListenResponse": {
        "type": "object",
        "description": "Server-sent events configuration response",
        "properties": {
          "connectionId": {
            "type": "string",
            "description": "Unique identifier for the connection"
          },
          "filters": {
            "type": "object",
            "description": "Event filters for this connection",
            "additionalProperties": true
          }
        },
        "required": [
          "connectionId"
        ]
      },
      "ChatCreate": {
        "type": "object",
        "description": "Schema for creating Chat",
        "properties": {},
        "additionalProperties": true
      },
      "ChatUpdate": {
        "type": "object",
        "description": "Schema for updating Chat",
        "properties": {},
        "additionalProperties": true
      },
      "EmbeddingCreate": {
        "type": "object",
        "description": "Schema for creating Embedding",
        "properties": {},
        "additionalProperties": true
      },
      "EmbeddingUpdate": {
        "type": "object",
        "description": "Schema for updating Embedding",
        "properties": {},
        "additionalProperties": true
      },
      "FeedbackUpdate": {
        "type": "object",
        "description": "Schema for updating Feedback",
        "properties": {},
        "additionalProperties": true
      },
      "JobExecutionUpdate": {
        "type": "object",
        "description": "Schema for updating JobExecution",
        "properties": {},
        "additionalProperties": true
      },
      "VectorIndexCreate": {
        "type": "object",
        "description": "Schema for creating VectorIndex",
        "properties": {},
        "additionalProperties": true
      },
      "VectorIndexUpdate": {
        "type": "object",
        "description": "Schema for updating VectorIndex",
        "properties": {},
        "additionalProperties": true
      },
      "AgentDatasourceResponseData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "ads_123e4567e89b12d3a456426614174000"
          },
          "agentId": {
            "type": "string",
            "example": "a_123e4567e89b12d3a456426614174000"
          },
          "dataSourceId": {
            "type": "string",
            "example": "ds_123e4567e89b12d3a456426614174000"
          },
          "description": {
            "type": "string",
            "example": "Connection between sales agent and customer database"
          },
          "instructions": {
            "type": "string",
            "example": "Use this data source for customer queries"
          },
          "config": {
            "type": "object",
            "example": {
              "priority": "high"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-01T00:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-01T00:00:00Z"
          }
        }
      },
      "JobPriorityEnum": {
        "type": "string",
        "enum": [
          "low",
          "default",
          "high"
        ]
      },
      "AgentTypeEnum": {
        "type": "string",
        "enum": [
          "chatAssistant",
          "emailAgent",
          "voiceAgent",
          "customAgent",
          "subAgent"
        ]
      },
      "TenantStatusEnum": {
        "type": "string",
        "enum": [
          "draft",
          "prospect",
          "active",
          "archived"
        ]
      },
      "DataSourceTypeEnum": {
        "type": "string",
        "enum": [
          "fileStorage",
          "webScraper",
          "wordPressSite",
          "toolMapping",
          "dataset",
          "scrapBook"
        ]
      },
      "DataSourceIntervalTypeEnum": {
        "type": "string",
        "enum": [
          "daily",
          "weekly",
          "monthly",
          "yearly",
          "webHook"
        ]
      },
      "DocumentStatusEnum": {
        "type": "string",
        "enum": [
          "indexed",
          "waiting",
          "processing",
          "error"
        ]
      },
      "DocumentTypeEnum": {
        "type": "string",
        "enum": [
          "pdf",
          "html",
          "markdown",
          "docx",
          "txt",
          "pptx",
          "xlsx",
          "csv",
          "json",
          "url",
          "wordpress",
          "image",
          "unknown"
        ]
      },
      "EmbeddingVendorEnum": {
        "type": "string",
        "enum": [
          "openai",
          "anthropic",
          "google",
          "azure"
        ]
      },
      "FoundationModelTypeEnum": {
        "type": "string",
        "enum": [
          "llm",
          "image",
          "tts",
          "moderation",
          "audio",
          "realtime"
        ]
      },
      "VectorDatabaseTypeEnum": {
        "type": "string",
        "enum": [
          "pinecone",
          "qdrant",
          "weaviate",
          "milvus",
          "redis",
          "pgvector"
        ]
      },
      "VectorIndexMetricEnum": {
        "type": "string",
        "nullable": true,
        "enum": [
          "dot",
          "cosine",
          "euclid",
          "manhattan"
        ]
      },
      "FeedbackRatingEnum": {
        "type": "string",
        "enum": [
          "positive",
          "negative"
        ]
      },
      "DataSourceEventCreateTypeEnum": {
        "type": "string",
        "enum": [
          "created",
          "configured",
          "scheduled",
          "documentAdded",
          "documentUpdated",
          "documentRemoved",
          "error",
          "info",
          "warning"
        ]
      },
      "PutFoundationModelsModelIdRequestBodyTypeEnum": {
        "type": "string",
        "enum": [
          "llm",
          "image",
          "tts",
          "moderation",
          "audio"
        ],
        "description": "Type of the foundation model"
      },
      "GetHealthResponse200StatusEnum": {
        "type": "string",
        "enum": [
          "healthy",
          "unhealthy"
        ]
      },
      "GetHealthResponse503StatusEnum": {
        "type": "string",
        "enum": [
          "unhealthy"
        ]
      },
      "PostJobsPlatformDetectorDetectResponse200StatusEnum": {
        "type": "string",
        "enum": [
          "started",
          "progress",
          "completed",
          "error"
        ]
      },
      "PostMonitoringAlertsRequestBodySeverityEnum": {
        "type": "string",
        "enum": [
          "info",
          "warning",
          "error",
          "critical"
        ]
      },
      "PatchMonitoringAlertsAlertIdRequestBodyActionEnum": {
        "type": "string",
        "enum": [
          "resolve",
          "acknowledge"
        ]
      },
      "PostMonitoringMetricsRequestBodyTypeEnum": {
        "type": "string",
        "enum": [
          "counter",
          "gauge",
          "histogram"
        ],
        "description": "Metric type"
      },
      "PostMonitoringValidationCacheRequestBodyOperationEnum": {
        "type": "string",
        "enum": [
          "clear",
          "invalidate",
          "warm"
        ],
        "description": "Operation to perform"
      },
      "PostMonitoringValidationCacheRequestBodyCacheEnum": {
        "type": "string",
        "enum": [
          "all",
          "validation",
          "request",
          "schema",
          "security"
        ],
        "description": "Which cache to operate on"
      },
      "PostTenantsTenantIdAgentsAgentIdChatsChatIdMessagesBatchRequestBodyItemRoleEnum": {
        "type": "string",
        "enum": [
          "user",
          "ai",
          "function"
        ],
        "description": "The role of the message sender"
      },
      "GetTenantsTenantIdAgentsAgentIdChatsStreamResponse400TypeEnum": {
        "type": "string",
        "enum": [
          "ERROR"
        ]
      },
      "PatchTenantsTenantIdAgentsAgentIdRequestBodyFieldEnum": {
        "type": "string",
        "enum": [
          "config",
          "instructions"
        ],
        "description": "The JSON field to update"
      },
      "PutTenantsTenantIdDatasourcesDataSourceIdDocumentsDocumentIdRequestBodyTypeEnum": {
        "type": "string",
        "enum": [
          "pdf",
          "html",
          "docx",
          "txt",
          "pptx",
          "xlsx",
          "csv",
          "json",
          "url",
          "wordpress"
        ],
        "description": "The type of the document"
      },
      "PostTenantsTenantIdDatasourcesDataSourceIdDocumentsIndexBatchResponse200StatusEnum": {
        "type": "string",
        "enum": [
          "queued"
        ],
        "description": "Status of the batch operation"
      },
      "GetMonitoringDashboardResponse200SystemStatusEnum": {
        "type": "string",
        "enum": [
          "healthy",
          "degraded",
          "unhealthy"
        ]
      },
      "GetTenantsTenantIdAgentsAgentIdChatsChatIdMessagesMessageIdDebugResponse200DataItemTypeEnum": {
        "type": "string",
        "enum": [
          "system",
          "user",
          "intent",
          "assistant",
          "tool",
          "tool_result",
          "rag"
        ]
      },
      "GetTenantsTenantIdAgentsAgentIdChatsStreamResponse400DataCodeEnum": {
        "type": "string",
        "enum": [
          "VALIDATION_ERROR"
        ]
      },
      "GetTenantsTenantIdAgentsAgentIdChatsStreamResponse429DataCodeEnum": {
        "type": "string",
        "enum": [
          "RATE_LIMIT"
        ]
      },
      "GetTenantsTenantIdAgentsAgentIdChatsStreamResponse500DataCodeEnum": {
        "type": "string",
        "enum": [
          "API_ERROR"
        ]
      },
      "PostTenantsTenantIdDatasourcesDataSourceIdDocumentsSyncResponse200SyncResultActionEnum": {
        "type": "string",
        "enum": [
          "created",
          "updated",
          "unchanged"
        ]
      },
      "PostScraperCrawlResponse201DataStatusEnum": {
        "type": "string",
        "enum": [
          "queued",
          "running",
          "completed",
          "failed"
        ],
        "description": "Current status of the job"
      },
      "PatchTenantsTenantIdAgentsAgentIdRequestBodyUpdatesItemOperationOpEnum": {
        "type": "string",
        "enum": [
          "set",
          "delete",
          "merge"
        ]
      },
      "GetMonitoringAlertsParam0Enum": {
        "type": "string",
        "enum": [
          "active",
          "resolved",
          "all"
        ],
        "default": "all"
      },
      "GetMonitoringDashboardParam0Enum": {
        "type": "string",
        "enum": [
          "1h",
          "6h",
          "24h",
          "7d"
        ],
        "default": "1h"
      },
      "GetMonitoringMetricsParam0Enum": {
        "type": "string",
        "enum": [
          "json",
          "prometheus"
        ],
        "default": "json"
      },
      "GetTenantsTenantIdAgentsAgentIdChatsChatIdMessagesParam6Enum": {
        "type": "string",
        "enum": [
          "createdAt"
        ],
        "default": "createdAt"
      },
      "GetTenantsTenantIdAgentsAgentIdChatsChatIdMessagesParam7Enum": {
        "type": "string",
        "enum": [
          "asc",
          "desc"
        ],
        "default": "asc"
      },
      "GetTenantsTenantIdAgentsAgentIdChatsParam4Enum": {
        "type": "string",
        "enum": [
          "createdAt",
          "updatedAt",
          "title"
        ]
      },
      "GetTenantsTenantIdAgentsAgentIdParam4Enum": {
        "type": "string",
        "enum": [
          "createdAt",
          "title"
        ],
        "default": "createdAt"
      },
      "GetTenantsTenantIdAgentsParam3Enum": {
        "type": "string",
        "enum": [
          "name",
          "createdAt",
          "updatedAt"
        ],
        "default": "createdAt"
      },
      "GetTenantsTenantIdDatasourcesDataSourceIdDocumentsParam5Enum": {
        "type": "string",
        "enum": [
          "url",
          "createdAt",
          "updatedAt"
        ],
        "default": "createdAt"
      },
      "GetTenantsTenantIdDatasourcesParam3Enum": {
        "type": "string",
        "enum": [
          "createdAt",
          "name"
        ],
        "default": "createdAt"
      },
      "GetTenantsTenantIdDatasourcesParam5Enum": {
        "type": "string",
        "enum": [
          "createdAt",
          "type"
        ],
        "default": "createdAt"
      },
      "GetTenantsTenantIdJobsParam3Enum": {
        "type": "string",
        "enum": [
          "createdAt",
          "name",
          "type",
          "priority"
        ],
        "default": "createdAt"
      },
      "GetTenantsTenantIdJobsParam5Enum": {
        "type": "string",
        "enum": [
          "createdAt",
          "status"
        ],
        "default": "createdAt"
      },
      "GetTenantsTenantIdUsersParam2Enum": {
        "type": "string",
        "enum": [
          "email",
          "name",
          "role",
          "createdAt",
          "updatedAt"
        ],
        "default": "email"
      },
      "GetUsersParam2Enum": {
        "type": "string",
        "enum": [
          "name",
          "email",
          "role",
          "createdAt",
          "updatedAt"
        ]
      },
      "GetVectorDatabasesVectorDatabaseIdIndicesParam2Enum": {
        "type": "string",
        "enum": [
          "createdAt",
          "name",
          "dimension"
        ]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT Bearer token authentication"
      },
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "API key authentication via header"
      },
      "apiToken": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "API token authentication prefixed with \"Token \""
      },
      "sessionAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "session",
        "description": "Session-based authentication via browser session cookie"
      },
      "internalApiAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-mainio-internal-token",
        "description": "Internal API token authentication for backend-to-backend communication"
      }
    },
    "responses": {
      "OK": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          }
        }
      },
      "Created": {
        "description": "Resource created successfully",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": true
                },
                "id": {
                  "type": "string",
                  "example": "123e4567-e89b-12d3-a456-426614174000"
                }
              }
            }
          }
        }
      },
      "NoContent": {
        "description": "Success - No content"
      },
      "NoContentResponse": {
        "description": "Success - No content"
      },
      "BadRequestError": {
        "description": "Bad request - Invalid input",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Invalid input data"
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "field": {
                        "type": "string",
                        "example": "email"
                      },
                      "message": {
                        "type": "string",
                        "example": "Must be a valid email address"
                      }
                    }
                  }
                }
              },
              "required": [
                "error"
              ]
            }
          }
        }
      },
      "UnauthorizedError": {
        "description": "Unauthorized - Authentication required",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Authentication required"
                }
              },
              "required": [
                "error"
              ]
            }
          }
        }
      },
      "ForbiddenError": {
        "description": "Forbidden - Insufficient permissions",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Insufficient permissions to access this resource"
                }
              },
              "required": [
                "error"
              ]
            }
          }
        }
      },
      "NotFoundError": {
        "description": "Not Found - Resource does not exist",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Resource not found"
                }
              },
              "required": [
                "error"
              ]
            }
          }
        }
      },
      "ConflictError": {
        "description": "Conflict - Resource already exists or state conflict",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "A resource with this identifier already exists"
                }
              },
              "required": [
                "error"
              ]
            }
          }
        }
      },
      "ValidationError": {
        "description": "Validation Error - Request data validation failed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Validation failed"
                },
                "validationErrors": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "field": {
                        "type": "string",
                        "example": "email"
                      },
                      "message": {
                        "type": "string",
                        "example": "Invalid email format"
                      },
                      "code": {
                        "type": "string",
                        "example": "invalid_string"
                      }
                    }
                  }
                }
              },
              "required": [
                "error",
                "validationErrors"
              ]
            }
          }
        }
      },
      "TooManyRequestsError": {
        "description": "Too Many Requests - Rate limit exceeded",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Rate limit exceeded"
                },
                "retryAfterSeconds": {
                  "type": "integer",
                  "example": 60
                }
              },
              "required": [
                "error",
                "retryAfterSeconds"
              ]
            }
          }
        }
      },
      "InternalError": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "An unexpected error occurred"
                }
              },
              "required": [
                "error"
              ]
            }
          }
        }
      },
      "SSE": {
        "description": "Server-Sent Events stream",
        "content": {
          "text/event-stream": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        }
      },
      "FileDownload": {
        "description": "File download",
        "content": {
          "application/octet-stream": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        }
      },
      "AgentDatasourceResponse": {
        "description": "Agent data source operation success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/AgentDatasourceResponseData"
                }
              }
            }
          }
        }
      },
      "MessageBatchResponse": {
        "description": "Response containing a batch of messages",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/MessageBatchResponse"
            }
          }
        }
      },
      "JsonResponse": {
        "description": "Generic JSON response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/JsonResponse"
            }
          }
        }
      },
      "AgentConfigResponse": {
        "description": "Response for agent configuration",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AgentConfigResponse"
            }
          }
        }
      },
      "AgentDataSourceListResponse": {
        "description": "Response containing a list of agent data sources",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AgentDataSourceListResponse"
            }
          }
        }
      },
      "Error400": {
        "description": "Bad request - Invalid input",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Invalid input data"
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "field": {
                        "type": "string",
                        "example": "email"
                      },
                      "message": {
                        "type": "string",
                        "example": "Must be a valid email address"
                      }
                    }
                  }
                }
              },
              "required": [
                "error"
              ]
            }
          }
        }
      },
      "Error401": {
        "description": "Unauthorized - Authentication required",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Authentication required"
                }
              },
              "required": [
                "error"
              ]
            }
          }
        }
      },
      "Error403": {
        "description": "Forbidden - Insufficient permissions",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Insufficient permissions to access this resource"
                }
              },
              "required": [
                "error"
              ]
            }
          }
        }
      },
      "Error404": {
        "description": "Not Found - Resource does not exist",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Resource not found"
                }
              },
              "required": [
                "error"
              ]
            }
          }
        }
      },
      "Error409": {
        "description": "Conflict - Resource already exists or state conflict",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "A resource with this identifier already exists"
                }
              },
              "required": [
                "error"
              ]
            }
          }
        }
      },
      "Error422": {
        "description": "Validation Error - Request data validation failed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Validation failed"
                },
                "validationErrors": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "field": {
                        "type": "string",
                        "example": "email"
                      },
                      "message": {
                        "type": "string",
                        "example": "Invalid email format"
                      },
                      "code": {
                        "type": "string",
                        "example": "invalid_string"
                      }
                    }
                  }
                }
              },
              "required": [
                "error",
                "validationErrors"
              ]
            }
          }
        }
      },
      "Error429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Rate limit exceeded"
                },
                "retryAfterSeconds": {
                  "type": "integer",
                  "example": 60
                }
              },
              "required": [
                "error",
                "retryAfterSeconds"
              ]
            }
          }
        }
      },
      "Error500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "An unexpected error occurred"
                }
              },
              "required": [
                "error"
              ]
            }
          }
        }
      },
      "AgentResponse": {
        "description": "AgentResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AgentResponse"
            }
          }
        }
      },
      "AgentListResponse": {
        "description": "AgentListResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AgentListResponse"
            }
          }
        }
      },
      "ChatResponse": {
        "description": "ChatResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ChatResponse"
            }
          }
        }
      },
      "ChatListResponse": {
        "description": "ChatListResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ChatListResponse"
            }
          }
        }
      },
      "DataSourceResponse": {
        "description": "DataSourceResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DataSourceResponse"
            }
          }
        }
      },
      "DataSourceListResponse": {
        "description": "DataSourceListResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DataSourceListResponse"
            }
          }
        }
      },
      "DocumentResponse": {
        "description": "DocumentResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DocumentResponse"
            }
          }
        }
      },
      "DocumentListResponse": {
        "description": "DocumentListResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DocumentListResponse"
            }
          }
        }
      },
      "EmbeddingResponse": {
        "description": "EmbeddingResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/EmbeddingResponse"
            }
          }
        }
      },
      "EmbeddingListResponse": {
        "description": "EmbeddingListResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/EmbeddingListResponse"
            }
          }
        }
      },
      "FeedbackResponse": {
        "description": "FeedbackResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FeedbackResponse"
            }
          }
        }
      },
      "FeedbackListResponse": {
        "description": "FeedbackListResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FeedbackListResponse"
            }
          }
        }
      },
      "FoundationModelResponse": {
        "description": "FoundationModelResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FoundationModelResponse"
            }
          }
        }
      },
      "FoundationModelListResponse": {
        "description": "FoundationModelListResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FoundationModelListResponse"
            }
          }
        }
      },
      "JobResponse": {
        "description": "JobResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/JobResponse"
            }
          }
        }
      },
      "JobListResponse": {
        "description": "JobListResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/JobListResponse"
            }
          }
        }
      },
      "JobExecutionResponse": {
        "description": "JobExecutionResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/JobExecutionResponse"
            }
          }
        }
      },
      "JobExecutionListResponse": {
        "description": "JobExecutionListResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/JobExecutionListResponse"
            }
          }
        }
      },
      "TenantResponse": {
        "description": "TenantResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TenantResponse"
            }
          }
        }
      },
      "TenantListResponse": {
        "description": "TenantListResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TenantListResponse"
            }
          }
        }
      },
      "UserResponse": {
        "description": "UserResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UserResponse"
            }
          }
        }
      },
      "UserListResponse": {
        "description": "UserListResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UserListResponse"
            }
          }
        }
      },
      "VectorDatabaseResponse": {
        "description": "VectorDatabaseResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/VectorDatabaseResponse"
            }
          }
        }
      },
      "VectorDatabaseListResponse": {
        "description": "VectorDatabaseListResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/VectorDatabaseListResponse"
            }
          }
        }
      },
      "VectorIndexResponse": {
        "description": "VectorIndexResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/VectorIndexResponse"
            }
          }
        }
      },
      "VectorIndexListResponse": {
        "description": "VectorIndexListResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/VectorIndexListResponse"
            }
          }
        }
      }
    },
    "parameters": {
      "tenantInclude": {
        "in": "query",
        "name": "include",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "users",
              "agents",
              "dataSources",
              "webhooks"
            ]
          }
        },
        "style": "form",
        "explode": true,
        "description": "Include related Tenant resources. Multiple values can be separated by commas."
      },
      "agentInclude": {
        "in": "query",
        "name": "include",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "tenant",
              "agentSettings",
              "credentials",
              "dataSourceConnections"
            ]
          }
        },
        "style": "form",
        "explode": true,
        "description": "Include related Agent resources. Multiple values can be separated by commas."
      },
      "dataSourceInclude": {
        "in": "query",
        "name": "include",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "tenant",
              "agentConnections",
              "credentials"
            ]
          }
        },
        "style": "form",
        "explode": true,
        "description": "Include related DataSource resources. Multiple values can be separated by commas."
      },
      "tenant_id": {
        "in": "path",
        "name": "tenantId",
        "schema": {
          "type": "string"
        },
        "required": true,
        "description": "ID of the tenant"
      },
      "user_id": {
        "in": "path",
        "name": "userId",
        "schema": {
          "type": "string"
        },
        "required": true,
        "description": "ID of the user"
      },
      "agent_id": {
        "in": "path",
        "name": "agentId",
        "schema": {
          "type": "string"
        },
        "required": true,
        "description": "ID of the agent"
      },
      "dataSource_id": {
        "in": "path",
        "name": "dataSourceId",
        "schema": {
          "type": "string"
        },
        "required": true,
        "description": "ID of the data source"
      },
      "limit": {
        "in": "query",
        "name": "limit",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100,
          "default": 20
        },
        "required": false,
        "description": "Maximum number of items to return"
      },
      "offset": {
        "in": "query",
        "name": "offset",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        },
        "required": false,
        "description": "Number of items to skip"
      },
      "page": {
        "in": "query",
        "name": "page",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 1
        },
        "required": false,
        "description": "Page number (1-based)"
      }
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "Operations related to Authentication"
    },
    {
      "name": "Embeddings",
      "description": "Operations related to Embeddings"
    },
    {
      "name": "Foundation Models",
      "description": "Operations related to Foundation Models"
    },
    {
      "name": "System",
      "description": "Operations related to System"
    },
    {
      "name": "Jobs",
      "description": "Operations related to Jobs"
    },
    {
      "name": "Listen",
      "description": "Operations related to Listen"
    },
    {
      "name": "Monitoring",
      "description": "Operations related to Monitoring"
    },
    {
      "name": "Session",
      "description": "Operations related to Session"
    },
    {
      "name": "Chats",
      "description": "Operations related to Chats"
    },
    {
      "name": "Messages",
      "description": "Operations related to Messages"
    },
    {
      "name": "Feedback",
      "description": "Operations related to Feedback"
    },
    {
      "name": "Agent Datasources",
      "description": "Operations related to Agent Datasources"
    },
    {
      "name": "Agents",
      "description": "Operations related to Agents"
    },
    {
      "name": "Analytics",
      "description": "Operations related to Analytics"
    },
    {
      "name": "Crawler",
      "description": "Operations related to Crawler"
    },
    {
      "name": "Documents",
      "description": "Operations related to Documents"
    },
    {
      "name": "Datasources",
      "description": "Operations related to Datasources"
    },
    {
      "name": "Search",
      "description": "Operations related to Search"
    },
    {
      "name": "Testing",
      "description": "Operations related to Testing"
    },
    {
      "name": "Tenants",
      "description": "Operations related to Tenants"
    },
    {
      "name": "Scraper",
      "description": "Operations related to Scraper"
    },
    {
      "name": "Users",
      "description": "Operations related to Users"
    },
    {
      "name": "Indices",
      "description": "Operations related to Indices"
    },
    {
      "name": "Vector Databases",
      "description": "Operations related to Vector Databases"
    }
  ],
  "servers": [
    {
      "url": "http://localhost:3000/api",
      "description": "API server"
    }
  ]
}