{
  "openapi": "3.0.0",
  "info": {
    "title": "Mainio Platform API",
    "description": "\n# Introduction\nWelcome to the Mainio API documentation. This API follows REST principles and provides endpoints for managing tenants, agents, data sources, and more.\n\n## Authentication\nAll API endpoints require authentication. For user authentication, users must be authenticated via session.\n\n## Authorization\nThe API implements role-based access control.\n\n## Common Patterns\n\n### Resource Inclusion\nMany endpoints support including related resources via the `include` query parameter:\n```\nGET /api/tenants/123?include=users,agents,datasources\n```\n\n### Response Format\nAll responses follow a consistent format:\n```json\n{\n  \"data\": {}, // Response data\n  \"error\": \"Error message if any\"\n}\n```\n",
    "version": "0.1.0"
  },
  "paths": {
    "/auth/change-password": {
      "post": {
        "summary": "Change user password",
        "operationId": "changePassword",
        "description": "Updates a user's password after validating their current password.\nRequires authentication and can only be used to change the authenticated user's own password.\n",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "userId",
                  "newPassword"
                ],
                "properties": {
                  "userId": {
                    "type": "string",
                    "description": "The ID of the user whose password is being changed"
                  },
                  "newPassword": {
                    "type": "string",
                    "minLength": 6,
                    "description": "The new password to set"
                  }
                }
              },
              "examples": {
                "basic": {
                  "summary": "Basic password change",
                  "value": {
                    "userId": "123e4567-e89b-12d3-a456-426614174000",
                    "newPassword": "newPass123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Password updated successfully"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "summary": "Authenticate user with credentials",
        "operationId": "authenticateUser",
        "tags": [
          "Authentication"
        ],
        "description": "Authenticates a user with email and password credentials.\nReturns a JWT token for API access. Supports both Mindhive internal users\nand tenant-specific users.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "description": "User's password",
                    "example": "securePassword123"
                  },
                  "tenantId": {
                    "type": "string",
                    "description": "Optional tenant ID (can be derived from hostname)",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authentication successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "type": "string",
                          "description": "JWT token for API authentication",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "550e8400-e29b-41d4-a716-446655440000"
                            },
                            "email": {
                              "type": "string",
                              "example": "user@example.com"
                            },
                            "name": {
                              "type": "string",
                              "nullable": true,
                              "example": "John Doe"
                            },
                            "role": {
                              "type": "string",
                              "example": "user"
                            },
                            "tenantId": {
                              "type": "string",
                              "example": "550e8400-e29b-41d4-a716-446655440000"
                            },
                            "tenant": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "domain": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data"
          },
          "401": {
            "description": "Invalid credentials"
          },
          "404": {
            "description": "Tenant not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "summary": "Logout user session",
        "operationId": "logoutUser",
        "tags": [
          "Authentication"
        ],
        "description": "Logs out the current user. For JWT-based authentication,\nthis endpoint acknowledges the logout request. The client\nis responsible for discarding the token.\n",
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Logged out successfully"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/session": {
      "get": {
        "summary": "Validate user session and get current user",
        "operationId": "validateSession",
        "tags": [
          "Authentication"
        ],
        "description": "Validates the user session and returns current user information.\nSupports both JWT Bearer tokens (mobile) and NextAuth sessions (web).\nFor web clients: Uses NextAuth session cookies automatically.\nFor mobile clients: Requires a valid Bearer token in the Authorization header.\n",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Session validation successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "550e8400-e29b-41d4-a716-446655440000"
                        },
                        "email": {
                          "type": "string",
                          "example": "user@example.com"
                        },
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "example": "John Doe"
                        },
                        "role": {
                          "type": "string",
                          "example": "user"
                        },
                        "tenantId": {
                          "type": "string",
                          "example": "550e8400-e29b-41d4-a716-446655440000"
                        },
                        "tenant": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "domain": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing authentication"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/embeddings/{embedModelId}": {
      "get": {
        "summary": "Get a specific embedding",
        "operationId": "getEmbedding",
        "tags": [
          "Embeddings"
        ],
        "description": "Returns a specific embedding.\nOnly system users can access this endpoint.\n",
        "parameters": [
          {
            "in": "path",
            "name": "embedModelId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the embedding"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/EmbeddingResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "summary": "Update an embedding",
        "tags": [
          "Embeddings"
        ],
        "description": "Updates a specific embedding.\nOnly system users can access this endpoint.\n",
        "operationId": "updateEmbedding",
        "parameters": [
          {
            "in": "path",
            "name": "embedModelId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the embedding"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "internalName",
                  "dimension"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Display name for the embedding"
                  },
                  "internalName": {
                    "type": "string",
                    "description": "Internal name for the embedding"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the embedding"
                  },
                  "dimension": {
                    "type": "integer",
                    "description": "Dimension of the embedding vectors"
                  },
                  "config": {
                    "type": "object",
                    "description": "Configuration for the embedding"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/EmbeddingResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "summary": "Delete an embedding",
        "tags": [
          "Embeddings"
        ],
        "description": "Deletes a specific embedding.\nOnly system users can access this endpoint.\n",
        "operationId": "deleteEmbedding",
        "parameters": [
          {
            "in": "path",
            "name": "embedModelId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the embedding"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/embeddings": {
      "get": {
        "summary": "Get all embeddings",
        "operationId": "listEmbeddings",
        "tags": [
          "Embeddings"
        ],
        "description": "Returns all embeddings.\nOnly system users can access this endpoint.\n",
        "responses": {
          "200": {
            "description": "List of embeddings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EmbeddingResponse"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "summary": "Create a new embedding",
        "tags": [
          "Embeddings"
        ],
        "description": "Creates a new embedding.\nOnly system users can access this endpoint.\n",
        "operationId": "createEmbedding",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "internalName",
                  "dimension"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Display name for the embedding"
                  },
                  "internalName": {
                    "type": "string",
                    "description": "Internal name for the embedding"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the embedding"
                  },
                  "dimension": {
                    "type": "integer",
                    "description": "Dimension of the embedding vectors"
                  },
                  "config": {
                    "type": "object",
                    "description": "Configuration for the embedding"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/schemas/EmbeddingResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/foundation-models/{modelId}": {
      "get": {
        "summary": "Get a specific foundation model",
        "operationId": "getFoundationModel",
        "tags": [
          "Foundation Models"
        ],
        "description": "Returns a specific foundation model.\nOnly system users can access this endpoint.\n",
        "parameters": [
          {
            "in": "path",
            "name": "modelId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the foundation model"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/FoundationModelResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "summary": "Update a foundation model",
        "tags": [
          "Foundation Models"
        ],
        "description": "Updates a specific foundation model.\nOnly system users can access this endpoint.\n",
        "operationId": "updateFoundationModel",
        "parameters": [
          {
            "in": "path",
            "name": "modelId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the foundation model"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "internalName",
                  "type",
                  "contextWindow"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Display name for the foundation model"
                  },
                  "internalName": {
                    "type": "string",
                    "description": "Internal name for the foundation model"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "llm",
                      "image",
                      "tts",
                      "moderation",
                      "audio"
                    ],
                    "description": "Type of the foundation model"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the foundation model"
                  },
                  "contextWindow": {
                    "type": "integer",
                    "description": "Context window size for the foundation model"
                  },
                  "maxOutput": {
                    "type": "integer",
                    "description": "Maximum output size for the foundation model"
                  },
                  "config": {
                    "type": "object",
                    "description": "Configuration for the foundation model"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/FoundationModelResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "summary": "Delete a foundation model",
        "operationId": "deleteFoundationModel",
        "tags": [
          "Foundation Models"
        ],
        "description": "Deletes a specific foundation model.\nOnly system users can access this endpoint.\n",
        "parameters": [
          {
            "in": "path",
            "name": "modelId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the foundation model"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/foundation-models": {
      "get": {
        "summary": "Get all foundation models",
        "operationId": "listFoundationModels",
        "tags": [
          "Foundation Models"
        ],
        "description": "Returns all foundation models.\nOnly system users can access this endpoint.\n",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/FoundationModelListResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "summary": "Create a new foundation model",
        "tags": [
          "Foundation Models"
        ],
        "description": "Creates a new foundation model.\nOnly system users can access this endpoint.\n",
        "operationId": "createFoundationModel",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "internalName",
                  "type",
                  "contextWindow"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Display name for the foundation model"
                  },
                  "internalName": {
                    "type": "string",
                    "description": "Internal name for the foundation model"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "llm",
                      "image",
                      "tts",
                      "moderation",
                      "audio"
                    ],
                    "description": "Type of the foundation model"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the foundation model"
                  },
                  "contextWindow": {
                    "type": "integer",
                    "description": "Context window size for the foundation model"
                  },
                  "maxOutput": {
                    "type": "integer",
                    "description": "Maximum output size for the foundation model"
                  },
                  "config": {
                    "type": "object",
                    "description": "Configuration for the foundation model"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/schemas/FoundationModelResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Get system health status",
        "operationId": "getSystemHealth",
        "tags": [
          "System"
        ],
        "description": "Returns the health status of the system and its dependent services.\nThis endpoint forwards the request to the backend health check and wraps\nthe response in the standard API format.\n",
        "responses": {
          "200": {
            "description": "System health status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "healthy",
                            "unhealthy"
                          ]
                        },
                        "services": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "object",
                            "properties": {
                              "status": {
                                "type": "string",
                                "enum": [
                                  "healthy",
                                  "unhealthy"
                                ]
                              },
                              "message": {
                                "type": "string",
                                "nullable": true
                              }
                            }
                          }
                        },
                        "timestamp": {
                          "type": "integer"
                        },
                        "uptimes": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          },
          "503": {
            "description": "One or more services are unhealthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "unhealthy"
                          ]
                        },
                        "services": {
                          "type": "object"
                        },
                        "timestamp": {
                          "type": "integer"
                        },
                        "uptimes": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/jobs/{jobId}/executions": {
      "get": {
        "summary": "Get job execution history",
        "tags": [
          "Jobs"
        ],
        "description": "Returns the execution history of a specific job. System users can access any job's history, while other users can only access history of jobs from their tenant.",
        "operationId": "listJobExecutionsByJobId",
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the job"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of executions to return"
          },
          {
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/JobStatus"
            },
            "description": "Filter by execution status"
          }
        ],
        "responses": {
          "200": {
            "description": "List of job executions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobExecutionListResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/{jobId}": {
      "get": {
        "summary": "Get a specific job",
        "tags": [
          "Jobs"
        ],
        "description": "Returns a specific job. System users can access any job, while other users can only access jobs from their tenant.",
        "operationId": "getJob",
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the job"
          }
        ],
        "responses": {
          "200": {
            "description": "Job details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "summary": "Update a job",
        "tags": [
          "Jobs"
        ],
        "description": "Updates a job. System users can update any job, while other users can only update jobs from their tenant.",
        "operationId": "updateJob",
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the job"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Job updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "summary": "Delete a job",
        "tags": [
          "Jobs"
        ],
        "description": "Deletes a job. System users can delete any job, while other users can only delete jobs from their tenant.",
        "operationId": "deleteJob",
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the job"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/platform-detector/detect": {
      "post": {
        "summary": "Detect platform of a website",
        "tags": [
          "Jobs"
        ],
        "description": "Detects the platform/CMS used by a website with streaming progress updates.\nReturns a server-sent events stream with detection progress and results.\n",
        "operationId": "detectPlatformJob",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "URL of the website to detect platform for",
                    "example": "https://wordpress.org"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Platform detection stream",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "started",
                        "progress",
                        "completed",
                        "error"
                      ]
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "platform": {
                          "type": "string"
                        },
                        "confidence": {
                          "type": "number"
                        },
                        "robotsExists": {
                          "type": "boolean"
                        },
                        "sitemapExists": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs": {
      "get": {
        "summary": "List system-level jobs",
        "tags": [
          "Jobs"
        ],
        "description": "Returns a paginated list of system-level jobs.\nOnly available to system users.\n",
        "operationId": "listSystemJobs",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Pagination cursor"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of items to return per page"
          },
          {
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/JobStatus"
            },
            "description": "Filter by job status"
          },
          {
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/JobType"
            },
            "description": "Filter by job type"
          },
          {
            "in": "query",
            "name": "fromDate",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter jobs after this date (ISO format)"
          },
          {
            "in": "query",
            "name": "toDate",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter jobs before this date (ISO format)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of system jobs with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobListResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "summary": "Create a new system-level job",
        "description": "Creates a new system-level job in the system. Only accessible to system users or internal services.",
        "tags": [
          "Jobs"
        ],
        "operationId": "createSystemJob",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Job created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/listen": {
      "get": {
        "summary": "Establish a Server-Sent Events connection",
        "tags": [
          "Listen"
        ],
        "description": "Establishes a Server-Sent Events connection with optional filters.\nRequires authentication and system user role.\n",
        "operationId": "listenEvents",
        "parameters": [
          {
            "name": "filters",
            "in": "query",
            "required": true,
            "description": "JSON object defining filters for the events",
            "schema": {
              "type": "object",
              "properties": {
                "document.created": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "tenantId"
                    ],
                    "properties": {
                      "tenantId": {
                        "type": "string",
                        "description": "The tenant ID to filter events for"
                      },
                      "dataSourceId": {
                        "type": "string",
                        "description": "The data source ID to filter events for"
                      },
                      "documentType": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "pdf",
                            "html",
                            "markdown",
                            "text",
                            "json",
                            "xml",
                            "csv",
                            "pptx",
                            "docx",
                            "xlsx",
                            "ppt",
                            "doc"
                          ]
                        },
                        "description": "The document types to filter events for"
                      }
                    }
                  }
                },
                "document.updated": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "tenantId"
                    ],
                    "properties": {
                      "tenantId": {
                        "type": "string",
                        "description": "The tenant ID to filter events for"
                      },
                      "urlPattern": {
                        "type": "string",
                        "description": "Regular expression pattern to match document URLs"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Server-Sent Events stream established",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "description": "Event data payload",
                      "additionalProperties": true
                    },
                    "event": {
                      "type": "string",
                      "description": "Event type identifier",
                      "example": "document.created"
                    },
                    "id": {
                      "type": "string",
                      "description": "Unique event identifier"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/agents/{agentId}/chat-link": {
      "get": {
        "summary": "Get the chat link for an agent",
        "operationId": "getChatLink",
        "tags": [
          "Chats"
        ],
        "description": "Returns the public chat URL for the specified agent.\nSystem users can access any tenant's agent links, while other users can only access their own tenant's agent links.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          }
        ],
        "responses": {
          "200": {
            "description": "Chat link URL",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string",
                          "description": "The public chat URL for the agent"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/agents/{agentId}/chats/{chatId}/messages/{messageId}/debug": {
      "post": {
        "summary": "Add debug messages to a message",
        "operationId": "addDebugMessage",
        "tags": [
          "Messages"
        ],
        "description": "Adds debug messages to a specific message.\nCan only be accessed by internal system calls.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "in": "path",
            "name": "chatId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the chat"
          },
          {
            "in": "path",
            "name": "messageId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the message"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "messages"
                ],
                "properties": {
                  "messages": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "content",
                        "type"
                      ],
                      "properties": {
                        "content": {
                          "type": "string",
                          "description": "The debug message content"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "system",
                            "user",
                            "intent",
                            "assistant",
                            "tool",
                            "tool_result",
                            "rag"
                          ],
                          "description": "The type of debug message"
                        }
                      }
                    },
                    "description": "Array of debug messages"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Debug messages added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "count": {
                          "type": "number",
                          "description": "Number of debug messages created"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "summary": "Get debug messages for a message",
        "operationId": "getDebugMessages",
        "tags": [
          "Messages"
        ],
        "description": "Retrieves all debug messages for a specific message.\nCan only be accessed by internal system calls.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "in": "path",
            "name": "chatId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the chat"
          },
          {
            "in": "path",
            "name": "messageId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the message"
          }
        ],
        "responses": {
          "200": {
            "description": "Debug messages retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "messageId": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "system",
                              "user",
                              "intent",
                              "assistant",
                              "tool",
                              "tool_result",
                              "rag"
                            ]
                          },
                          "content": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/agents/{agentId}/chats/{chatId}/messages/{messageId}/feedback": {
      "post": {
        "summary": "Add feedback to a message",
        "operationId": "addFeedback",
        "tags": [
          "Feedback"
        ],
        "description": "Adds feedback to a specific message.\nCan be accessed without authentication.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "in": "path",
            "name": "chatId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the chat"
          },
          {
            "in": "path",
            "name": "messageId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the message"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "rating"
                ],
                "properties": {
                  "rating": {
                    "type": "string",
                    "enum": [
                      "positive",
                      "negative"
                    ],
                    "description": "The feedback rating"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/schemas/FeedbackResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "summary": "Get feedback for a message",
        "operationId": "getFeedback",
        "tags": [
          "Feedback"
        ],
        "description": "Retrieves all feedback for a specific message.\nCan be accessed by users with tenant access.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "in": "path",
            "name": "chatId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the chat"
          },
          {
            "in": "path",
            "name": "messageId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the message"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/FeedbackResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/agents/{agentId}/chats/{chatId}/messages/{messageId}": {
      "get": {
        "summary": "Get a specific message",
        "operationId": "getMessage",
        "tags": [
          "Messages"
        ],
        "description": "Returns a specific message by ID.\nSystem users can access any tenant's message, while other users can only access their own tenant's messages.\nSupports including related data through the include query parameter.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "in": "path",
            "name": "chatId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the chat"
          },
          {
            "in": "path",
            "name": "messageId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the message"
          },
          {
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of relations to include (chat,agent,feedback)"
          }
        ],
        "responses": {
          "200": {
            "description": "Message details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Message"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed or required",
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Access forbidden to this tenant or agent",
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "description": "Tenant, Agent, or Message not found",
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "description": "Internal server error",
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/agents/{agentId}/chats/{chatId}/messages/batch": {
      "post": {
        "summary": "Add multiple messages to a chat in a single transaction",
        "operationId": "addMessages",
        "tags": [
          "Messages"
        ],
        "description": "Adds multiple new messages to an existing chat in a single transaction.\nCan be accessed only via internal API token.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "in": "path",
            "name": "chatId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the chat"
          },
          {
            "in": "header",
            "name": "x-mainio-internal-token",
            "schema": {
              "type": "string"
            },
            "description": "Internal API token for backend-to-backend communication"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "message",
                    "role"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "The message content"
                    },
                    "role": {
                      "type": "string",
                      "enum": [
                        "user",
                        "ai",
                        "function"
                      ],
                      "description": "The role of the message sender"
                    },
                    "tokens": {
                      "type": "object",
                      "description": "Token usage information"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessageBatchResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/agents/{agentId}/chats/{chatId}/messages": {
      "post": {
        "summary": "Add a message to a chat",
        "operationId": "addMessage",
        "tags": [
          "Messages"
        ],
        "description": "Adds a new message to an existing chat.\nCan be accessed either by users with tenant access or via internal API token.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "in": "path",
            "name": "chatId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the chat"
          },
          {
            "in": "header",
            "name": "x-mainio-internal-token",
            "schema": {
              "type": "string"
            },
            "description": "Internal API token for backend-to-backend communication"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "message",
                  "role"
                ],
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "The message content"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "user",
                      "ai",
                      "function"
                    ],
                    "description": "The role of the message sender"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/schemas/MessageResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "summary": "Get messages from a chat",
        "operationId": "getMessages",
        "tags": [
          "Messages"
        ],
        "description": "Retrieves messages from an existing chat with pagination support.\nCan be accessed either by users with tenant access or via internal API token.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "in": "path",
            "name": "chatId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the chat"
          },
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Cursor for pagination (message ID)"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            },
            "description": "Number of messages to return"
          },
          {
            "in": "query",
            "name": "roles",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of roles to filter by (user,assistant,system,function,etc)"
          },
          {
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "createdAt"
              ],
              "default": "createdAt"
            },
            "description": "Field to sort by (must be indexed)"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "Sort order"
          },
          {
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of relations to include (chat,agent,feedback)"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/MessageListResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/agents/{agentId}/chats/{chatId}": {
      "get": {
        "summary": "Get a specific chat",
        "operationId": "getChat",
        "tags": [
          "Chats"
        ],
        "description": "Returns a specific chat by ID.\nSystem users can access any tenant's chat, while other users can only access their own tenant's chats.\nSupports including related data through the include query parameter.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "in": "path",
            "name": "chatId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the chat"
          },
          {
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of relations to include (messages,agent)"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ChatResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "summary": "Delete a chat",
        "operationId": "deleteChat",
        "tags": [
          "Chats"
        ],
        "description": "Deletes a chat and all its messages.\nSystem users can delete any tenant's chats, while other users can only delete their own tenant's chats.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "in": "path",
            "name": "chatId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the chat"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/agents/{agentId}/chats": {
      "get": {
        "summary": "Get chats for an agent",
        "operationId": "getChats",
        "tags": [
          "Chats"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of fields to return"
          },
          {
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of relations to include (messages, agent, messageCount, feedbackCount)"
          },
          {
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "createdAt",
                "updatedAt",
                "title"
              ]
            },
            "description": "Field to sort by"
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "description": "Sort order (asc or desc)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of chats",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "chats": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/Chat"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "messageCount": {
                                    "type": "integer",
                                    "description": "Number of messages in the chat (included when messageCount is in include parameter)"
                                  },
                                  "feedbackCount": {
                                    "type": "integer",
                                    "description": "Number of feedback messages in the chat (included when feedbackCount is in include parameter)"
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "page": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        },
                        "totalCount": {
                          "type": "integer"
                        },
                        "totalPages": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "summary": "Create a new chat",
        "operationId": "createChat",
        "tags": [
          "Chats"
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Chat created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/agents/{agentId}/chats/stream": {
      "get": {
        "summary": "Open a chat stream connection",
        "operationId": "getChatStream",
        "tags": [
          "Chats"
        ],
        "description": "Opens a Server-Sent Events (SSE) stream for real-time chat communication by proxying\nthe connection to the AI backend service. This endpoint acts as a pure bridge between\nthe client and AI backend, with no additional business logic.\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "name": "connectionId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "A unique identifier for this connection"
          },
          {
            "name": "sessionToken",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The session token for authentication"
          }
        ],
        "responses": {
          "200": {
            "description": "Stream connection established",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/agents/{agentId}/config": {
      "get": {
        "summary": "Get public chat configuration",
        "operationId": "getAgentConfig",
        "tags": [
          "Agents"
        ],
        "description": "Returns the public configuration parts of the chat for the client.",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/AgentConfigResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/tenants/{tenantId}/agents/{agentId}/datasources/{dataSourceId}": {
      "get": {
        "summary": "Get a specific agent data source",
        "operationId": "getAgentDataSource",
        "tags": [
          "Agent Datasources"
        ],
        "description": "Returns a specific data source associated with the agent.\nSystem users can access any tenant's agent data sources, while other users can only access their own tenant's agent data sources.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent data source"
          },
          {
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of relations to include (dataSource,dataSource.vectorDatabase,dataSource.vectorIndex)"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AgentDatasourceResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "summary": "Update an agent data source",
        "operationId": "updateAgentDataSource",
        "tags": [
          "Agent Datasources"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent data source"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "instructions": {
                    "type": "string"
                  },
                  "config": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AgentDatasourceResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "summary": "Remove a data source from an agent",
        "operationId": "deleteAgentDataSource",
        "tags": [
          "Agent Datasources"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent data source"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/agents/{agentId}/datasources": {
      "get": {
        "summary": "Get all data sources for an agent",
        "operationId": "getAgentDataSources",
        "tags": [
          "Agent Datasources"
        ],
        "description": "Returns all data sources associated with the specified agent.\nSystem users can access any tenant's agent data sources, while other users can only access their own tenant's agent data sources.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "$ref": "#/components/parameters/dataSourceInclude"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/AgentDataSourceListResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "summary": "Add a data source to an agent",
        "operationId": "addAgentDataSource",
        "tags": [
          "Agent Datasources"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "dataSourceId"
                ],
                "properties": {
                  "dataSourceId": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "instructions": {
                    "type": "string"
                  },
                  "config": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/AgentDatasourceResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/agents/{agentId}/revisions/{revision}/restore": {
      "post": {
        "tags": [
          "Agents"
        ],
        "summary": "Restore agent to a specific revision",
        "operationId": "restoreAgentRevision",
        "description": "Restores an agent to a specific revision.\nSystem users can restore any tenant's agent, while other users can only restore their own tenant's agents.\n\nWhen restoring an agent:\n- The agent's state is reverted to the specified revision\n- The agent's revision number is set to the restored revision\n- Future revisions are preserved until changes are made\n- Making changes to a restored state creates a new branch\n\nBranching behavior:\n1. When you restore to revision N\n2. The agent is set to that state with revision = N\n3. Future revisions (>N) remain in history\n4. If you make changes after restoring:\n   - A new revision N+1 is created\n   - All revisions >N are deleted\n   - A new branch of history starts from N+1\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "name": "revision",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "The revision number to restore to"
          }
        ],
        "responses": {
          "200": {
            "description": "Agent restored successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/AgentResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "revision": {
                          "type": "integer",
                          "description": "The revision number the agent was restored to"
                        }
                      }
                    }
                  ]
                },
                "example": {
                  "id": "agent-123",
                  "name": "Customer Support Bot",
                  "description": "AI assistant for customer support",
                  "instructions": "Help customers with their inquiries",
                  "config": {
                    "theme": {
                      "primaryColor": "#123456"
                    },
                    "chatConfig": {
                      "welcomeMessage": "Hello! How can I help you today?"
                    }
                  },
                  "revision": 3,
                  "createdAt": "2024-02-20T12:00:00Z",
                  "updatedAt": "2024-02-20T14:30:00Z"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/agents/{agentId}/revisions": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "List agent revisions",
        "operationId": "listAgentRevisions",
        "description": "Returns a list of revisions for a specific agent.\nSystem users can access any tenant's agent revisions, while other users can only access their own tenant's agent revisions.\n\nEach revision represents a point in time when the agent was modified, including:\n- Full updates via PUT endpoint\n- Partial updates via PATCH endpoint\n- Restorations to previous versions\n\nThe list is ordered by revision number in descending order (newest first).\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          }
        ],
        "responses": {
          "200": {
            "description": "List of agent revisions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentHistoryListResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/agents/{agentId}": {
      "get": {
        "tags": [
          "Agents"
        ],
        "operationId": "getAgent",
        "summary": "Get a specific agent",
        "description": "Returns a specific agent by ID with role-based field filtering.\n\n**Access Control:**\n- System users can access any tenant's agent and see all fields including sensitive data\n- Other users can only access their own tenant's agents with restricted field access\n\n**Field Filtering by Role:**\n- **System users**: Can access all fields including `instructions` and `config`\n- **Non-system users**: Restricted to safe fields: `id`, `name`, `description`, `tenantId`, `createdAt`, `updatedAt`\n\n**Field Selection:**\n- Use the `fields` parameter to select specific fields\n- If no fields specified, non-system users get default safe fields, system users get all fields\n- Field filtering is applied automatically based on user role\n\n**Related Data:**\n- Supports including related data through the `include` query parameter\n- Related collections can be sorted using collection-specific sort parameters\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          },
          {
            "$ref": "#/components/parameters/agentInclude"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of fields to return. Field access is filtered by user role.\n\n**System users** can access all fields:\n`id`, `tenantId`, `name`, `description`, `instructions`, `config`, `createdAt`, `updatedAt`\n\n**Non-system users** are restricted to safe fields:\n`id`, `tenantId`, `name`, `description`, `createdAt`, `updatedAt`\n\nIf no fields specified:\n- System users: All fields returned\n- Non-system users: Safe fields returned by default\n",
            "example": "id,name,description"
          },
          {
            "name": "chatsSortBy",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "createdAt",
                "title"
              ]
            },
            "description": "Field to sort chats by (when chats are included)"
          },
          {
            "name": "chatsOrder",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "description": "Sort order for chats (asc or desc)"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AgentResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "tags": [
          "Agents"
        ],
        "summary": "Update a specific agent and create a new revision",
        "description": "Update a specific agent by ID and create a new revision.\nSystem users can update any tenant's agent, while other users can only update their own tenant's agents.\n\nWhen updating an agent:\n- A new revision is automatically created\n- The revision number is incremented\n- The previous state is preserved in the revision history\n- If updating from a restored state, future revisions are cleaned up\n",
        "operationId": "updateAgent",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AgentResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "tags": [
          "Agents"
        ],
        "summary": "Delete a specific agent",
        "description": "Deletes a specific agent by ID.\nSystem users can delete any tenant's agents, while other users can only delete their own tenant's agents.\n",
        "operationId": "deleteAgent",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "patch": {
        "tags": [
          "Agents"
        ],
        "summary": "Partially update a specific agent's JSON fields and create a new revision",
        "operationId": "patchAgentJson",
        "description": "Performs targeted updates to JSON fields of an agent and creates a new revision.\nAllows setting, deleting, or merging values at specific paths.\nSystem users can update any tenant's agent, while other users can only update their own tenant's agents.\n\nWhen updating JSON fields:\n- A new revision is automatically created\n- The revision number is incremented\n- The previous state is preserved in the revision history\n- If updating from a restored state, future revisions are cleaned up\n\nSupported JSON fields:\n- config: Agent configuration including theme, behavior settings, etc.\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "field": {
                    "type": "string",
                    "enum": [
                      "config",
                      "settings"
                    ]
                  },
                  "updates": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "string"
                        },
                        "operation": {
                          "type": "object",
                          "properties": {
                            "op": {
                              "type": "string",
                              "enum": [
                                "set",
                                "delete",
                                "merge"
                              ]
                            },
                            "value": {
                              "description": "Value for set/merge operations"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "setWelcomeMessage": {
                  "summary": "Update a welcome message",
                  "value": {
                    "field": "config",
                    "updates": [
                      {
                        "path": "chatConfig.translations.en.welcomeMessage",
                        "operation": {
                          "op": "set",
                          "value": "Welcome to our new assistant!"
                        }
                      }
                    ]
                  }
                },
                "deleteField": {
                  "summary": "Delete a field",
                  "value": {
                    "field": "config",
                    "updates": [
                      {
                        "path": "chatConfig.translations.fi.defaultQuestions",
                        "operation": {
                          "op": "delete"
                        }
                      }
                    ]
                  }
                },
                "mergeTheme": {
                  "summary": "Merge theme settings",
                  "value": {
                    "field": "config",
                    "updates": [
                      {
                        "path": "chatConfig.theme",
                        "operation": {
                          "op": "merge",
                          "value": {
                            "primaryColor": "#123456",
                            "secondaryColor": "#654321"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AgentResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/agents": {
      "get": {
        "summary": "Get all agents for a tenant",
        "tags": [
          "Agents"
        ],
        "description": "Returns all agents for the specified tenant with role-based field filtering.\n\n**Access Control:**\n- System users can access any tenant's agents and see all fields including sensitive data\n- Other users can only access their own tenant's agents with restricted field access\n\n**Field Filtering by Role:**\n- **System users**: Can access all fields including `instructions` and `config`\n- **Non-system users**: Restricted to safe fields: `id`, `name`, `description`, `tenantId`, `createdAt`, `updatedAt`\n\n**Field Selection:**\n- Use the `fields` parameter to select specific fields\n- If no fields specified, non-system users get default safe fields, system users get all fields\n- Field filtering is applied automatically based on user role\n\n**Related Data & Sorting:**\n- Supports including related data through the `include` query parameter\n- Supports sorting by specified fields\n- Supports pagination with configurable page size\n",
        "operationId": "listAgents",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of relations to include (tenant,functions,dataSources,chats)"
          },
          {
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of fields to return. Field access is filtered by user role.\n\n**System users** can access all fields:\n`id`, `tenantId`, `name`, `description`, `instructions`, `config`, `createdAt`, `updatedAt`\n\n**Non-system users** are restricted to safe fields:\n`id`, `tenantId`, `name`, `description`, `createdAt`, `updatedAt`\n\nIf no fields specified:\n- System users: All fields returned\n- Non-system users: Safe fields returned by default\n",
            "example": "id,name,description"
          },
          {
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "createdAt",
                "updatedAt"
              ]
            },
            "description": "Field to sort by"
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "description": "Sort order (asc or desc)"
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "description": "Page number (0-based), use 'all' to disable pagination"
          },
          {
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            },
            "description": "Number of items per page (max 100)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of agents with role-based field filtering applied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentListResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "tags": [
          "Agents"
        ],
        "summary": "Create a new agent for a tenant",
        "description": "Create a new agent for a tenant.\nSystem users can create agents for any tenant.\nAdmin users can only create agents in their own tenant.\n",
        "operationId": "createAgent",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Agent created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/analytics/chat-stats": {
      "get": {
        "summary": "Get chat statistics for a tenant",
        "operationId": "getTenantChatStats",
        "tags": [
          "Analytics"
        ],
        "description": "Retrieves chat statistics including total chats, messages per agent, and average messages per chat",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
              "example": "2024-01-01"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
              "example": "2024-12-31"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Chat statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalChats": {
                      "type": "integer",
                      "description": "Total number of chats.",
                      "example": 150
                    },
                    "totalMessages": {
                      "type": "integer",
                      "description": "Total number of messages across all chats.",
                      "example": 750
                    },
                    "averageMessagesPerChat": {
                      "type": "number",
                      "format": "float",
                      "description": "Average number of messages per chat.",
                      "example": 5
                    },
                    "feedback": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "description": "Total number of feedback entries.",
                          "example": 50
                        },
                        "positive": {
                          "type": "integer",
                          "description": "Number of positive feedback entries.",
                          "example": 40
                        },
                        "negative": {
                          "type": "integer",
                          "description": "Number of negative feedback entries.",
                          "example": 10
                        },
                        "ratio": {
                          "type": "number",
                          "format": "float",
                          "description": "Ratio of positive feedback to total feedback (positive / total).",
                          "example": 0.8
                        }
                      }
                    },
                    "agentStats": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "agentId": {
                            "type": "string",
                            "description": "ID of the agent.",
                            "example": "agent_123"
                          },
                          "agentName": {
                            "type": "string",
                            "description": "Name of the agent.",
                            "example": "John Doe"
                          },
                          "totalChats": {
                            "type": "integer",
                            "description": "Total chats handled by this agent.",
                            "example": 30
                          },
                          "totalMessages": {
                            "type": "integer",
                            "description": "Total messages sent by this agent.",
                            "example": 150
                          },
                          "averageMessagesPerChat": {
                            "type": "number",
                            "format": "float",
                            "description": "Average messages per chat for this agent.",
                            "example": 5
                          },
                          "positiveFeedback": {
                            "type": "integer",
                            "description": "Number of positive feedback entries for this agent.",
                            "example": 25
                          },
                          "negativeFeedback": {
                            "type": "integer",
                            "description": "Number of negative feedback entries for this agent.",
                            "example": 5
                          },
                          "feedbackRatio": {
                            "type": "number",
                            "format": "float",
                            "description": "Ratio of positive feedback for this agent.",
                            "example": 0.83
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/datasources/{dataSourceId}/documents/{documentId}/index": {
      "get": {
        "summary": "Index a document's content into the vector database.",
        "operationId": "indexDocument",
        "description": "Forwards the indexing request to the jobs service to index the combined document content and streams back Server-Sent Events (SSE) indicating the progress. Note: This endpoint is restricted to system-level access only.\n",
        "tags": [
          "Documents"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Tenant identifier."
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Data source identifier."
          },
          {
            "in": "path",
            "name": "documentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Document identifier."
          },
          {
            "in": "query",
            "name": "chunk_size",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Optional configuration for chunk size during indexing."
          },
          {
            "in": "query",
            "name": "chunk_overlap",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Optional configuration for chunk overlap during indexing."
          },
          {
            "in": "query",
            "name": "max_chunk_size",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Optional configuration for maximum chunk size during indexing."
          },
          {
            "in": "query",
            "name": "preserve_hierarchy",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "Optional configuration to preserve hierarchy during indexing."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully initiated indexing. The response is a stream of server-sent events (SSE) indicating the progress of the indexing job.",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "description": "A stream of Server-Sent Events. Each event's data structure is defined by the jobs service.\nEvents may include progress updates, logs, or completion status.\n"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/datasources/{dataSourceId}/documents/{documentId}": {
      "get": {
        "summary": "Get a specific document",
        "operationId": "getDocument",
        "tags": [
          "Documents"
        ],
        "description": "Returns a specific document by ID.\nSystem users can access any tenant's document, while other users can only access their own tenant's documents.\nSupports including related data through the \"include\" query parameter.\nIf the \"download\" query parameter is provided, the response returns the document content as a downloadable file (using\nthe document's \"html\" field if available, or falling back to \"markdown\") instead of the JSON object.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the data source"
          },
          {
            "in": "path",
            "name": "documentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the document"
          },
          {
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of relations to include (e.g., dataSource, tenant, chunks)"
          },
          {
            "in": "query",
            "name": "download",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "If true, returns the document content as a downloadable file (using the \"html\" or \"markdown\" field) instead of a JSON response."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/DocumentResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "summary": "Update a document",
        "operationId": "updateDocument",
        "tags": [
          "Documents"
        ],
        "description": "Updates a document for the datasource.\nSystem users can update any tenant's documents, while other users can only update their own tenant's documents.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the datasource"
          },
          {
            "in": "path",
            "name": "documentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the document"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "The URL of the source document"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "pdf",
                      "html",
                      "docx",
                      "txt",
                      "pptx",
                      "xlsx",
                      "csv",
                      "json",
                      "url",
                      "wordpress"
                    ],
                    "description": "The type of the document"
                  },
                  "mimeType": {
                    "type": "string",
                    "description": "The MIME type of the document"
                  },
                  "markdown": {
                    "type": "string",
                    "description": "The markdown content of the document"
                  },
                  "html": {
                    "type": "string",
                    "description": "The HTML content of the document"
                  },
                  "lastModified": {
                    "type": "string",
                    "description": "The last modified information from the source"
                  },
                  "etag": {
                    "type": "string",
                    "description": "The etag information from the source"
                  },
                  "metadata": {
                    "type": "object",
                    "description": "The metadata from the source",
                    "properties": {
                      "aiSummary": {
                        "type": "string",
                        "description": "AI-generated summary of the document"
                      },
                      "aiQuestions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "AI-generated questions from the document"
                      },
                      "aiTokensUsed": {
                        "type": "number",
                        "description": "Number of AI tokens used in processing"
                      },
                      "processingTime": {
                        "type": "number",
                        "description": "Time taken to process the document in seconds"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/DocumentResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "summary": "Delete a document",
        "operationId": "deleteDocument",
        "tags": [
          "Documents"
        ],
        "description": "Deletes an existing document. Only available to tenant admins and system users.",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the datasource"
          },
          {
            "in": "path",
            "name": "documentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the document"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/datasources/{dataSourceId}/documents/{documentId}/split": {
      "post": {
        "summary": "Split a document's markdown content into chunks",
        "operationId": "splitDocument",
        "description": "Forwards the parsing request to the jobs service and returns the split chunks along with statistics. Note: This endpoint is restricted to system-level access only.\n",
        "tags": [
          "Documents"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Tenant identifier."
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Data source identifier."
          },
          {
            "in": "path",
            "name": "documentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Document identifier."
          }
        ],
        "requestBody": {
          "description": "Markdown content with optional splitting configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string"
                  },
                  "config": {
                    "type": "object",
                    "properties": {
                      "chunk_size": {
                        "type": "number"
                      },
                      "chunk_overlap": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/JsonResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/datasources/{dataSourceId}/documents/count": {
      "get": {
        "summary": "Get document count",
        "operationId": "getDocumentCount",
        "tags": [
          "Documents"
        ],
        "description": "Returns the total count of documents in the datasource or with a specific status.",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataSourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The total count of documents in the datasource or with a specific status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/datasources/{dataSourceId}/documents/index/batch": {
      "get": {
        "summary": "Stream document indexing progress",
        "operationId": "indexDocuments",
        "description": "Streams real-time updates about the document indexing process for a specific tenant and data source.",
        "tags": [
          "Documents"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of the tenant"
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of the data source"
          },
          {
            "in": "query",
            "name": "forceOverride",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "Whether to force override existing indexed documents"
          }
        ],
        "security": [
          {
            "apiToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "Stream of document indexing progress events",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/datasources/{dataSourceId}/documents/log": {
      "post": {
        "summary": "Log an event for a data source",
        "operationId": "logDocumentEvent",
        "tags": [
          "Documents"
        ],
        "description": "Creates a new event log entry for the data source.\nSystem users can log events for any tenant's data source, while other users can only log events for their own tenant's data sources.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the data source"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "message"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "created",
                      "configured",
                      "scheduled",
                      "documentAdded",
                      "documentUpdated",
                      "documentRemoved",
                      "error",
                      "info",
                      "warning"
                    ],
                    "description": "The type of event"
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-readable description of the event"
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Additional metadata for the event"
                  },
                  "documentId": {
                    "type": "string",
                    "description": "Optional reference to affected document"
                  },
                  "error": {
                    "type": "string",
                    "description": "Optional error message if type is 'error'"
                  },
                  "costs": {
                    "type": "object",
                    "description": "Cost tracking data",
                    "properties": {
                      "processingCost": {
                        "type": "number"
                      },
                      "storageCost": {
                        "type": "number"
                      },
                      "apiCost": {
                        "type": "number"
                      },
                      "totalCost": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Event logged successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/DataSourceEvent"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/datasources/{dataSourceId}/documents": {
      "get": {
        "summary": "List documents for a datasource",
        "operationId": "listDocuments",
        "description": "Returns a paginated list of documents for the specified datasource",
        "tags": [
          "Documents"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/tenant_id"
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the datasource"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "indexed",
                "waiting",
                "processing",
                "error"
              ]
            },
            "required": false,
            "description": "Filter documents by status"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "url",
                "createdAt",
                "updatedAt"
              ],
              "default": "createdAt"
            },
            "description": "Field to sort by"
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "description": "Sort order"
          },
          {
            "in": "query",
            "name": "startsWith",
            "schema": {
              "type": "string"
            },
            "description": "Filter documents where URL starts with this value"
          },
          {
            "in": "query",
            "name": "contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter documents where URL contains this value"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of fields to include in the response"
          },
          {
            "$ref": "#/components/parameters/dataSourceInclude"
          }
        ],
        "responses": {
          "200": {
            "description": "List of documents",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "summary": "Create a new document for a datasource",
        "tags": [
          "Documents"
        ],
        "description": "Creates a new document for the specified datasource. System users can create documents for any tenant.",
        "operationId": "createDocument",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenant_id"
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Document identifier."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "url"
                ],
                "properties": {
                  "url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "pdf",
                      "html",
                      "docx",
                      "txt",
                      "pptx",
                      "xlsx",
                      "csv",
                      "json",
                      "url",
                      "wordpress"
                    ]
                  },
                  "mimeType": {
                    "type": "string"
                  },
                  "markdown": {
                    "type": "string"
                  },
                  "html": {
                    "type": "string"
                  },
                  "lastModified": {
                    "type": "string"
                  },
                  "etag": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "aiSummary": {
                        "type": "string"
                      },
                      "aiQuestions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "aiTokensUsed": {
                        "type": "number"
                      },
                      "processingTime": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  },
                  "data": {
                    "type": "string",
                    "description": "JSON string with additional metadata"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Document created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/datasources/{dataSourceId}/events": {
      "get": {
        "summary": "Get events for a data source",
        "operationId": "getDataSourceEvents",
        "tags": [
          "Datasources"
        ],
        "description": "Returns paginated events for the specified data source. System users can access any tenant's events, while other users can only access their own tenant's events. Supports pagination and sorting by creation date.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the data source"
          },
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Cursor for pagination (event ID)"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "number"
            },
            "description": "Number of events to return (default: 10, max: 50)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of events with pagination info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DataSourceEvent"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "description": "Cursor for the next page"
                    },
                    "hasMore": {
                      "type": "boolean",
                      "description": "Whether there are more events to fetch"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/datasources/{dataSourceId}": {
      "get": {
        "summary": "Get a datasource",
        "operationId": "getDatasource",
        "tags": [
          "Datasources"
        ],
        "description": "Retrieves a specific datasource for the tenant.\nSystem users can get any tenant's datasources, while other users can only get their own tenant's datasources.\nSupports including related data through the include query parameter.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the datasource"
          },
          {
            "$ref": "#/components/parameters/dataSourceInclude"
          }
        ],
        "responses": {
          "200": {
            "description": "Datasource retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "summary": "Update a datasource",
        "operationId": "updateDatasource",
        "tags": [
          "Datasources"
        ],
        "description": "Updates a datasource for the tenant.\nSystem users can update any tenant's datasources, while other users can only update their own tenant's datasources.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the datasource"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSourceUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Datasource updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/agents/{agentId}/datasources/{dataSourceId}/search": {
      "post": {
        "summary": "Search endpoint for datasource. It will return the elaborated search phrase and the search results.",
        "operationId": "elaborateSearchPhrase",
        "description": "Forwards search queries from the client to the main AI backend service.",
        "tags": [
          "Search"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Tenant identifier."
          },
          {
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Agent identifier."
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Data source identifier."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "searchPhrase": {
                    "type": "string",
                    "description": "The search phrase to be elaborated."
                  },
                  "instructions": {
                    "type": "string",
                    "description": "AI instructions for the search process."
                  }
                },
                "required": [
                  "searchPhrase",
                  "instructions"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response containing search results.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "embedding": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      },
                      "description": "Vector embedding array."
                    },
                    "elaboratedSearchPhrase": {
                      "type": "string",
                      "description": "The elaborated search phrase."
                    },
                    "searchResults": {
                      "type": "string",
                      "description": "The search results from the agent datasource."
                    }
                  },
                  "example": {
                    "embedding": [
                      0.123,
                      0.456
                    ],
                    "elaboratedSearchPhrase": "Example elaborated search phrase.",
                    "searchResults": "Example search results."
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/datasources/{dataSourceId}/test/clean-document": {
      "post": {
        "summary": "Clean and validate document content",
        "operationId": "cleanDocument",
        "description": "Proxies document cleaning request to jobs service",
        "tags": [
          "Documents"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CleanDocumentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cleaned document result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CleanDocumentResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/datasources": {
      "get": {
        "summary": "Get all data sources for a tenant",
        "operationId": "listDatasources",
        "tags": [
          "Datasources"
        ],
        "description": "Returns all data sources for the specified tenant.\nSystem users can access any tenant's data sources, while other users can only access their own tenant's data sources.\nSupports including related data through the include query parameter.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of relations to include (vectorDatabase,vectorIndex,embedModel,tenant,documents,agents,events)"
          },
          {
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of fields to return.\nAvailable fields: id, tenantId, name, type, description, config, createdAt, updatedAt\n",
            "example": "id,name,type"
          },
          {
            "in": "query",
            "name": "documentsSortBy",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Field to sort documents by (createdAt, name)"
          },
          {
            "in": "query",
            "name": "documentsOrder",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "description": "Sort order for documents (asc or desc)"
          },
          {
            "in": "query",
            "name": "eventsSortBy",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Field to sort events by (createdAt, type)"
          },
          {
            "in": "query",
            "name": "eventsOrder",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "description": "Sort order for events (asc or desc)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of data sources",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceListResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "summary": "Create a new datasource for a tenant",
        "operationId": "createDatasource",
        "tags": [
          "Datasources"
        ],
        "description": "Creates a new datasource for the specified tenant.\nSystem users can create datasources for any tenant.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSourceCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "DataSource created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/feedback": {
      "get": {
        "summary": "Get all feedback for a tenant",
        "operationId": "getTenantFeedback",
        "tags": [
          "Feedback"
        ],
        "description": "Retrieves paginated feedback data for a tenant with optional filtering",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Start date for filtering (YYYY-MM-DD)"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "End date for filtering (YYYY-MM-DD)"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of items per page"
          },
          {
            "name": "agentId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by agent ID"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FeedbackListResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/jobs/{jobId}/executions": {
      "get": {
        "summary": "Get job executions",
        "operationId": "listJobExecutions",
        "tags": [
          "Jobs"
        ],
        "description": "Returns all execution attempts for a specific job. System users can access any tenant's job executions, while other users can only access their own tenant's job executions.",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the job"
          },
          {
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of fields to return.\nAvailable fields: id, jobId, attemptNumber, status, startedAt, completedAt, duration, error, logs, createdAt, updatedAt\n",
            "example": "id,attemptNumber,status,startedAt"
          },
          {
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Field to sort by (attemptNumber, status, startedAt, completedAt, createdAt)"
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "description": "Sort order (asc or desc)"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/JobExecutionListResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "summary": "Record a job execution attempt",
        "operationId": "createJobExecution",
        "tags": [
          "Jobs"
        ],
        "description": "Records a new execution attempt for a job. Only accessible via internal API token.",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the job"
          },
          {
            "in": "header",
            "name": "x-mainio-internal-token",
            "schema": {
              "type": "string"
            },
            "description": "Internal API token for backend-to-backend communication"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobExecutionCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/schemas/JobExecutionResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/jobs/{jobId}": {
      "get": {
        "summary": "Get a specific job",
        "operationId": "getTenantJob",
        "tags": [
          "Jobs"
        ],
        "description": "Returns a specific job for the tenant.\nSystem users can access any tenant's jobs, while other users can only access their own tenant's jobs.\nSupports including related data through the include query parameter.\nSupports selecting specific fields through the fields query parameter.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the job"
          },
          {
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of relations to include (executions,tenant)"
          },
          {
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of fields to return.\nAvailable fields: id, tenantId, name, type, description, queue, priority, config, scheduled, cronString, maxAttempts, timeout, createdAt, updatedAt\n",
            "example": "id,name,type,priority"
          },
          {
            "in": "query",
            "name": "executionsSortBy",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Field to sort executions by (createdAt, status)"
          },
          {
            "in": "query",
            "name": "executionsOrder",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "description": "Sort order for executions (asc or desc)"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/Job"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "summary": "Update a job",
        "tags": [
          "Jobs"
        ],
        "description": "Updates a job for the tenant.\nSystem users can update any tenant's jobs, while other users can only update their own tenant's jobs.\nInternal requests are also allowed with proper authentication.\n",
        "operationId": "updateTenantJob",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the job"
          },
          {
            "in": "header",
            "name": "x-mainio-internal-token",
            "schema": {
              "type": "string"
            },
            "description": "Internal API token for backend-to-backend communication"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/JobResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "summary": "Delete a job",
        "tags": [
          "Jobs"
        ],
        "description": "Deletes a job for the tenant.\nSystem users can delete any tenant's jobs, while other users can only delete their own tenant's jobs.\n",
        "operationId": "deleteTenantJob",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the job"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/jobs": {
      "get": {
        "summary": "Get tenant jobs",
        "tags": [
          "Jobs"
        ],
        "description": "Returns all jobs for the specified tenant.\nSystem users can access any tenant's jobs, while other users can only access their own tenant's jobs.\nSupports including related data through the include query parameter.\n",
        "operationId": "listTenantJobs",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of relations to include (executions,tenant)"
          },
          {
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of fields to return.\nAvailable fields: id, tenantId, name, type, description, queue, priority, config, scheduled, cronString, maxAttempts, timeout, createdAt, updatedAt\n",
            "example": "id,name,type,priority"
          },
          {
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Field to sort jobs by (createdAt, name, type, priority)"
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "description": "Sort order (asc or desc)"
          },
          {
            "in": "query",
            "name": "executionsSortBy",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Field to sort executions by (createdAt, status)"
          },
          {
            "in": "query",
            "name": "executionsOrder",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "description": "Sort order for executions (asc or desc)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of jobs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Job"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "summary": "Create a new job for a tenant",
        "tags": [
          "Jobs"
        ],
        "description": "Creates a new job for the specified tenant.\nSystem users can create jobs for any tenant, while other users can only create jobs for their own tenant.\n",
        "operationId": "createTenantJob",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of relations to include (executions,tenant)"
          },
          {
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of fields to return.\nAvailable fields: id, tenantId, name, type, description, queue, priority, config, scheduled, cronString, maxAttempts, timeout, createdAt, updatedAt\n",
            "example": "id,name,type,priority"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Job created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Job"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}": {
      "get": {
        "summary": "Get a specific tenant by ID",
        "operationId": "getTenant",
        "tags": [
          "Tenants"
        ],
        "description": "Returns a specific tenant. System users can access any tenant,\nwhile other users can only access their own tenant.\nSupports including related data through the include query parameter.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the tenant to fetch"
          },
          {
            "$ref": "#/components/parameters/tenantInclude"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/TenantResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "summary": "Update a specific tenant",
        "operationId": "updateTenant",
        "tags": [
          "Tenants"
        ],
        "description": "Updates a specific tenant. System users can update any tenant,\nwhile admin users can update only their own tenant with limitations,\nand regular users cannot update tenants.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the tenant to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TenantUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/TenantResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "summary": "Delete a tenant",
        "operationId": "deleteTenant",
        "tags": [
          "Tenants"
        ],
        "description": "Deletes a specific tenant by ID.\nOnly users with system role can delete tenants.\n",
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the tenant to delete"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/users/{id}": {
      "get": {
        "summary": "Get a specific user",
        "operationId": "getTenantUser",
        "tags": [
          "Users"
        ],
        "description": "Retrieves information for a specific user within a tenant.\nSystem users have full access, admin users can access only users in their tenant,\nand regular users can only access their own user record.\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user to retrieve"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/UserResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "summary": "Update a specific user",
        "operationId": "updateTenantUser",
        "tags": [
          "Users"
        ],
        "description": "Updates information for a specific user within a tenant.\nSystem users can update any user, admin users can update users only in their tenant,\nand regular users can only update their own information.\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "User's full name"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "New password (min 6 characters)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UserResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "summary": "Delete a specific user",
        "operationId": "deleteTenantUser",
        "tags": [
          "Users"
        ],
        "description": "Deletes a specific user from a tenant.\nOnly system and admin roles are permitted to delete users.\nAdmin users can only delete users within their own tenant.\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user to delete"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/users/check-email": {
      "get": {
        "summary": "Check if an email is available (not in use) within a tenant",
        "operationId": "checkTenantUserEmail",
        "tags": [
          "Users"
        ],
        "description": "Checks if an email address is available for use within a specific tenant.\nReturns true if the email is available, false if it's already in use.\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "email"
            },
            "description": "The email address to check"
          }
        ],
        "responses": {
          "200": {
            "description": "Email availability check completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "available": {
                      "type": "boolean",
                      "description": "Whether the email is available (not in use)"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tenants/{tenantId}/users": {
      "get": {
        "summary": "List users in a tenant",
        "operationId": "listTenantUsers",
        "tags": [
          "Users"
        ],
        "description": "Retrieves a paginated list of users within a specific tenant.\nRegular users can only see their own record, while admin and system roles can see all users in the tenant.\nSupports field selection, sorting, and pagination.\nUse page=all to fetch all users in a single paginated response.\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          },
          {
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of fields to select"
          },
          {
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "email",
                "name",
                "role",
                "createdAt",
                "updatedAt"
              ]
            },
            "description": "Field to sort by"
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "description": "Sort order (asc or desc), default is asc"
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Page number (0-based) or 'all' to fetch all users"
          },
          {
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            },
            "description": "Number of items per page (max 100)"
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserListResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "summary": "Create a new user",
        "operationId": "createTenantUser",
        "tags": [
          "Users"
        ],
        "description": "Creates a new user within a specific tenant.\nOnly system and admin roles are allowed to create users.\nAdmin users can only create users in their own tenant.\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tenant"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password",
                  "role"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "User's full name"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "User's password (min 6 characters)"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "user",
                      "admin",
                      "system"
                    ],
                    "description": "User's role"
                  },
                  "image": {
                    "type": "string",
                    "nullable": true,
                    "description": "URL to user's profile image"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/UserResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/validate-domain": {
      "get": {
        "summary": "Validate if a tenant exists",
        "operationId": "validateTenantById",
        "tags": [
          "Tenants"
        ],
        "description": "Validates if a tenant with the given ID exists in the system.\nThis endpoint does not require authentication and can be used\nby clients to verify tenant existence before attempting login.\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the tenant to validate",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "550e8400-e29b-41d4-a716-446655440000"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant validation result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "exists": {
                      "type": "boolean",
                      "description": "Whether the tenant exists",
                      "example": true
                    },
                    "tenant": {
                      "type": "object",
                      "description": "Tenant information (only if exists is true)",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "550e8400-e29b-41d4-a716-446655440000"
                        },
                        "name": {
                          "type": "string",
                          "example": "Example Company"
                        },
                        "domain": {
                          "type": "string",
                          "example": "example.com"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid tenant ID format"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/tenants": {
      "get": {
        "summary": "Get all tenants",
        "tags": [
          "Tenants"
        ],
        "description": "Returns all tenants for system users, or only the user's tenant for other roles.\nSupports including related data, field selection, and pagination.\n",
        "operationId": "listTenants",
        "parameters": [
          {
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of relations to include (users,agents,dataSources)"
          },
          {
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of fields to select"
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "description": "Page number (0-based), use 'all' to disable pagination"
          },
          {
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            },
            "description": "Number of items per page (max 100)"
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of tenants",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Tenant"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/PaginationMeta"
                    }
                  },
                  "required": [
                    "data",
                    "pagination"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "summary": "Create a new tenant",
        "tags": [
          "Tenants"
        ],
        "description": "Creates a new tenant. Only available to users with system role.",
        "operationId": "createTenant",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TenantCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tenant created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/api/tenants/validate": {
      "get": {
        "summary": "Validate if a domain exists",
        "operationId": "validateTenantDomain",
        "tags": [
          "Tenants"
        ],
        "description": "Validates if a tenant with the given domain exists in the system.\nThis endpoint does not require authentication and can be used\nby clients to verify domain existence and get the correct domain format.\nThe domain comparison is case-insensitive.\n",
        "parameters": [
          {
            "name": "domain",
            "in": "query",
            "required": true,
            "description": "The domain to validate (e.g., \"example.com\" or \"subdomain.example.com\")",
            "schema": {
              "type": "string",
              "example": "example.com"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Domain validation result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "exists": {
                      "type": "boolean",
                      "description": "Whether the domain exists",
                      "example": true
                    },
                    "tenant": {
                      "type": "object",
                      "description": "Tenant information (only if exists is true)",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "550e8400-e29b-41d4-a716-446655440000"
                        },
                        "name": {
                          "type": "string",
                          "example": "Example Company"
                        },
                        "domain": {
                          "type": "string",
                          "description": "Domain as stored in database",
                          "example": "example.com"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or missing domain parameter"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "summary": "Get a specific user",
        "operationId": "getUser",
        "tags": [
          "Users"
        ],
        "description": "Returns a specific user. System users can access any user,\nwhile other users can only access users from their tenant.\n",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "The user details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "summary": "Update a specific user",
        "tags": [
          "Users"
        ],
        "description": "Updates a user. System users can update any user,\nwhile other users can only update users from their tenant.\n",
        "operationId": "updateUser",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "summary": "Delete a specific user",
        "tags": [
          "Users"
        ],
        "description": "Deletes a user. System users can delete any user,\nwhile admin users can only delete users from their tenant.\n",
        "operationId": "deleteUser",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Get all users",
        "tags": [
          "Users"
        ],
        "description": "Returns all users. System users can see all users,\nwhile other users can only see users from their tenant.\n",
        "operationId": "listUsers",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^\\w+:(asc|desc)$",
              "example": "createdAt:desc"
            },
            "description": "Sort field and direction in format \"field:direction\".\nAvailable fields: id, name, email, role, tenantId, createdAt, updatedAt\n"
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserListResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "summary": "Create a new user",
        "tags": [
          "Users"
        ],
        "description": "Creates a new user. System users can create users for any tenant,\nwhile admin users can only create users for their own tenant.\n",
        "operationId": "createUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/vector-databases/{vectorDatabaseId}/indices/{indexId}": {
      "get": {
        "summary": "Get a specific vector index",
        "operationId": "getVectorIndex",
        "tags": [
          "Indices"
        ],
        "description": "Returns a specific vector index. Only available to system users.",
        "parameters": [
          {
            "in": "path",
            "name": "vectorDatabaseId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the vector database"
          },
          {
            "in": "path",
            "name": "indexId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the vector index"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/VectorIndexResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "summary": "Update a vector index",
        "operationId": "updateVectorIndex",
        "tags": [
          "Indices"
        ],
        "description": "Updates a vector index. Only available to system users.",
        "parameters": [
          {
            "in": "path",
            "name": "vectorDatabaseId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the vector database"
          },
          {
            "in": "path",
            "name": "indexId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the vector index"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VectorIndexUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/VectorIndexResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "summary": "Delete a vector index",
        "operationId": "deleteVectorIndex",
        "tags": [
          "Indices"
        ],
        "description": "Deletes a vector index. Only available to system users.",
        "parameters": [
          {
            "in": "path",
            "name": "vectorDatabaseId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the vector database"
          },
          {
            "in": "path",
            "name": "indexId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the vector index"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/vector-databases/{vectorDatabaseId}/indices": {
      "get": {
        "summary": "List vector indices for a database",
        "tags": [
          "Indices"
        ],
        "description": "Returns a paginated list of vector indices for a database. Only available to system users.\n",
        "operationId": "listVectorIndices",
        "parameters": [
          {
            "in": "path",
            "name": "vectorDatabaseId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the vector database"
          },
          {
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of fields to return"
          },
          {
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "createdAt",
                "name",
                "dimension"
              ]
            },
            "description": "Field to sort by"
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "description": "Sort order"
          },
          {
            "in": "query",
            "name": "startsWith",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter items by name prefix (matches items that start with the given value)"
          },
          {
            "in": "query",
            "name": "contains",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter items by name substring (matches if name contains the given value)"
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "List of indices with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VectorIndexListResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "summary": "Create a new vector index",
        "tags": [
          "Vector Databases"
        ],
        "description": "Creates a new vector index in the specified vector database. Only available to system users.\n",
        "operationId": "createVectorIndex",
        "parameters": [
          {
            "in": "path",
            "name": "vectorDatabaseId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the vector database"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VectorIndexCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vector index created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/VectorIndex"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/vector-databases": {
      "get": {
        "summary": "Get all vector databases",
        "tags": [
          "Vector Databases"
        ],
        "description": "Returns all vector databases.\nOnly available to system users.\n",
        "operationId": "listVectorDatabases",
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of fields to return.\nAvailable fields: id, name, type, description, config, createdAt, updatedAt\n",
            "example": "id,name,type"
          },
          {
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Field to sort by (createdAt, name, type)"
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "description": "Sort order (asc or desc)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of vector databases",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VectorDatabaseListResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "summary": "Create a new vector database",
        "tags": [
          "Vector Databases"
        ],
        "description": "Creates a new vector database.\nOnly available to system users.\n",
        "operationId": "createVectorDatabase",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VectorDatabaseCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vector database created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VectorDatabaseResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Job": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "webScraper",
              "wordPressSite",
              "fileStorage",
              "agentReport"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "queued",
              "running",
              "completed",
              "failed",
              "cancelled",
              "scheduled"
            ]
          },
          "priority": {
            "type": "string",
            "enum": [
              "low",
              "default",
              "high"
            ]
          },
          "id": {
            "type": "string"
          },
          "tenantId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "queue": {
            "type": "string"
          },
          "config": {
            "type": "object",
            "properties": {}
          },
          "result": {
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "scheduled": {
            "type": "boolean"
          },
          "nextRun": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastRun": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "attempts": {
            "type": "number"
          },
          "maxAttempts": {
            "type": "number"
          },
          "timeout": {
            "type": "number"
          },
          "dataSourceId": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "completedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": [
          "type",
          "status",
          "priority",
          "id",
          "tenantId",
          "name",
          "description",
          "queue",
          "config",
          "result",
          "error",
          "scheduled",
          "nextRun",
          "lastRun",
          "attempts",
          "maxAttempts",
          "timeout",
          "dataSourceId",
          "createdAt",
          "updatedAt",
          "startedAt",
          "completedAt"
        ]
      },
      "AgentHistory": {
        "type": "object",
        "properties": {
          "agentId": {
            "type": "string",
            "description": "The ID of the agent this revision belongs to"
          },
          "revision": {
            "type": "integer",
            "description": "The revision number"
          },
          "name": {
            "type": "string",
            "description": "Agent name at the time of this revision"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Agent description at the time of this revision"
          },
          "instructions": {
            "type": "string",
            "nullable": true,
            "description": "Agent instructions at the time of this revision"
          },
          "config": {
            "type": "object",
            "description": "Agent configuration snapshot at the time of this revision (structure depends on agent type/settings)",
            "additionalProperties": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when this revision was created"
          },
          "createdBy": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "ID of the user who created this revision"
              },
              "name": {
                "type": "string",
                "nullable": true,
                "description": "Name of the user who created this revision"
              },
              "email": {
                "type": "string",
                "nullable": true,
                "format": "email",
                "description": "Email of the user who created this revision"
              }
            }
          }
        },
        "required": [
          "agentId",
          "revision",
          "name",
          "createdAt",
          "createdBy"
        ]
      },
      "AgentHistoryListResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/AgentHistory"
        }
      },
      "AgentResponse": {
        "type": "object",
        "description": "Agent data with optional related information based on include query parameter",
        "allOf": [
          {
            "$ref": "#/components/schemas/Agent"
          },
          {
            "type": "object",
            "properties": {
              "tenant": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Tenant"
                  }
                ],
                "description": "Tenant information (included when include=tenant)"
              },
              "functions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Tool"
                },
                "description": "Agent functions/tools (included when include=functions)"
              },
              "datasources": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AgentDataSource"
                },
                "description": "Agent data sources (included when include=datasources)"
              },
              "chats": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Chat"
                },
                "description": "Agent chats (included when include=chats)"
              },
              "_count": {
                "type": "object",
                "description": "Count of related entities (included when include=_count)",
                "properties": {
                  "functions": {
                    "type": "integer",
                    "description": "Number of functions"
                  },
                  "datasources": {
                    "type": "integer",
                    "description": "Number of data sources"
                  },
                  "chats": {
                    "type": "integer",
                    "description": "Number of chats"
                  }
                }
              }
            }
          }
        ]
      },
      "AgentListResponse": {
        "type": "array",
        "description": "Array of agents with optional related information based on include query parameter",
        "items": {
          "$ref": "#/components/schemas/AgentResponse"
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "user",
              "admin",
              "system"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "salt": {
            "type": "string",
            "nullable": true
          },
          "emailVerified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "image": {
            "type": "string",
            "nullable": true
          },
          "tenantId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "role",
          "id",
          "name",
          "email",
          "password",
          "salt",
          "emailVerified",
          "image",
          "tenantId",
          "createdAt",
          "updatedAt"
        ]
      },
      "UserResponse": {
        "type": "object",
        "description": "Response object for User",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "UserListResponse": {
        "type": "object",
        "description": "Response object for a list of User",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "Tenant": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "prospect",
              "active",
              "archived"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "domain": {
            "type": "string"
          },
          "settings": {
            "type": "object",
            "properties": {}
          },
          "theme": {
            "type": "object",
            "properties": {}
          },
          "active": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "status",
          "id",
          "name",
          "description",
          "domain",
          "settings",
          "theme",
          "active",
          "createdAt",
          "updatedAt"
        ]
      },
      "TenantResponse": {
        "type": "object",
        "description": "Response object for Tenant",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Tenant"
          }
        }
      },
      "TenantListResponse": {
        "type": "object",
        "description": "Response object for a list of Tenant",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tenant"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "Agent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "revision": {
            "type": "number"
          },
          "tenantId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "instructions": {
            "type": "string",
            "nullable": true
          },
          "config": {
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "revision",
          "tenantId",
          "name",
          "description",
          "instructions",
          "config",
          "createdAt",
          "updatedAt"
        ]
      },
      "Chat": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          },
          "agentId": {
            "type": "string"
          },
          "info": {
            "type": "object",
            "properties": {}
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "tokens": {
            "type": "object",
            "properties": {}
          }
        },
        "required": [
          "id",
          "tenantId",
          "agentId",
          "info",
          "createdAt",
          "updatedAt",
          "tokens"
        ]
      },
      "ChatResponse": {
        "type": "object",
        "description": "Response object for Chat",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Chat"
          }
        }
      },
      "ChatListResponse": {
        "type": "object",
        "description": "Response object for a list of Chat",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Chat"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "DataSource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "fileStorage",
              "webScraper",
              "wordPressSite"
            ]
          },
          "intervalType": {
            "type": "string",
            "enum": [
              "daily",
              "weekly",
              "monthly",
              "yearly",
              "webHook"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "tenantId": {
            "type": "string",
            "nullable": true
          },
          "vectorDatabaseId": {
            "type": "string",
            "nullable": true
          },
          "vectorIndexId": {
            "type": "string",
            "nullable": true
          },
          "embedModelId": {
            "type": "string",
            "nullable": true
          },
          "intervalValue": {
            "type": "number"
          },
          "targetUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "config": {
            "type": "object",
            "properties": {}
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "type",
          "intervalType",
          "id",
          "name",
          "description",
          "tenantId",
          "vectorDatabaseId",
          "vectorIndexId",
          "embedModelId",
          "intervalValue",
          "targetUrls",
          "config",
          "createdAt",
          "updatedAt"
        ]
      },
      "DataSourceResponse": {
        "type": "object",
        "description": "Response object for DataSource",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DataSource"
          }
        }
      },
      "DataSourceListResponse": {
        "type": "object",
        "description": "Response object for a list of DataSource",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSource"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "Document": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "indexed",
              "waiting",
              "processing",
              "error"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "pdf",
              "html",
              "docx",
              "txt",
              "pptx",
              "xlsx",
              "csv",
              "json",
              "url",
              "wordpress"
            ]
          },
          "id": {
            "type": "string"
          },
          "dataSourceId": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "mimeType": {
            "type": "string",
            "nullable": true
          },
          "size": {
            "type": "number",
            "nullable": true
          },
          "binary": {
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "markdown": {
            "type": "string",
            "nullable": true
          },
          "html": {
            "type": "string",
            "nullable": true
          },
          "hash": {
            "type": "string",
            "nullable": true
          },
          "lastModified": {
            "type": "string",
            "nullable": true
          },
          "etag": {
            "type": "string",
            "nullable": true
          },
          "tokens": {
            "type": "number",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "status",
          "type",
          "id",
          "dataSourceId",
          "url",
          "mimeType",
          "size",
          "binary",
          "markdown",
          "html",
          "hash",
          "lastModified",
          "etag",
          "tokens",
          "metadata",
          "createdAt",
          "updatedAt"
        ]
      },
      "DocumentResponse": {
        "type": "object",
        "description": "Response object for Document",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Document"
          }
        }
      },
      "DocumentListResponse": {
        "type": "object",
        "description": "Response object for a list of Document",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "Embedding": {
        "type": "object",
        "properties": {
          "vendor": {
            "type": "string",
            "enum": [
              "openai",
              "anthropic",
              "google",
              "azure"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "internalName": {
            "type": "string"
          },
          "dimension": {
            "type": "number"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "config": {
            "type": "object",
            "properties": {}
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "vendor",
          "id",
          "name",
          "internalName",
          "dimension",
          "description",
          "config",
          "createdAt",
          "updatedAt"
        ]
      },
      "EmbeddingResponse": {
        "type": "object",
        "description": "Response object for Embedding",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Embedding"
          }
        }
      },
      "EmbeddingListResponse": {
        "type": "object",
        "description": "Response object for a list of Embedding",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Embedding"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "FoundationModel": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "llm",
              "image",
              "tts",
              "moderation",
              "audio",
              "realtime"
            ]
          },
          "vendor": {
            "type": "string",
            "enum": [
              "openai",
              "anthropic",
              "google",
              "azure"
            ]
          },
          "id": {
            "type": "string"
          },
          "alias": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "internalName": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "contextWindow": {
            "type": "number"
          },
          "maxOutput": {
            "type": "number",
            "nullable": true
          },
          "config": {
            "type": "object",
            "properties": {}
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "knowledgeCutOff": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "type",
          "vendor",
          "id",
          "alias",
          "name",
          "internalName",
          "description",
          "contextWindow",
          "maxOutput",
          "config",
          "createdAt",
          "updatedAt",
          "knowledgeCutOff"
        ]
      },
      "FoundationModelResponse": {
        "type": "object",
        "description": "Response object for FoundationModel",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/FoundationModel"
          }
        }
      },
      "FoundationModelListResponse": {
        "type": "object",
        "description": "Response object for a list of FoundationModel",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FoundationModel"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "Message": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "chatId": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "userId": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "tokens": {
            "type": "object",
            "properties": {}
          }
        },
        "required": [
          "id",
          "chatId",
          "role",
          "message",
          "userId",
          "createdAt",
          "updatedAt",
          "tokens"
        ]
      },
      "MessageResponse": {
        "type": "object",
        "description": "Response object for Message",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Message"
          }
        }
      },
      "MessageListResponse": {
        "type": "object",
        "description": "Response object for a list of Message",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "VectorDatabase": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "pinecone",
              "qdrant",
              "weaviate",
              "milvus",
              "redis",
              "pgvector"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "config": {
            "type": "object",
            "properties": {}
          },
          "tenantId": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "type",
          "id",
          "name",
          "description",
          "config",
          "tenantId",
          "createdAt",
          "updatedAt"
        ]
      },
      "VectorDatabaseResponse": {
        "type": "object",
        "description": "Response object for VectorDatabase",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/VectorDatabase"
          }
        }
      },
      "VectorDatabaseListResponse": {
        "type": "object",
        "description": "Response object for a list of VectorDatabase",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VectorDatabase"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "VectorIndex": {
        "type": "object",
        "properties": {
          "metric": {
            "type": "string",
            "enum": [
              "dot",
              "cosine",
              "euclid",
              "manhattan"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "dimension": {
            "type": "number"
          },
          "config": {
            "type": "object",
            "properties": {}
          },
          "vectorDatabaseId": {
            "type": "string"
          },
          "embedModelId": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "metric",
          "id",
          "name",
          "description",
          "dimension",
          "config",
          "vectorDatabaseId",
          "embedModelId",
          "createdAt",
          "updatedAt"
        ]
      },
      "VectorIndexResponse": {
        "type": "object",
        "description": "Response object for VectorIndex",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/VectorIndex"
          }
        }
      },
      "VectorIndexListResponse": {
        "type": "object",
        "description": "Response object for a list of VectorIndex",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VectorIndex"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "JobResponse": {
        "type": "object",
        "description": "Response object for Job",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Job"
          }
        }
      },
      "JobListResponse": {
        "type": "object",
        "description": "Response object for a list of Job",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Job"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "JobExecution": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "queued",
              "running",
              "completed",
              "failed",
              "cancelled",
              "scheduled"
            ]
          },
          "id": {
            "type": "string"
          },
          "jobId": {
            "type": "string"
          },
          "attemptNumber": {
            "type": "number"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "duration": {
            "type": "number",
            "nullable": true
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "logs": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "status",
          "id",
          "jobId",
          "attemptNumber",
          "startedAt",
          "completedAt",
          "duration",
          "error",
          "logs",
          "createdAt",
          "updatedAt"
        ]
      },
      "JobExecutionResponse": {
        "type": "object",
        "description": "Response object for JobExecution",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JobExecution"
          }
        }
      },
      "JobExecutionListResponse": {
        "type": "object",
        "description": "Response object for a list of JobExecution",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobExecution"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "Feedback": {
        "type": "object",
        "properties": {
          "rating": {
            "type": "string",
            "enum": [
              "positive",
              "negative"
            ]
          },
          "id": {
            "type": "string"
          },
          "messageId": {
            "type": "string"
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "rating",
          "id",
          "messageId",
          "content",
          "createdAt",
          "updatedAt"
        ]
      },
      "FeedbackResponse": {
        "type": "object",
        "description": "Response object for Feedback",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Feedback"
          }
        }
      },
      "FeedbackListResponse": {
        "type": "object",
        "description": "Response object for a list of Feedback",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Feedback"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "Tool": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "params": {
            "type": "object",
            "properties": {}
          },
          "code": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "params",
          "code",
          "createdAt",
          "updatedAt"
        ]
      },
      "ToolResponse": {
        "type": "object",
        "description": "Response object for Tool",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Tool"
          }
        }
      },
      "ToolListResponse": {
        "type": "object",
        "description": "Response object for a list of Tool",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tool"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "AgentDataSource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "agentId": {
            "type": "string"
          },
          "dataSourceId": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "instructions": {
            "type": "string",
            "nullable": true
          },
          "config": {
            "type": "object",
            "properties": {},
            "nullable": true
          }
        },
        "required": [
          "id",
          "agentId",
          "dataSourceId",
          "description",
          "instructions",
          "config"
        ]
      },
      "AgentDataSourceResponse": {
        "type": "object",
        "description": "Response object for AgentDataSource",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AgentDataSource"
          }
        }
      },
      "AgentDataSourceListResponse": {
        "type": "object",
        "description": "Response object for a list of AgentDataSource",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentDataSource"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "UserCreate": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "type": "string",
            "enum": [
              "user",
              "admin",
              "system"
            ]
          },
          "tenantId": {
            "type": "string"
          },
          "image": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "email",
          "name",
          "password",
          "role",
          "tenantId"
        ]
      },
      "UserCreateResponse": {
        "type": "object",
        "description": "Response object for UserCreate",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UserCreate"
          }
        }
      },
      "UserCreateListResponse": {
        "type": "object",
        "description": "Response object for a list of UserCreate",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserCreate"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "TenantCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "prospect",
              "active",
              "archived"
            ]
          },
          "settings": {
            "type": "object",
            "properties": {}
          },
          "theme": {
            "type": "object",
            "properties": {}
          },
          "active": {
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "domain"
        ]
      },
      "TenantCreateResponse": {
        "type": "object",
        "description": "Response object for TenantCreate",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TenantCreate"
          }
        }
      },
      "TenantCreateListResponse": {
        "type": "object",
        "description": "Response object for a list of TenantCreate",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TenantCreate"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "AgentCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          },
          "instructions": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "name",
          "tenantId"
        ]
      },
      "AgentCreateResponse": {
        "type": "object",
        "description": "Response object for AgentCreate",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AgentCreate"
          }
        }
      },
      "AgentCreateListResponse": {
        "type": "object",
        "description": "Response object for a list of AgentCreate",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentCreate"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "ChatCreate": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ChatCreateResponse": {
        "type": "object",
        "description": "Response object for ChatCreate",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ChatCreate"
          }
        }
      },
      "ChatCreateListResponse": {
        "type": "object",
        "description": "Response object for a list of ChatCreate",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatCreate"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "DataSourceCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "fileStorage",
              "webScraper",
              "wordPressSite"
            ]
          },
          "intervalType": {
            "type": "string",
            "enum": [
              "daily",
              "weekly",
              "monthly",
              "yearly",
              "webHook"
            ]
          },
          "intervalValue": {
            "type": "number"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "tenantId": {
            "type": "string",
            "nullable": true
          },
          "vectorDatabaseId": {
            "type": "string",
            "nullable": true
          },
          "vectorIndexId": {
            "type": "string",
            "nullable": true
          },
          "embedModelId": {
            "type": "string",
            "nullable": true
          },
          "config": {
            "type": "object",
            "properties": {}
          },
          "targetUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "type",
          "intervalType",
          "intervalValue"
        ]
      },
      "DataSourceCreateResponse": {
        "type": "object",
        "description": "Response object for DataSourceCreate",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DataSourceCreate"
          }
        }
      },
      "DataSourceCreateListResponse": {
        "type": "object",
        "description": "Response object for a list of DataSourceCreate",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSourceCreate"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "DocumentCreate": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "pdf",
              "html",
              "docx",
              "txt",
              "pptx",
              "xlsx",
              "csv",
              "json",
              "url",
              "wordpress"
            ]
          },
          "dataSourceId": {
            "type": "string"
          },
          "mimeType": {
            "type": "string",
            "nullable": true
          },
          "markdown": {
            "type": "string",
            "nullable": true
          },
          "html": {
            "type": "string",
            "nullable": true
          },
          "hash": {
            "type": "string",
            "nullable": true
          },
          "lastModified": {
            "type": "string",
            "nullable": true
          },
          "etag": {
            "type": "string",
            "nullable": true
          },
          "tokens": {
            "type": "number",
            "nullable": true
          },
          "status": {
            "type": "string",
            "enum": [
              "indexed",
              "waiting",
              "processing",
              "error"
            ]
          },
          "size": {
            "type": "number",
            "nullable": true
          },
          "binary": {
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "properties": {
              "aiSummary": {
                "type": "string"
              },
              "aiQuestions": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "aiTokensUsed": {
                "type": "number"
              },
              "processingTime": {
                "type": "number"
              }
            }
          }
        },
        "required": [
          "url",
          "type",
          "dataSourceId"
        ]
      },
      "DocumentCreateResponse": {
        "type": "object",
        "description": "Response object for DocumentCreate",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DocumentCreate"
          }
        }
      },
      "DocumentCreateListResponse": {
        "type": "object",
        "description": "Response object for a list of DocumentCreate",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentCreate"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "EmbeddingCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "internalName": {
            "type": "string"
          },
          "dimension": {
            "type": "number"
          },
          "vendor": {
            "type": "string",
            "enum": [
              "openai",
              "anthropic",
              "google",
              "azure"
            ]
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "config": {
            "type": "object",
            "properties": {}
          }
        },
        "required": [
          "name",
          "internalName",
          "dimension",
          "vendor"
        ]
      },
      "EmbeddingCreateResponse": {
        "type": "object",
        "description": "Response object for EmbeddingCreate",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EmbeddingCreate"
          }
        }
      },
      "EmbeddingCreateListResponse": {
        "type": "object",
        "description": "Response object for a list of EmbeddingCreate",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmbeddingCreate"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "FoundationModelCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "internalName": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "llm",
              "image",
              "tts",
              "moderation",
              "audio",
              "realtime"
            ]
          },
          "vendor": {
            "type": "string",
            "enum": [
              "openai",
              "anthropic",
              "google",
              "azure"
            ]
          },
          "contextWindow": {
            "type": "number"
          },
          "maxOutput": {
            "type": "number",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "config": {
            "type": "object",
            "properties": {}
          }
        },
        "required": [
          "name",
          "internalName",
          "type",
          "vendor",
          "contextWindow",
          "maxOutput"
        ]
      },
      "FoundationModelCreateResponse": {
        "type": "object",
        "description": "Response object for FoundationModelCreate",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/FoundationModelCreate"
          }
        }
      },
      "FoundationModelCreateListResponse": {
        "type": "object",
        "description": "Response object for a list of FoundationModelCreate",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FoundationModelCreate"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "VectorDatabaseCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "pinecone",
              "qdrant",
              "weaviate",
              "milvus",
              "redis",
              "pgvector"
            ]
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "config": {
            "type": "object",
            "properties": {}
          },
          "tenantId": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "VectorDatabaseCreateResponse": {
        "type": "object",
        "description": "Response object for VectorDatabaseCreate",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/VectorDatabaseCreate"
          }
        }
      },
      "VectorDatabaseCreateListResponse": {
        "type": "object",
        "description": "Response object for a list of VectorDatabaseCreate",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VectorDatabaseCreate"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "VectorIndexCreate": {
        "type": "object",
        "properties": {
          "dimension": {
            "type": "number"
          },
          "metric": {
            "type": "string",
            "enum": [
              "dot",
              "cosine",
              "euclid",
              "manhattan"
            ]
          },
          "embedModelId": {
            "type": "string",
            "nullable": true
          },
          "vectorDatabaseId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "config": {
            "type": "object",
            "properties": {}
          }
        },
        "required": [
          "dimension",
          "metric",
          "embedModelId",
          "vectorDatabaseId"
        ]
      },
      "VectorIndexCreateResponse": {
        "type": "object",
        "description": "Response object for VectorIndexCreate",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/VectorIndexCreate"
          }
        }
      },
      "VectorIndexCreateListResponse": {
        "type": "object",
        "description": "Response object for a list of VectorIndexCreate",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VectorIndexCreate"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "JobCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "webScraper",
              "wordPressSite",
              "fileStorage",
              "agentReport"
            ]
          },
          "attempts": {
            "type": "number"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "config": {
            "type": "object",
            "properties": {}
          },
          "dataSourceId": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "lastRun": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "maxAttempts": {
            "type": "number"
          },
          "nextRun": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "priority": {
            "type": "string",
            "enum": [
              "low",
              "default",
              "high"
            ]
          },
          "queue": {
            "type": "string"
          },
          "result": {
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "scheduled": {
            "type": "boolean"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "tenantId": {
            "type": "string",
            "nullable": true
          },
          "timeout": {
            "type": "number"
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "JobCreateResponse": {
        "type": "object",
        "description": "Response object for JobCreate",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JobCreate"
          }
        }
      },
      "JobCreateListResponse": {
        "type": "object",
        "description": "Response object for a list of JobCreate",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobCreate"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "JobExecutionCreate": {
        "type": "object",
        "properties": {
          "attemptNumber": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "queued",
              "running",
              "completed",
              "failed",
              "cancelled",
              "scheduled"
            ]
          },
          "duration": {
            "type": "number",
            "nullable": true
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "logs": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "attemptNumber",
          "status"
        ]
      },
      "JobExecutionCreateResponse": {
        "type": "object",
        "description": "Response object for JobExecutionCreate",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JobExecutionCreate"
          }
        }
      },
      "JobExecutionCreateListResponse": {
        "type": "object",
        "description": "Response object for a list of JobExecutionCreate",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobExecutionCreate"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "FeedbackCreate": {
        "type": "object",
        "properties": {
          "rating": {
            "type": "string",
            "enum": [
              "positive",
              "negative"
            ]
          },
          "content": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "rating"
        ]
      },
      "FeedbackCreateResponse": {
        "type": "object",
        "description": "Response object for FeedbackCreate",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/FeedbackCreate"
          }
        }
      },
      "FeedbackCreateListResponse": {
        "type": "object",
        "description": "Response object for a list of FeedbackCreate",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeedbackCreate"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "type": "string",
            "enum": [
              "user",
              "admin",
              "system"
            ]
          },
          "image": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UserUpdateResponse": {
        "type": "object",
        "description": "Response object for UserUpdate",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UserUpdate"
          }
        }
      },
      "UserUpdateListResponse": {
        "type": "object",
        "description": "Response object for a list of UserUpdate",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserUpdate"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "TenantUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "prospect",
              "active",
              "archived"
            ]
          },
          "settings": {
            "type": "object",
            "properties": {}
          },
          "theme": {
            "type": "object",
            "properties": {}
          },
          "active": {
            "type": "boolean"
          }
        }
      },
      "TenantUpdateResponse": {
        "type": "object",
        "description": "Response object for TenantUpdate",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TenantUpdate"
          }
        }
      },
      "TenantUpdateListResponse": {
        "type": "object",
        "description": "Response object for a list of TenantUpdate",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TenantUpdate"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "AgentUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "instructions": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "config": {
            "type": "object",
            "properties": {
              "chatConfig": {
                "type": "object",
                "properties": {
                  "theme": {
                    "type": "object",
                    "additionalProperties": true
                  },
                  "initialLanguage": {
                    "type": "string",
                    "enum": [
                      "en",
                      "fi",
                      "sv",
                      "de",
                      "es",
                      "fr"
                    ]
                  },
                  "languages": {
                    "type": "object",
                    "properties": {
                      "supported": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "en",
                            "fi",
                            "sv",
                            "de",
                            "es",
                            "fr"
                          ]
                        }
                      },
                      "default": {
                        "type": "string",
                        "enum": [
                          "en",
                          "fi",
                          "sv",
                          "de",
                          "es",
                          "fr"
                        ]
                      }
                    },
                    "required": [
                      "supported",
                      "default"
                    ]
                  },
                  "showDefaultQuestions": {
                    "type": "boolean"
                  },
                  "translations": {
                    "type": "object",
                    "additionalProperties": true
                  }
                },
                "required": [
                  "initialLanguage",
                  "languages"
                ]
              },
              "scraperConfig": {
                "type": "object",
                "properties": {
                  "cleaningFilters": {
                    "type": "object",
                    "properties": {
                      "ids": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "classes": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "tagClasses": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "protectedTags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "toolsConfig": {
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        }
      },
      "AgentUpdateResponse": {
        "type": "object",
        "description": "Response object for AgentUpdate",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AgentUpdate"
          }
        }
      },
      "AgentUpdateListResponse": {
        "type": "object",
        "description": "Response object for a list of AgentUpdate",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentUpdate"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "ChatUpdate": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "info": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "ChatUpdateResponse": {
        "type": "object",
        "description": "Response object for ChatUpdate",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ChatUpdate"
          }
        }
      },
      "ChatUpdateListResponse": {
        "type": "object",
        "description": "Response object for a list of ChatUpdate",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatUpdate"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "DataSourceUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "enum": [
              "fileStorage",
              "webScraper",
              "wordPressSite"
            ]
          },
          "config": {
            "type": "object",
            "properties": {
              "cleaningFilters": {
                "type": "object",
                "properties": {
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "classes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "tagClasses": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "skip": {
                    "type": "object",
                    "properties": {
                      "removal": {
                        "type": "boolean"
                      },
                      "sanitation": {
                        "type": "boolean"
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "unwrap": {
                        "type": "boolean"
                      },
                      "postProcessing": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          },
          "vectorDatabaseId": {
            "type": "string",
            "nullable": true
          },
          "vectorIndexId": {
            "type": "string",
            "nullable": true
          },
          "embedModelId": {
            "type": "string",
            "nullable": true
          },
          "intervalType": {
            "type": "string",
            "enum": [
              "daily",
              "weekly",
              "monthly",
              "yearly",
              "webHook"
            ]
          },
          "intervalValue": {
            "type": "number"
          },
          "targetUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "DataSourceUpdateResponse": {
        "type": "object",
        "description": "Response object for DataSourceUpdate",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DataSourceUpdate"
          }
        }
      },
      "DataSourceUpdateListResponse": {
        "type": "object",
        "description": "Response object for a list of DataSourceUpdate",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSourceUpdate"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "VectorDatabaseUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "pinecone",
              "qdrant",
              "weaviate",
              "milvus",
              "redis",
              "pgvector"
            ]
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "config": {
            "type": "object",
            "properties": {}
          },
          "tenantId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "VectorDatabaseUpdateResponse": {
        "type": "object",
        "description": "Response object for VectorDatabaseUpdate",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/VectorDatabaseUpdate"
          }
        }
      },
      "VectorDatabaseUpdateListResponse": {
        "type": "object",
        "description": "Response object for a list of VectorDatabaseUpdate",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VectorDatabaseUpdate"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "VectorIndexUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "dimension": {
            "type": "number"
          },
          "metric": {
            "type": "object",
            "properties": {}
          },
          "config": {
            "type": "object",
            "additionalProperties": true
          },
          "embedModelId": {
            "type": "string",
            "nullable": true
          },
          "vectorDatabaseId": {
            "type": "string"
          }
        }
      },
      "VectorIndexUpdateResponse": {
        "type": "object",
        "description": "Response object for VectorIndexUpdate",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/VectorIndexUpdate"
          }
        }
      },
      "VectorIndexUpdateListResponse": {
        "type": "object",
        "description": "Response object for a list of VectorIndexUpdate",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VectorIndexUpdate"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "JobUpdate": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "queued",
              "running",
              "completed",
              "failed",
              "cancelled",
              "scheduled"
            ]
          },
          "result": {
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "nextRun": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastRun": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "attempts": {
            "type": "number"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "completedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "JobUpdateResponse": {
        "type": "object",
        "description": "Response object for JobUpdate",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JobUpdate"
          }
        }
      },
      "JobUpdateListResponse": {
        "type": "object",
        "description": "Response object for a list of JobUpdate",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobUpdate"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "JobExecutionUpdate": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "queued",
              "running",
              "completed",
              "failed",
              "cancelled",
              "scheduled"
            ]
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "logs": {
            "type": "string",
            "nullable": true
          },
          "duration": {
            "type": "number",
            "nullable": true
          }
        }
      },
      "JobExecutionUpdateResponse": {
        "type": "object",
        "description": "Response object for JobExecutionUpdate",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JobExecutionUpdate"
          }
        }
      },
      "JobExecutionUpdateListResponse": {
        "type": "object",
        "description": "Response object for a list of JobExecutionUpdate",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobExecutionUpdate"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "PaginationMeta": {
        "type": "object",
        "description": "Pagination metadata",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total number of items"
          },
          "page": {
            "type": "integer",
            "description": "Current page number"
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of items per page"
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages"
          }
        }
      },
      "JobStatus": {
        "type": "string",
        "description": "Job status enumeration",
        "enum": [
          "pending",
          "running",
          "completed",
          "failed",
          "cancelled"
        ]
      },
      "JobType": {
        "type": "string",
        "description": "Job type enumeration",
        "enum": [
          "index",
          "delete",
          "process",
          "custom"
        ]
      },
      "UserRole": {
        "type": "string",
        "description": "User role enumeration",
        "enum": [
          "user",
          "admin",
          "system"
        ]
      },
      "TenantStatus": {
        "type": "string",
        "description": "Tenant status enumeration",
        "enum": [
          "active",
          "inactive",
          "pending"
        ]
      },
      "MessageBatchResponse": {
        "type": "object",
        "description": "Response wrapper for a batch of messages",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "DataSourceEvent": {
        "type": "object",
        "description": "Data source event information",
        "properties": {
          "id": {
            "type": "string",
            "description": "Event ID"
          },
          "dataSourceId": {
            "type": "string",
            "description": "ID of the data source"
          },
          "type": {
            "type": "string",
            "enum": [
              "info",
              "warning",
              "error",
              "success"
            ],
            "description": "Event type"
          },
          "message": {
            "type": "string",
            "description": "Event message"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Event timestamp"
          }
        }
      },
      "CleanDocumentRequest": {
        "type": "object",
        "description": "Request to clean a document",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL of the document to clean"
          },
          "html": {
            "type": "string",
            "description": "HTML content to clean"
          }
        }
      },
      "CleanDocumentResponse": {
        "type": "object",
        "description": "Response for a cleaned document",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "content": {
                "type": "string",
                "description": "Cleaned document content"
              }
            }
          }
        }
      },
      "AgentConfigResponse": {
        "type": "object",
        "description": "Response wrapper for agent configuration",
        "properties": {
          "data": {
            "type": "object",
            "description": "Agent configuration data",
            "properties": {
              "config": {
                "type": "object",
                "description": "Agent configuration object",
                "additionalProperties": true
              }
            }
          }
        }
      },
      "JsonResponse": {
        "type": "object",
        "description": "Generic JSON response",
        "properties": {
          "data": {
            "type": "object",
            "description": "JSON data",
            "additionalProperties": true
          }
        }
      },
      "JsonObject": {
        "type": "object",
        "description": "Generic JSON object",
        "additionalProperties": true
      },
      "ErrorResponse": {
        "type": "object",
        "description": "Standard error response",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Error code"
              },
              "message": {
                "type": "string",
                "description": "Error message"
              },
              "details": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string",
                      "description": "Field path that caused the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message for this field"
                    }
                  }
                },
                "description": "Additional error details"
              }
            },
            "required": [
              "code",
              "message"
            ]
          }
        },
        "required": [
          "error"
        ]
      },
      "ListenResponse": {
        "type": "object",
        "description": "Server-sent events configuration response",
        "properties": {
          "connectionId": {
            "type": "string",
            "description": "Unique identifier for the connection"
          },
          "filters": {
            "type": "object",
            "description": "Event filters for this connection",
            "additionalProperties": true
          }
        },
        "required": [
          "connectionId"
        ]
      },
      "DocumentUpdate": {
        "type": "object",
        "description": "Schema for updating Document",
        "properties": {},
        "additionalProperties": true
      },
      "EmbeddingUpdate": {
        "type": "object",
        "description": "Schema for updating Embedding",
        "properties": {},
        "additionalProperties": true
      },
      "FeedbackUpdate": {
        "type": "object",
        "description": "Schema for updating Feedback",
        "properties": {},
        "additionalProperties": true
      },
      "FoundationModelUpdate": {
        "type": "object",
        "description": "Schema for updating FoundationModel",
        "properties": {},
        "additionalProperties": true
      },
      "MessageCreate": {
        "type": "object",
        "description": "Schema for creating Message",
        "properties": {},
        "additionalProperties": true
      },
      "MessageUpdate": {
        "type": "object",
        "description": "Schema for updating Message",
        "properties": {},
        "additionalProperties": true
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT Bearer token authentication"
      },
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "API key authentication via header"
      },
      "apiToken": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "API token authentication prefixed with \"Token \""
      }
    },
    "responses": {
      "OK": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          }
        }
      },
      "Created": {
        "description": "Resource created successfully",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": true
                },
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "example": "123e4567-e89b-12d3-a456-426614174000"
                }
              }
            }
          }
        }
      },
      "NoContent": {
        "description": "Success - No content"
      },
      "NoContentResponse": {
        "description": "Success - No content"
      },
      "BadRequestError": {
        "description": "Bad request - Invalid input",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Invalid input data"
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "field": {
                        "type": "string",
                        "example": "email"
                      },
                      "message": {
                        "type": "string",
                        "example": "Must be a valid email address"
                      }
                    }
                  }
                }
              },
              "required": [
                "error"
              ]
            }
          }
        }
      },
      "UnauthorizedError": {
        "description": "Unauthorized - Authentication required",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Authentication required"
                }
              },
              "required": [
                "error"
              ]
            }
          }
        }
      },
      "ForbiddenError": {
        "description": "Forbidden - Insufficient permissions",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Insufficient permissions to access this resource"
                }
              },
              "required": [
                "error"
              ]
            }
          }
        }
      },
      "NotFoundError": {
        "description": "Not Found - Resource does not exist",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Resource not found"
                }
              },
              "required": [
                "error"
              ]
            }
          }
        }
      },
      "ConflictError": {
        "description": "Conflict - Resource already exists or state conflict",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "A resource with this identifier already exists"
                }
              },
              "required": [
                "error"
              ]
            }
          }
        }
      },
      "ValidationError": {
        "description": "Validation Error - Request data validation failed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Validation failed"
                },
                "validationErrors": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "field": {
                        "type": "string",
                        "example": "email"
                      },
                      "message": {
                        "type": "string",
                        "example": "Invalid email format"
                      },
                      "code": {
                        "type": "string",
                        "example": "invalid_string"
                      }
                    }
                  }
                }
              },
              "required": [
                "error",
                "validationErrors"
              ]
            }
          }
        }
      },
      "TooManyRequestsError": {
        "description": "Too Many Requests - Rate limit exceeded",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Rate limit exceeded"
                },
                "retryAfterSeconds": {
                  "type": "integer",
                  "example": 60
                }
              },
              "required": [
                "error",
                "retryAfterSeconds"
              ]
            }
          }
        }
      },
      "InternalError": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "An unexpected error occurred"
                }
              },
              "required": [
                "error"
              ]
            }
          }
        }
      },
      "SSE": {
        "description": "Server-Sent Events stream",
        "content": {
          "text/event-stream": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        }
      },
      "FileDownload": {
        "description": "File download",
        "content": {
          "application/octet-stream": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        }
      },
      "AgentDatasourceResponse": {
        "description": "Agent data source operation success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "ads_123e4567e89b12d3a456426614174000"
                    },
                    "agentId": {
                      "type": "string",
                      "example": "a_123e4567e89b12d3a456426614174000"
                    },
                    "dataSourceId": {
                      "type": "string",
                      "example": "ds_123e4567e89b12d3a456426614174000"
                    },
                    "description": {
                      "type": "string",
                      "example": "Connection between sales agent and customer database"
                    },
                    "instructions": {
                      "type": "string",
                      "example": "Use this data source for customer queries"
                    },
                    "config": {
                      "type": "object",
                      "example": {
                        "priority": "high"
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2023-01-01T00:00:00Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2023-01-01T00:00:00Z"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "MessageBatchResponse": {
        "description": "Response containing a batch of messages",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/MessageBatchResponse"
            }
          }
        }
      },
      "JsonResponse": {
        "description": "Generic JSON response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/JsonResponse"
            }
          }
        }
      },
      "AgentConfigResponse": {
        "description": "Response for agent configuration",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AgentConfigResponse"
            }
          }
        }
      },
      "AgentDataSourceListResponse": {
        "description": "Response containing a list of agent data sources",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AgentDataSourceListResponse"
            }
          }
        }
      },
      "AgentResponse": {
        "description": "AgentResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AgentResponse"
            }
          }
        }
      },
      "AgentListResponse": {
        "description": "AgentListResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AgentListResponse"
            }
          }
        }
      },
      "ChatResponse": {
        "description": "ChatResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ChatResponse"
            }
          }
        }
      },
      "ChatListResponse": {
        "description": "ChatListResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ChatListResponse"
            }
          }
        }
      },
      "DataSourceResponse": {
        "description": "DataSourceResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DataSourceResponse"
            }
          }
        }
      },
      "DataSourceListResponse": {
        "description": "DataSourceListResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DataSourceListResponse"
            }
          }
        }
      },
      "DocumentResponse": {
        "description": "DocumentResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DocumentResponse"
            }
          }
        }
      },
      "DocumentListResponse": {
        "description": "DocumentListResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DocumentListResponse"
            }
          }
        }
      },
      "EmbeddingResponse": {
        "description": "EmbeddingResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/EmbeddingResponse"
            }
          }
        }
      },
      "EmbeddingListResponse": {
        "description": "EmbeddingListResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/EmbeddingListResponse"
            }
          }
        }
      },
      "FeedbackResponse": {
        "description": "FeedbackResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FeedbackResponse"
            }
          }
        }
      },
      "FeedbackListResponse": {
        "description": "FeedbackListResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FeedbackListResponse"
            }
          }
        }
      },
      "FoundationModelResponse": {
        "description": "FoundationModelResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FoundationModelResponse"
            }
          }
        }
      },
      "FoundationModelListResponse": {
        "description": "FoundationModelListResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FoundationModelListResponse"
            }
          }
        }
      },
      "JobResponse": {
        "description": "JobResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/JobResponse"
            }
          }
        }
      },
      "JobListResponse": {
        "description": "JobListResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/JobListResponse"
            }
          }
        }
      },
      "JobExecutionResponse": {
        "description": "JobExecutionResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/JobExecutionResponse"
            }
          }
        }
      },
      "JobExecutionListResponse": {
        "description": "JobExecutionListResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/JobExecutionListResponse"
            }
          }
        }
      },
      "MessageResponse": {
        "description": "MessageResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/MessageResponse"
            }
          }
        }
      },
      "MessageListResponse": {
        "description": "MessageListResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/MessageListResponse"
            }
          }
        }
      },
      "TenantResponse": {
        "description": "TenantResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TenantResponse"
            }
          }
        }
      },
      "TenantListResponse": {
        "description": "TenantListResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TenantListResponse"
            }
          }
        }
      },
      "UserResponse": {
        "description": "UserResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UserResponse"
            }
          }
        }
      },
      "UserListResponse": {
        "description": "UserListResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UserListResponse"
            }
          }
        }
      },
      "VectorDatabaseResponse": {
        "description": "VectorDatabaseResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/VectorDatabaseResponse"
            }
          }
        }
      },
      "VectorDatabaseListResponse": {
        "description": "VectorDatabaseListResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/VectorDatabaseListResponse"
            }
          }
        }
      },
      "VectorIndexResponse": {
        "description": "VectorIndexResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/VectorIndexResponse"
            }
          }
        }
      },
      "VectorIndexListResponse": {
        "description": "VectorIndexListResponse successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/VectorIndexListResponse"
            }
          }
        }
      }
    },
    "parameters": {
      "tenantInclude": {
        "in": "query",
        "name": "include",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "users",
              "agents",
              "dataSources",
              "webhooks"
            ]
          }
        },
        "style": "form",
        "explode": true,
        "description": "Include related Tenant resources. Multiple values can be separated by commas."
      },
      "agentInclude": {
        "in": "query",
        "name": "include",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "tenant",
              "agentSettings",
              "credentials",
              "dataSourceConnections"
            ]
          }
        },
        "style": "form",
        "explode": true,
        "description": "Include related Agent resources. Multiple values can be separated by commas."
      },
      "dataSourceInclude": {
        "in": "query",
        "name": "include",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "tenant",
              "agentConnections",
              "credentials"
            ]
          }
        },
        "style": "form",
        "explode": true,
        "description": "Include related DataSource resources. Multiple values can be separated by commas."
      },
      "tenant_id": {
        "in": "path",
        "name": "tenantId",
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "required": true,
        "description": "ID of the tenant"
      },
      "user_id": {
        "in": "path",
        "name": "userId",
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "required": true,
        "description": "ID of the user"
      },
      "agent_id": {
        "in": "path",
        "name": "agentId",
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "required": true,
        "description": "ID of the agent"
      },
      "dataSource_id": {
        "in": "path",
        "name": "dataSourceId",
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "required": true,
        "description": "ID of the data source"
      },
      "limit": {
        "in": "query",
        "name": "limit",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100,
          "default": 20
        },
        "required": false,
        "description": "Maximum number of items to return"
      },
      "offset": {
        "in": "query",
        "name": "offset",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        },
        "required": false,
        "description": "Number of items to skip"
      },
      "page": {
        "in": "query",
        "name": "page",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 1
        },
        "required": false,
        "description": "Page number (1-based)"
      }
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "Operations related to Authentication"
    },
    {
      "name": "Embeddings",
      "description": "Operations related to Embeddings"
    },
    {
      "name": "Foundation Models",
      "description": "Operations related to Foundation Models"
    },
    {
      "name": "System",
      "description": "Operations related to System"
    },
    {
      "name": "Jobs",
      "description": "Operations related to Jobs"
    },
    {
      "name": "Listen",
      "description": "Operations related to Listen"
    },
    {
      "name": "Chats",
      "description": "Operations related to Chats"
    },
    {
      "name": "Messages",
      "description": "Operations related to Messages"
    },
    {
      "name": "Feedback",
      "description": "Operations related to Feedback"
    },
    {
      "name": "Agents",
      "description": "Operations related to Agents"
    },
    {
      "name": "Agent Datasources",
      "description": "Operations related to Agent Datasources"
    },
    {
      "name": "Analytics",
      "description": "Operations related to Analytics"
    },
    {
      "name": "Documents",
      "description": "Operations related to Documents"
    },
    {
      "name": "Datasources",
      "description": "Operations related to Datasources"
    },
    {
      "name": "Search",
      "description": "Operations related to Search"
    },
    {
      "name": "Tenants",
      "description": "Operations related to Tenants"
    },
    {
      "name": "Users",
      "description": "Operations related to Users"
    },
    {
      "name": "Indices",
      "description": "Operations related to Indices"
    },
    {
      "name": "Vector Databases",
      "description": "Operations related to Vector Databases"
    }
  ],
  "servers": [
    {
      "url": "http://localhost:3000/api",
      "description": "API server"
    }
  ]
}