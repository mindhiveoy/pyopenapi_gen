[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "pyopenapi-gen"
version = "0.8.9"
description = "Modern, async-first Python client generator for OpenAPI specifications with advanced cycle detection and unified type resolution"
authors = ["Mindhive Oy <contact@mindhive.fi>"]
maintainers = ["Ville Venäläinen | Mindhive Oy <ville@mindhive.fi>"]
readme = "README.md"
license = "MIT"
keywords = [
  "openapi",
  "swagger", 
  "client",
  "generator",
  "async",
  "python",
  "api",
  "http",
  "rest",
  "type-safe",
  "code-generation",
  "enterprise"
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Framework :: AsyncIO",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent", 
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.12",
  "Topic :: Internet :: WWW/HTTP",
  "Topic :: Software Development :: Code Generators",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Typing :: Typed"
]
packages = [{include = "pyopenapi_gen", from = "src"}]

[tool.poetry.urls]
Homepage = "https://github.com/mindhiveoy/pyopenapi-gen"
Documentation = "https://github.com/mindhiveoy/pyopenapi-gen/blob/main/README.md"
Repository = "https://github.com/mindhiveoy/pyopenapi-gen"
Issues = "https://github.com/mindhiveoy/pyopenapi-gen/issues"
Changelog = "https://github.com/mindhiveoy/pyopenapi-gen/blob/main/CHANGELOG.md"
"Bug Reports" = "https://github.com/mindhiveoy/pyopenapi-gen/issues"
"Source Code" = "https://github.com/mindhiveoy/pyopenapi-gen"

[tool.poetry.dependencies]
# Ensure Python 3.12.x specifically  
python = ">=3.12,<3.13"
openapi-spec-validator = ">=0.7"
openapi-core = ">=0.19"
PyYAML = ">=6.0"
typer = ">=0.12.0,<0.14.0"
click = ">=8.0.0,<9.0.0"
httpx = ">=0.24.0"
dataclass-wizard = ">=0.22.0"

[tool.poetry.group.dev.dependencies]
black = ">=23.0"
ruff = ">=0.4"
mypy = ">=1.7"
pytest = ">=7.0"
pytest-cov = ">=4.0"
pytest-timeout = ">=2.1.0"
pytest-xdist = ">=3.0.0"
pytest-asyncio = ">=0.20.0"
safety = ">=2.0.0"
bandit = {extras = ["toml"], version = ">=1.7.0"}
types-pyyaml = ">=6.0.12"
types-toml = ">=0.10.8"

[tool.poetry.scripts]
pyopenapi-gen = "pyopenapi_gen.cli:app"

[tool.black]
line-length = 120
target-version = ["py312"]
include = "\\.py$"

[tool.ruff]
line-length = 120
preview = true

[tool.ruff.lint]
select = ["F401", "E", "W", "I"]
ignore = ["E501"]  # Ignore line length for test files - focus on logic errors

[tool.mypy]
python_version = "3.12"
strict = true
show_error_codes = true
namespace_packages = true
implicit_optional = false
# Disable overly strict return checking for match statements
warn_no_return = false
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
check_untyped_defs = true
disallow_untyped_calls = true

[tool.bandit]
# Skip these specific checks that are acceptable for this project:
# B101: assert_used - We use assertions for Design by Contract (DbC) as documented
# B404: import_subprocess - We need subprocess for post-processing (ruff, mypy) 
# B603: subprocess_without_shell_equals_true - We use controlled subprocess calls to trusted tools
# B110: try_except_pass - Acceptable for telemetry error handling
skips = ["B101", "B404", "B603", "B110"]

# Only scan source code, not tests (tests may have different security requirements)
exclude_dirs = ["tests/", "_process/", "venv/", ".venv/"]

[tool.pytest.ini_options]
addopts = "-ra"
testpaths = ["tests"]
pythonpath = "src"
python_files = ["test_*.py"]
python_functions = ["test_"]
log_cli = false
log_cli_level = "WARNING"
asyncio_default_fixture_loop_scope = "function"
# For details on registering custom marks, see:
# https://docs.pytest.org/en/stable/how-to-mark.html
markers = [
    "timeout: specify a timeout for a test function (integration with pytest-timeout).",
]
