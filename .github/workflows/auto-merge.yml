name: Auto-merge PRs

on:
  pull_request:
    types: [opened, synchronize]
  check_suite:
    types: [completed]
  status: {}

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' || 
      (github.event_name == 'check_suite' && github.event.check_suite.conclusion == 'success') ||
      (github.event_name == 'status' && github.event.state == 'success')
    
    permissions:
      contents: write
      pull-requests: write
      checks: read
      statuses: read
      actions: read

    steps:
      - name: Get PR number
        id: pr
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          else
            # For check_suite and status events, get PR from commits
            pr_number=$(gh api graphql -f query='
              query($owner: String!, $repo: String!, $sha: String!) {
                repository(owner: $owner, name: $repo) {
                  object(expression: $sha) {
                    ... on Commit {
                      associatedPullRequests(first: 1) {
                        nodes {
                          number
                        }
                      }
                    }
                  }
                }
              }' -f owner="${{ github.repository_owner }}" -f repo="${{ github.event.repository.name }}" -f sha="${{ github.event.check_suite.head_sha || github.event.commit.sha }}" --jq '.data.repository.object.associatedPullRequests.nodes[0].number')
            
            if [[ -n "$pr_number" && "$pr_number" != "null" ]]; then
              echo "number=$pr_number" >> $GITHUB_OUTPUT
            else
              echo "No PR found for this commit"
              exit 0
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if PR should be auto-merged
        id: should_merge
        run: |
          pr_number="${{ steps.pr.outputs.number }}"
          if [[ -z "$pr_number" ]]; then
            echo "No PR number found"
            exit 0
          fi

          # Get PR details
          pr_data=$(gh api repos/${{ github.repository }}/pulls/$pr_number)
          
          # Extract PR information
          pr_title=$(echo "$pr_data" | jq -r '.title')
          pr_author=$(echo "$pr_data" | jq -r '.user.login')
          pr_state=$(echo "$pr_data" | jq -r '.state')
          pr_mergeable=$(echo "$pr_data" | jq -r '.mergeable')
          pr_draft=$(echo "$pr_data" | jq -r '.draft')
          
          echo "PR #$pr_number: $pr_title"
          echo "Author: $pr_author"
          echo "State: $pr_state, Mergeable: $pr_mergeable, Draft: $pr_draft"
          
          # Check if PR should be auto-merged
          should_merge=false
          
          # Auto-merge conditions:
          # 1. PR is from dependabot (dependency updates)
          # 2. PR is a version bump (release preparation)
          # 3. PR is from devops-mindhive (automation PRs)
          # 4. PR title contains [auto-merge] tag
          
          if [[ "$pr_author" == "dependabot[bot]" ]] || \
             [[ "$pr_author" == "devops-mindhive" ]] || \
             [[ "$pr_title" =~ ^(deps|chore|release|docs): ]] || \
             [[ "$pr_title" =~ \[auto-merge\] ]]; then
            should_merge=true
          fi
          
          # Only merge if PR is open, not draft, and mergeable
          if [[ "$pr_state" == "open" && "$pr_draft" == "false" && "$pr_mergeable" == "true" && "$should_merge" == "true" ]]; then
            echo "should_merge=true" >> $GITHUB_OUTPUT
            echo "‚úÖ PR qualifies for auto-merge"
          else
            echo "should_merge=false" >> $GITHUB_OUTPUT
            echo "‚ùå PR does not qualify for auto-merge"
            echo "  State: $pr_state, Draft: $pr_draft, Mergeable: $pr_mergeable, Should merge: $should_merge"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check PR status
        id: pr_status
        if: steps.should_merge.outputs.should_merge == 'true'
        run: |
          pr_number="${{ steps.pr.outputs.number }}"
          
          # Get combined status for the PR
          head_sha=$(gh api repos/${{ github.repository }}/pulls/$pr_number --jq '.head.sha')
          
          # Check required status checks
          combined_status=$(gh api repos/${{ github.repository }}/commits/$head_sha/status --jq '.state')
          
          # Check check runs (for Actions)
          check_runs=$(gh api repos/${{ github.repository }}/commits/$head_sha/check-runs --jq '.check_runs[] | select(.name != "auto-merge") | .conclusion')
          
          echo "Combined status: $combined_status"
          echo "Check runs: $check_runs"
          
          # Count successful and failed checks
          total_checks=$(echo "$check_runs" | wc -l | tr -d ' ')
          successful_checks=$(echo "$check_runs" | grep -c "success" || echo "0")
          failed_checks=$(echo "$check_runs" | grep -c "failure" || echo "0")
          
          echo "Total checks: $total_checks, Successful: $successful_checks, Failed: $failed_checks"
          
          # Allow merge if:
          # 1. Combined status is success OR 
          # 2. Most checks are successful and only integration-tests failed (known issue)
          if [[ "$combined_status" == "success" ]] || \
             [[ "$successful_checks" -gt 0 && "$failed_checks" -le 1 ]]; then
            echo "checks_passed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Checks passed or acceptable failure pattern"
          else
            echo "checks_passed=false" >> $GITHUB_OUTPUT
            echo "‚ùå Checks not passing"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto-merge PR
        if: steps.should_merge.outputs.should_merge == 'true' && steps.pr_status.outputs.checks_passed == 'true'
        run: |
          pr_number="${{ steps.pr.outputs.number }}"
          
          echo "üöÄ Auto-merging PR #$pr_number"
          
          # Enable auto-merge with squash
          gh api graphql -f query='
            mutation($pullRequestId: ID!) {
              enablePullRequestAutoMerge(input: {
                pullRequestId: $pullRequestId,
                mergeMethod: SQUASH
              }) {
                pullRequest {
                  id
                  autoMergeRequest {
                    enabledAt
                  }
                }
              }
            }' -f pullRequestId="$(gh api repos/${{ github.repository }}/pulls/$pr_number --jq '.node_id')"
          
          echo "‚úÖ Auto-merge enabled for PR #$pr_number"
          
          # Add a comment explaining the auto-merge
          gh api repos/${{ github.repository }}/issues/$pr_number/comments \
            -f body="ü§ñ Auto-merge enabled - This PR qualifies for automatic merging. Will merge when all checks pass."

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}